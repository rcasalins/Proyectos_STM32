
ProyectoTallerV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08007f08  08007f08  00017f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083ec  080083ec  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  080083ec  080083ec  000183ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f4  080083f4  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080083fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000218  08008610  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08008610  00020420  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007082  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013a9  00000000  00000000  000272c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000418  00000000  00000000  00028670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000380  00000000  00000000  00028a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010bfb  00000000  00000000  00028e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000051ab  00000000  00000000  00039a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057b3f  00000000  00000000  0003ebae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000966ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f0  00000000  00000000  00096740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ef0 	.word	0x08007ef0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08007ef0 	.word	0x08007ef0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83e 	bl	8000d38 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	4605      	mov	r5, r0
 8000ccc:	460c      	mov	r4, r1
 8000cce:	4628      	mov	r0, r5
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f7ff ff09 	bl	8000aec <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x20>
 8000cdc:	4628      	mov	r0, r5
 8000cde:	4621      	mov	r1, r4
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc7f 	bl	8000608 <__aeabi_dmul>
 8000d0a:	f7ff ff55 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc00 	bl	8000514 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc76 	bl	8000608 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff fab8 	bl	8000298 <__aeabi_dsub>
 8000d28:	f7ff ff46 	bl	8000bb8 <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9e08      	ldr	r6, [sp, #32]
 8000d3e:	460d      	mov	r5, r1
 8000d40:	4604      	mov	r4, r0
 8000d42:	468e      	mov	lr, r1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f040 8082 	bne.w	8000e4e <__udivmoddi4+0x116>
 8000d4a:	428a      	cmp	r2, r1
 8000d4c:	4617      	mov	r7, r2
 8000d4e:	d946      	bls.n	8000dde <__udivmoddi4+0xa6>
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	b14a      	cbz	r2, 8000d6a <__udivmoddi4+0x32>
 8000d56:	f1c2 0120 	rsb	r1, r2, #32
 8000d5a:	fa05 f302 	lsl.w	r3, r5, r2
 8000d5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d62:	4097      	lsls	r7, r2
 8000d64:	ea41 0e03 	orr.w	lr, r1, r3
 8000d68:	4094      	lsls	r4, r2
 8000d6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6e:	0c23      	lsrs	r3, r4, #16
 8000d70:	fbbe fcf8 	udiv	ip, lr, r8
 8000d74:	b2b9      	uxth	r1, r7
 8000d76:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000d7a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d7e:	fb0c f001 	mul.w	r0, ip, r1
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8000d8c:	f080 8116 	bcs.w	8000fbc <__udivmoddi4+0x284>
 8000d90:	4298      	cmp	r0, r3
 8000d92:	f240 8113 	bls.w	8000fbc <__udivmoddi4+0x284>
 8000d96:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9a:	443b      	add	r3, r7
 8000d9c:	1a1b      	subs	r3, r3, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3310 	mls	r3, r8, r0, r3
 8000da8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dac:	fb00 f101 	mul.w	r1, r0, r1
 8000db0:	42a1      	cmp	r1, r4
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x90>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	f080 8101 	bcs.w	8000fc0 <__udivmoddi4+0x288>
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	f240 80fe 	bls.w	8000fc0 <__udivmoddi4+0x288>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	1a64      	subs	r4, r4, r1
 8000dca:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11e      	cbz	r6, 8000dda <__udivmoddi4+0xa2>
 8000dd2:	40d4      	lsrs	r4, r2
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	b902      	cbnz	r2, 8000de2 <__udivmoddi4+0xaa>
 8000de0:	deff      	udf	#255	; 0xff
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d14f      	bne.n	8000e8a <__udivmoddi4+0x152>
 8000dea:	1bcb      	subs	r3, r1, r7
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	fa1f f887 	uxth.w	r8, r7
 8000df4:	2101      	movs	r1, #1
 8000df6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dfa:	0c25      	lsrs	r5, r4, #16
 8000dfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e00:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e04:	fb08 f30c 	mul.w	r3, r8, ip
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0xe4>
 8000e0c:	197d      	adds	r5, r7, r5
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0xe2>
 8000e14:	42ab      	cmp	r3, r5
 8000e16:	f200 80e7 	bhi.w	8000fe8 <__udivmoddi4+0x2b0>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1aed      	subs	r5, r5, r3
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb5 f0fe 	udiv	r0, r5, lr
 8000e24:	fb0e 5510 	mls	r5, lr, r0, r5
 8000e28:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x10c>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x10a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80d7 	bhi.w	8000ff0 <__udivmoddi4+0x2b8>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e7c0      	b.n	8000dd0 <__udivmoddi4+0x98>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x12c>
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	f000 80af 	beq.w	8000fb6 <__udivmoddi4+0x27e>
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e64:	fab3 f183 	clz	r1, r3
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	d14b      	bne.n	8000f04 <__udivmoddi4+0x1cc>
 8000e6c:	42ab      	cmp	r3, r5
 8000e6e:	d302      	bcc.n	8000e76 <__udivmoddi4+0x13e>
 8000e70:	4282      	cmp	r2, r0
 8000e72:	f200 80b7 	bhi.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e76:	1a84      	subs	r4, r0, r2
 8000e78:	eb65 0303 	sbc.w	r3, r5, r3
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	469e      	mov	lr, r3
 8000e80:	2e00      	cmp	r6, #0
 8000e82:	d0aa      	beq.n	8000dda <__udivmoddi4+0xa2>
 8000e84:	e9c6 4e00 	strd	r4, lr, [r6]
 8000e88:	e7a7      	b.n	8000dda <__udivmoddi4+0xa2>
 8000e8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000e8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e92:	4097      	lsls	r7, r2
 8000e94:	fa20 f00c 	lsr.w	r0, r0, ip
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000ea0:	4318      	orrs	r0, r3
 8000ea2:	fbbc f1fe 	udiv	r1, ip, lr
 8000ea6:	0c05      	lsrs	r5, r0, #16
 8000ea8:	fb0e cc11 	mls	ip, lr, r1, ip
 8000eac:	fa1f f887 	uxth.w	r8, r7
 8000eb0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000eb4:	fb01 f308 	mul.w	r3, r1, r8
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x19c>
 8000ec0:	197d      	adds	r5, r7, r5
 8000ec2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000ec6:	f080 808b 	bcs.w	8000fe0 <__udivmoddi4+0x2a8>
 8000eca:	42ab      	cmp	r3, r5
 8000ecc:	f240 8088 	bls.w	8000fe0 <__udivmoddi4+0x2a8>
 8000ed0:	3902      	subs	r1, #2
 8000ed2:	443d      	add	r5, r7
 8000ed4:	1aeb      	subs	r3, r5, r3
 8000ed6:	b285      	uxth	r5, r0
 8000ed8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000edc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ee0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ee4:	fb00 f308 	mul.w	r3, r0, r8
 8000ee8:	42ab      	cmp	r3, r5
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0x1c4>
 8000eec:	197d      	adds	r5, r7, r5
 8000eee:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ef2:	d271      	bcs.n	8000fd8 <__udivmoddi4+0x2a0>
 8000ef4:	42ab      	cmp	r3, r5
 8000ef6:	d96f      	bls.n	8000fd8 <__udivmoddi4+0x2a0>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	443d      	add	r5, r7
 8000efc:	1aeb      	subs	r3, r5, r3
 8000efe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f02:	e778      	b.n	8000df6 <__udivmoddi4+0xbe>
 8000f04:	f1c1 0c20 	rsb	ip, r1, #32
 8000f08:	408b      	lsls	r3, r1
 8000f0a:	fa22 f70c 	lsr.w	r7, r2, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	fa20 f40c 	lsr.w	r4, r0, ip
 8000f14:	fa05 f301 	lsl.w	r3, r5, r1
 8000f18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f1c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000f20:	431c      	orrs	r4, r3
 8000f22:	0c23      	lsrs	r3, r4, #16
 8000f24:	fbb5 f9fe 	udiv	r9, r5, lr
 8000f28:	fa1f f887 	uxth.w	r8, r7
 8000f2c:	fb0e 5519 	mls	r5, lr, r9, r5
 8000f30:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000f34:	fb09 fa08 	mul.w	sl, r9, r8
 8000f38:	45aa      	cmp	sl, r5
 8000f3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f3e:	fa00 f301 	lsl.w	r3, r0, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x21e>
 8000f44:	197d      	adds	r5, r7, r5
 8000f46:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f4a:	d247      	bcs.n	8000fdc <__udivmoddi4+0x2a4>
 8000f4c:	45aa      	cmp	sl, r5
 8000f4e:	d945      	bls.n	8000fdc <__udivmoddi4+0x2a4>
 8000f50:	f1a9 0902 	sub.w	r9, r9, #2
 8000f54:	443d      	add	r5, r7
 8000f56:	eba5 050a 	sub.w	r5, r5, sl
 8000f5a:	b2a4      	uxth	r4, r4
 8000f5c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f60:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f68:	fb00 f808 	mul.w	r8, r0, r8
 8000f6c:	45a0      	cmp	r8, r4
 8000f6e:	d907      	bls.n	8000f80 <__udivmoddi4+0x248>
 8000f70:	193c      	adds	r4, r7, r4
 8000f72:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f76:	d22d      	bcs.n	8000fd4 <__udivmoddi4+0x29c>
 8000f78:	45a0      	cmp	r8, r4
 8000f7a:	d92b      	bls.n	8000fd4 <__udivmoddi4+0x29c>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	443c      	add	r4, r7
 8000f80:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f84:	eba4 0408 	sub.w	r4, r4, r8
 8000f88:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8c:	454c      	cmp	r4, r9
 8000f8e:	46c6      	mov	lr, r8
 8000f90:	464d      	mov	r5, r9
 8000f92:	d319      	bcc.n	8000fc8 <__udivmoddi4+0x290>
 8000f94:	d016      	beq.n	8000fc4 <__udivmoddi4+0x28c>
 8000f96:	b15e      	cbz	r6, 8000fb0 <__udivmoddi4+0x278>
 8000f98:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9c:	eb64 0405 	sbc.w	r4, r4, r5
 8000fa0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000fa4:	40ca      	lsrs	r2, r1
 8000fa6:	ea4c 0202 	orr.w	r2, ip, r2
 8000faa:	40cc      	lsrs	r4, r1
 8000fac:	e9c6 2400 	strd	r2, r4, [r6]
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	4631      	mov	r1, r6
 8000fb8:	4630      	mov	r0, r6
 8000fba:	e70e      	b.n	8000dda <__udivmoddi4+0xa2>
 8000fbc:	46ac      	mov	ip, r5
 8000fbe:	e6ed      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e701      	b.n	8000dc8 <__udivmoddi4+0x90>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e6      	bcs.n	8000f96 <__udivmoddi4+0x25e>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0507 	sbc.w	r5, r9, r7
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7e0      	b.n	8000f96 <__udivmoddi4+0x25e>
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	e7d3      	b.n	8000f80 <__udivmoddi4+0x248>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78f      	b.n	8000efc <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7ba      	b.n	8000f56 <__udivmoddi4+0x21e>
 8000fe0:	4661      	mov	r1, ip
 8000fe2:	e777      	b.n	8000ed4 <__udivmoddi4+0x19c>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e74b      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	443d      	add	r5, r7
 8000fee:	e715      	b.n	8000e1c <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e726      	b.n	8000e44 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <main>:
 * Función principal del programa
 * Esta función es el corazón del programa
 */

int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	// Inicializamos todos los elementos del sistema
	initSystem();
 8001000:	f000 f940 	bl	8001284 <initSystem>

	initFrame();
 8001004:	f000 fc48 	bl	8001898 <initFrame>
		 * función "stopCapturer" para que las interrupciones se detengan, así no se mantiene realizando
		 * interrupciones infinitamente.
		 */
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		if((counterDelay % 100) == 0){
 8001008:	4b8a      	ldr	r3, [pc, #552]	; (8001234 <main+0x238>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b8a      	ldr	r3, [pc, #552]	; (8001238 <main+0x23c>)
 800100e:	fba3 1302 	umull	r1, r3, r3, r2
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2164      	movs	r1, #100	; 0x64
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <main+0x30>
			// habilitar el counter
			counterCapture = 1;
 8001020:	4b86      	ldr	r3, [pc, #536]	; (800123c <main+0x240>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]

			// Empezar la captura de frecuencia
			startCapture(&handlerCapturaFrec);
 8001026:	4886      	ldr	r0, [pc, #536]	; (8001240 <main+0x244>)
 8001028:	f001 fc02 	bl	8002830 <startCapture>
		}

		if(counterCapture != 0){
 800102c:	4b83      	ldr	r3, [pc, #524]	; (800123c <main+0x240>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d04c      	beq.n	80010ce <main+0xd2>

			// Verificación de que existe una interrupción
			if(flagHCSR04 == 1){
 8001034:	4b83      	ldr	r3, [pc, #524]	; (8001244 <main+0x248>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d147      	bne.n	80010cc <main+0xd0>

				// Aumento de counter
				counterCapture += 1;
 800103c:	4b7f      	ldr	r3, [pc, #508]	; (800123c <main+0x240>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b7d      	ldr	r3, [pc, #500]	; (800123c <main+0x240>)
 8001046:	701a      	strb	r2, [r3, #0]

				// Obtención del valor periodo (necesita dos interrupciones)
				// Para mas detaller sobre la función, leer la configuración en el driver
				rawDutty = getDutty(&handlerCapturaFrec);
 8001048:	487d      	ldr	r0, [pc, #500]	; (8001240 <main+0x244>)
 800104a:	f001 f9f5 	bl	8002438 <getDutty>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	497d      	ldr	r1, [pc, #500]	; (8001248 <main+0x24c>)
 8001054:	e9c1 2300 	strd	r2, r3, [r1]

				// Verificación de que han pasado dos interrupciones
				if(counterCapture == 3){
 8001058:	4b78      	ldr	r3, [pc, #480]	; (800123c <main+0x240>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d131      	bne.n	80010c4 <main+0xc8>

					distance_aux = ((rawDutty) / 58);
 8001060:	4b79      	ldr	r3, [pc, #484]	; (8001248 <main+0x24c>)
 8001062:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001066:	f04f 023a 	mov.w	r2, #58	; 0x3a
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	f7ff fe13 	bl	8000c98 <__aeabi_uldivmod>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4975      	ldr	r1, [pc, #468]	; (800124c <main+0x250>)
 8001078:	e9c1 2300 	strd	r2, r3, [r1]

					if(distance_aux < 400){
 800107c:	4b73      	ldr	r3, [pc, #460]	; (800124c <main+0x250>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f240 108f 	movw	r0, #399	; 0x18f
 8001086:	f04f 0100 	mov.w	r1, #0
 800108a:	4299      	cmp	r1, r3
 800108c:	bf08      	it	eq
 800108e:	4290      	cmpeq	r0, r2
 8001090:	d305      	bcc.n	800109e <main+0xa2>
						distance = distance_aux;
 8001092:	4b6e      	ldr	r3, [pc, #440]	; (800124c <main+0x250>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	496d      	ldr	r1, [pc, #436]	; (8001250 <main+0x254>)
 800109a:	e9c1 2300 	strd	r2, r3, [r1]
					}

					// Envío del dato por comunicación serial
					sprintf(bufferData, "Distance (cm) = %ld \n", (long unsigned int) distance);
 800109e:	4b6c      	ldr	r3, [pc, #432]	; (8001250 <main+0x254>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	4613      	mov	r3, r2
 80010a6:	461a      	mov	r2, r3
 80010a8:	496a      	ldr	r1, [pc, #424]	; (8001254 <main+0x258>)
 80010aa:	486b      	ldr	r0, [pc, #428]	; (8001258 <main+0x25c>)
 80010ac:	f003 f9a0 	bl	80043f0 <siprintf>
					writeMsg(&handlerCommTerminal, bufferData);
 80010b0:	4969      	ldr	r1, [pc, #420]	; (8001258 <main+0x25c>)
 80010b2:	486a      	ldr	r0, [pc, #424]	; (800125c <main+0x260>)
 80010b4:	f002 faa0 	bl	80035f8 <writeMsg>

					// reseteo del counter
					counterCapture = 0;
 80010b8:	4b60      	ldr	r3, [pc, #384]	; (800123c <main+0x240>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]

					// Detener captura de frecuencia
					stopCapture(&handlerCapturaFrec);
 80010be:	4860      	ldr	r0, [pc, #384]	; (8001240 <main+0x244>)
 80010c0:	f001 fb7c 	bl	80027bc <stopCapture>
				}

				// reseteo de la bandera que indica que hubo una interrupción
				flagHCSR04 = 0;
 80010c4:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <main+0x248>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e000      	b.n	80010ce <main+0xd2>
			}
			else{
				__NOP();
 80010cc:	bf00      	nop
			}
		}

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		if((counterDelay % 95) == 0){
 80010ce:	4b59      	ldr	r3, [pc, #356]	; (8001234 <main+0x238>)
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	4b63      	ldr	r3, [pc, #396]	; (8001260 <main+0x264>)
 80010d4:	fba3 2301 	umull	r2, r3, r3, r1
 80010d8:	1aca      	subs	r2, r1, r3
 80010da:	0852      	lsrs	r2, r2, #1
 80010dc:	4413      	add	r3, r2
 80010de:	099a      	lsrs	r2, r3, #6
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	015b      	lsls	r3, r3, #5
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	1aca      	subs	r2, r1, r3
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	d105      	bne.n	80010fc <main+0x100>
			// habilitar el counter
			counterCapture_2 = 1;
 80010f0:	4b5c      	ldr	r3, [pc, #368]	; (8001264 <main+0x268>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]

			// Empezar la captura de frecuencia
			startCapture(&handlerCapturaFrec2);
 80010f6:	485c      	ldr	r0, [pc, #368]	; (8001268 <main+0x26c>)
 80010f8:	f001 fb9a 	bl	8002830 <startCapture>
		}

		if(counterCapture_2 != 0){
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <main+0x268>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d04c      	beq.n	800119e <main+0x1a2>

			// Verificación de que existe una interrupción
			if(flagHCSR04_2 == 1){
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <main+0x270>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d147      	bne.n	800119c <main+0x1a0>

				// Aumento de counter
				counterCapture_2 += 1;
 800110c:	4b55      	ldr	r3, [pc, #340]	; (8001264 <main+0x268>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <main+0x268>)
 8001116:	701a      	strb	r2, [r3, #0]

				// Obtención del valor periodo (necesita dos interrupciones)
				// Para mas detaller sobre la función, leer la configuración en el driver
				rawDutty_2 = getDutty_2(&handlerCapturaFrec2);
 8001118:	4853      	ldr	r0, [pc, #332]	; (8001268 <main+0x26c>)
 800111a:	f001 fa89 	bl	8002630 <getDutty_2>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4953      	ldr	r1, [pc, #332]	; (8001270 <main+0x274>)
 8001124:	e9c1 2300 	strd	r2, r3, [r1]

				// Verificación de que han pasado dos interrupciones
				if(counterCapture_2 == 3){
 8001128:	4b4e      	ldr	r3, [pc, #312]	; (8001264 <main+0x268>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d131      	bne.n	8001194 <main+0x198>

					distance_aux_2 = ((rawDutty_2) / 58);
 8001130:	4b4f      	ldr	r3, [pc, #316]	; (8001270 <main+0x274>)
 8001132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001136:	f04f 023a 	mov.w	r2, #58	; 0x3a
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	f7ff fdab 	bl	8000c98 <__aeabi_uldivmod>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	494b      	ldr	r1, [pc, #300]	; (8001274 <main+0x278>)
 8001148:	e9c1 2300 	strd	r2, r3, [r1]

					if(distance_aux_2 < 400){
 800114c:	4b49      	ldr	r3, [pc, #292]	; (8001274 <main+0x278>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f240 108f 	movw	r0, #399	; 0x18f
 8001156:	f04f 0100 	mov.w	r1, #0
 800115a:	4299      	cmp	r1, r3
 800115c:	bf08      	it	eq
 800115e:	4290      	cmpeq	r0, r2
 8001160:	d305      	bcc.n	800116e <main+0x172>
						distance_2 = distance_aux_2;
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <main+0x278>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	4943      	ldr	r1, [pc, #268]	; (8001278 <main+0x27c>)
 800116a:	e9c1 2300 	strd	r2, r3, [r1]
					}

					// Envío del dato por comunicación serial
					sprintf(bufferData, "Distance_2 (cm) = %ld \n", (long unsigned int) distance_2);
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <main+0x27c>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	4613      	mov	r3, r2
 8001176:	461a      	mov	r2, r3
 8001178:	4940      	ldr	r1, [pc, #256]	; (800127c <main+0x280>)
 800117a:	4837      	ldr	r0, [pc, #220]	; (8001258 <main+0x25c>)
 800117c:	f003 f938 	bl	80043f0 <siprintf>
					writeMsg(&handlerCommTerminal, bufferData);
 8001180:	4935      	ldr	r1, [pc, #212]	; (8001258 <main+0x25c>)
 8001182:	4836      	ldr	r0, [pc, #216]	; (800125c <main+0x260>)
 8001184:	f002 fa38 	bl	80035f8 <writeMsg>

					// reseteo del counter
					counterCapture_2 = 0;
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <main+0x268>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]

					// Detener captura de frecuencia
					stopCapture(&handlerCapturaFrec2);
 800118e:	4836      	ldr	r0, [pc, #216]	; (8001268 <main+0x26c>)
 8001190:	f001 fb14 	bl	80027bc <stopCapture>
				}

				// reseteo de la bandera que indica que hubo una interrupción
				flagHCSR04_2 = 0;
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <main+0x270>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
 800119a:	e000      	b.n	800119e <main+0x1a2>
			}
			else{
				__NOP();
 800119c:	bf00      	nop
			}
		}


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		if((distance < 50) & (distance != 0)){
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <main+0x254>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bf08      	it	eq
 80011a8:	2a32      	cmpeq	r2, #50	; 0x32
 80011aa:	bf34      	ite	cc
 80011ac:	2301      	movcc	r3, #1
 80011ae:	2300      	movcs	r3, #0
 80011b0:	b2d9      	uxtb	r1, r3
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <main+0x254>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bf14      	ite	ne
 80011be:	2301      	movne	r3, #1
 80011c0:	2300      	moveq	r3, #0
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	400b      	ands	r3, r1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <main+0x1d6>

			//delay_ms(100);
			eyesLeft();
 80011cc:	f000 fb88 	bl	80018e0 <eyesLeft>
 80011d0:	e71a      	b.n	8001008 <main+0xc>

		}
		else if((distance_2 < 50) & (distance_2 != 0)){
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <main+0x27c>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf08      	it	eq
 80011dc:	2a32      	cmpeq	r2, #50	; 0x32
 80011de:	bf34      	ite	cc
 80011e0:	2301      	movcc	r3, #1
 80011e2:	2300      	movcs	r3, #0
 80011e4:	b2d9      	uxtb	r1, r3
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <main+0x27c>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bf14      	ite	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	2300      	moveq	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	400b      	ands	r3, r1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <main+0x20a>
			eyesRight();
 8001200:	f000 fb92 	bl	8001928 <eyesRight>
 8001204:	e700      	b.n	8001008 <main+0xc>
		}
		else{


			if( (counterDelay % 500) == 0){
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <main+0x238>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <main+0x284>)
 800120c:	fba3 1302 	umull	r1, r3, r3, r2
 8001210:	095b      	lsrs	r3, r3, #5
 8001212:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001216:	fb01 f303 	mul.w	r3, r1, r3
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d106      	bne.n	800122e <main+0x232>

				eyesClose();
 8001220:	f000 fba6 	bl	8001970 <eyesClose>
				delay_ms(400);
 8001224:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001228:	f000 f87c 	bl	8001324 <delay_ms>
 800122c:	e6ec      	b.n	8001008 <main+0xc>
			}
			else{
				initFrame();
 800122e:	f000 fb33 	bl	8001898 <initFrame>
		if((counterDelay % 100) == 0){
 8001232:	e6e9      	b.n	8001008 <main+0xc>
 8001234:	20000388 	.word	0x20000388
 8001238:	51eb851f 	.word	0x51eb851f
 800123c:	20000371 	.word	0x20000371
 8001240:	200002a0 	.word	0x200002a0
 8001244:	20000290 	.word	0x20000290
 8001248:	20000260 	.word	0x20000260
 800124c:	20000280 	.word	0x20000280
 8001250:	20000270 	.word	0x20000270
 8001254:	08007f08 	.word	0x08007f08
 8001258:	20000000 	.word	0x20000000
 800125c:	200002e4 	.word	0x200002e4
 8001260:	58ed2309 	.word	0x58ed2309
 8001264:	20000372 	.word	0x20000372
 8001268:	200002bc 	.word	0x200002bc
 800126c:	20000291 	.word	0x20000291
 8001270:	20000268 	.word	0x20000268
 8001274:	20000288 	.word	0x20000288
 8001278:	20000278 	.word	0x20000278
 800127c:	08007f20 	.word	0x08007f20
 8001280:	10624dd3 	.word	0x10624dd3

08001284 <initSystem>:

	}
	return 0;
}

void initSystem(void){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

	// Configuración LED de estado
	LEDState();
 8001288:	f000 f872 	bl	8001370 <LEDState>

	//Configuración PWM y Captura para HC-SR04
	HCSR04_Configuration();
 800128c:	f000 f892 	bl	80013b4 <HCSR04_Configuration>

	// Configuración de la conmunicación serial por el USART 2
	Serial_Configuration();
 8001290:	f000 f928 	bl	80014e4 <Serial_Configuration>

	// Configuración de la comunicación SPI con la matriz de LEDs
	SPI_Configuration();
 8001294:	f000 f97c 	bl	8001590 <SPI_Configuration>

	// Configuración de timer generar delays
	timerDelay_Configuration();
 8001298:	f000 fab0 	bl	80017fc <timerDelay_Configuration>

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <usart2Rx_Callback>:
//void BasicTimer2_Callback(void){
//	//GPIOxTooglePin(&handlerLedOK);
//}

// Callback comunicación serial
void usart2Rx_Callback(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	// Leemos el valor del registro DR, donde se almacena el dato que llega.
	// Esto además debe bajar la bandera de la interrupción
	rxData = getRxData();
 80012a4:	f002 f9c0 	bl	8003628 <getRxData>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b01      	ldr	r3, [pc, #4]	; (80012b4 <usart2Rx_Callback+0x14>)
 80012ae:	701a      	strb	r2, [r3, #0]
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000370 	.word	0x20000370

080012b8 <CaptureTimer4_Channel3_Callback>:

// Callback de Captura
void CaptureTimer4_Channel3_Callback(void){
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	flagHCSR04 = 1;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <CaptureTimer4_Channel3_Callback+0x14>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000290 	.word	0x20000290

080012d0 <CaptureTimer4_Channel1_Callback>:

// Callback de Captura 2
void CaptureTimer4_Channel1_Callback(void){
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	flagHCSR04_2 = 1;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <CaptureTimer4_Channel1_Callback+0x14>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000291 	.word	0x20000291

080012e8 <BasicTimer5_Callback>:

// Callback del TIM, hacemos el delay
void BasicTimer5_Callback(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	counterDelay = counterDelay + 1;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <BasicTimer5_Callback+0x30>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a09      	ldr	r2, [pc, #36]	; (8001318 <BasicTimer5_Callback+0x30>)
 80012f4:	6013      	str	r3, [r2, #0]

	if((counterDelay % 250) == 0){
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <BasicTimer5_Callback+0x30>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <BasicTimer5_Callback+0x34>)
 80012fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	21fa      	movs	r1, #250	; 0xfa
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <BasicTimer5_Callback+0x2c>
		GPIOxTooglePin(&handlerLedOK);
 800130e:	4804      	ldr	r0, [pc, #16]	; (8001320 <BasicTimer5_Callback+0x38>)
 8001310:	f001 fc1a 	bl	8002b48 <GPIOxTooglePin>
	}
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000388 	.word	0x20000388
 800131c:	10624dd3 	.word	0x10624dd3
 8001320:	20000234 	.word	0x20000234

08001324 <delay_ms>:
/*
 * Funciones de inicialización
 */


void delay_ms(uint16_t newDelayms){
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
	delayTimestamp1 = getCounterDelay();
 800132e:	f000 fa7d 	bl	800182c <getCounterDelay>
 8001332:	4603      	mov	r3, r0
 8001334:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <delay_ms+0x44>)
 8001336:	6013      	str	r3, [r2, #0]
	delayTimestamp2 = getCounterDelay();
 8001338:	f000 fa78 	bl	800182c <getCounterDelay>
 800133c:	4603      	mov	r3, r0
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <delay_ms+0x48>)
 8001340:	6013      	str	r3, [r2, #0]

	while((delayTimestamp2 - delayTimestamp1) < newDelayms){
 8001342:	e004      	b.n	800134e <delay_ms+0x2a>
		delayTimestamp2 = getCounterDelay();
 8001344:	f000 fa72 	bl	800182c <getCounterDelay>
 8001348:	4603      	mov	r3, r0
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <delay_ms+0x48>)
 800134c:	6013      	str	r3, [r2, #0]
	while((delayTimestamp2 - delayTimestamp1) < newDelayms){
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <delay_ms+0x48>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <delay_ms+0x44>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1ad2      	subs	r2, r2, r3
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3f2      	bcc.n	8001344 <delay_ms+0x20>
	}
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000038c 	.word	0x2000038c
 800136c:	20000390 	.word	0x20000390

08001370 <LEDState>:

// Congiguración del LED de estado
void LEDState(void){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	// Organizamos la configuración deseada del pin que controla el LED de la board
	handlerLedOK.pGPIOx								= GPIOA;
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <LEDState+0x3c>)
 8001376:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <LEDState+0x40>)
 8001378:	601a      	str	r2, [r3, #0]
	handlerLedOK.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <LEDState+0x3c>)
 800137c:	2205      	movs	r2, #5
 800137e:	711a      	strb	r2, [r3, #4]
	handlerLedOK.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_OUT;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <LEDState+0x3c>)
 8001382:	2201      	movs	r2, #1
 8001384:	715a      	strb	r2, [r3, #5]
	handlerLedOK.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <LEDState+0x3c>)
 8001388:	2200      	movs	r2, #0
 800138a:	721a      	strb	r2, [r3, #8]
	handlerLedOK.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <LEDState+0x3c>)
 800138e:	2200      	movs	r2, #0
 8001390:	71da      	strb	r2, [r3, #7]
	handlerLedOK.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <LEDState+0x3c>)
 8001394:	2202      	movs	r2, #2
 8001396:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerLedOK);
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <LEDState+0x3c>)
 800139a:	f001 fa83 	bl	80028a4 <GPIO_Config>
	GPIO_WritePin(&handlerLedOK, SET);
 800139e:	2101      	movs	r1, #1
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <LEDState+0x3c>)
 80013a2:	f001 fba7 	bl	8002af4 <GPIO_WritePin>

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000234 	.word	0x20000234
 80013b0:	40020000 	.word	0x40020000

080013b4 <HCSR04_Configuration>:

void HCSR04_Configuration(void){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

	/*
	 * Configuramos el PWM
	 */
	handlerPinPwmChannel.pGPIOx								= GPIOC;
 80013b8:	4b40      	ldr	r3, [pc, #256]	; (80014bc <HCSR04_Configuration+0x108>)
 80013ba:	4a41      	ldr	r2, [pc, #260]	; (80014c0 <HCSR04_Configuration+0x10c>)
 80013bc:	601a      	str	r2, [r3, #0]
	handlerPinPwmChannel.GPIO_PinConfig.GPIO_PinNumber		= PIN_7;
 80013be:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <HCSR04_Configuration+0x108>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	711a      	strb	r2, [r3, #4]
	handlerPinPwmChannel.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80013c4:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <HCSR04_Configuration+0x108>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	715a      	strb	r2, [r3, #5]
	handlerPinPwmChannel.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80013ca:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <HCSR04_Configuration+0x108>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	721a      	strb	r2, [r3, #8]
	handlerPinPwmChannel.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80013d0:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HCSR04_Configuration+0x108>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	71da      	strb	r2, [r3, #7]
	handlerPinPwmChannel.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 80013d6:	4b39      	ldr	r3, [pc, #228]	; (80014bc <HCSR04_Configuration+0x108>)
 80013d8:	2202      	movs	r2, #2
 80013da:	719a      	strb	r2, [r3, #6]
	handlerPinPwmChannel.GPIO_PinConfig.GPIO_PinAltFunMode	= AF2;
 80013dc:	4b37      	ldr	r3, [pc, #220]	; (80014bc <HCSR04_Configuration+0x108>)
 80013de:	2202      	movs	r2, #2
 80013e0:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinPwmChannel);
 80013e2:	4836      	ldr	r0, [pc, #216]	; (80014bc <HCSR04_Configuration+0x108>)
 80013e4:	f001 fa5e 	bl	80028a4 <GPIO_Config>

	/*
	 * Se configura el periferico del PWM de tal forma que counter aumente cada 1ms (ya que la lectura
	 * del periodo es en milisegundos) y pone un periodo de 200ms
	 */
	handlerSignalPWM.ptrTIMx			= TIM3;
 80013e8:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <HCSR04_Configuration+0x110>)
 80013ea:	4a37      	ldr	r2, [pc, #220]	; (80014c8 <HCSR04_Configuration+0x114>)
 80013ec:	601a      	str	r2, [r3, #0]
	handlerSignalPWM.config.channel		= PWM_CHANNEL_2;
 80013ee:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <HCSR04_Configuration+0x110>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	711a      	strb	r2, [r3, #4]
	handlerSignalPWM.config.duttyCicle	= 6;
 80013f4:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HCSR04_Configuration+0x110>)
 80013f6:	2206      	movs	r2, #6
 80013f8:	81da      	strh	r2, [r3, #14]
	handlerSignalPWM.config.periodo		= 9000;
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <HCSR04_Configuration+0x110>)
 80013fc:	f242 3228 	movw	r2, #9000	; 0x2328
 8001400:	819a      	strh	r2, [r3, #12]
	handlerSignalPWM.config.prescaler	= 160;
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HCSR04_Configuration+0x110>)
 8001404:	22a0      	movs	r2, #160	; 0xa0
 8001406:	609a      	str	r2, [r3, #8]

	pwm_Config(&handlerSignalPWM);
 8001408:	482e      	ldr	r0, [pc, #184]	; (80014c4 <HCSR04_Configuration+0x110>)
 800140a:	f001 fbb3 	bl	8002b74 <pwm_Config>
	enableOutput(&handlerSignalPWM);
 800140e:	482d      	ldr	r0, [pc, #180]	; (80014c4 <HCSR04_Configuration+0x110>)
 8001410:	f001 fcfe 	bl	8002e10 <enableOutput>
	startPwmSignal(&handlerSignalPWM);
 8001414:	482b      	ldr	r0, [pc, #172]	; (80014c4 <HCSR04_Configuration+0x110>)
 8001416:	f001 fce9 	bl	8002dec <startPwmSignal>

	// Se configura el pin de captura para el primer sensor ultrasonico
	handlerPinCapture.pGPIOx								= GPIOB;
 800141a:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <HCSR04_Configuration+0x118>)
 800141c:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <HCSR04_Configuration+0x11c>)
 800141e:	601a      	str	r2, [r3, #0]
	handlerPinCapture.GPIO_PinConfig.GPIO_PinNumber			= PIN_8;
 8001420:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <HCSR04_Configuration+0x118>)
 8001422:	2208      	movs	r2, #8
 8001424:	711a      	strb	r2, [r3, #4]
	handlerPinCapture.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HCSR04_Configuration+0x118>)
 8001428:	2202      	movs	r2, #2
 800142a:	715a      	strb	r2, [r3, #5]
	handlerPinCapture.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HCSR04_Configuration+0x118>)
 800142e:	2200      	movs	r2, #0
 8001430:	71da      	strb	r2, [r3, #7]
	handlerPinCapture.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HCSR04_Configuration+0x118>)
 8001434:	2202      	movs	r2, #2
 8001436:	719a      	strb	r2, [r3, #6]
	handlerPinCapture.GPIO_PinConfig.GPIO_PinAltFunMode		= AF2;
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HCSR04_Configuration+0x118>)
 800143a:	2202      	movs	r2, #2
 800143c:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinCapture);
 800143e:	4823      	ldr	r0, [pc, #140]	; (80014cc <HCSR04_Configuration+0x118>)
 8001440:	f001 fa30 	bl	80028a4 <GPIO_Config>

	// COnfiguracion captura para el primer sensor ultrasonico
	handlerCapturaFrec.ptrTIMx						= TIM4;
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HCSR04_Configuration+0x120>)
 8001446:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <HCSR04_Configuration+0x124>)
 8001448:	601a      	str	r2, [r3, #0]
	handlerCapturaFrec.config.channel				= CAPTURE_CHANNEL_3;
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <HCSR04_Configuration+0x120>)
 800144c:	2202      	movs	r2, #2
 800144e:	711a      	strb	r2, [r3, #4]
	handlerCapturaFrec.config.edgeSignal			= CAPTURE_RISING_EDGE;
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HCSR04_Configuration+0x120>)
 8001452:	2200      	movs	r2, #0
 8001454:	715a      	strb	r2, [r3, #5]
	handlerCapturaFrec.config.prescalerCapture		= CAPTURE_PRESCALER_1_1;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HCSR04_Configuration+0x120>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
	handlerCapturaFrec.config.timerSpeed			= CAPTURE_TIMER_SPEED_1us;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HCSR04_Configuration+0x120>)
 800145e:	2210      	movs	r2, #16
 8001460:	609a      	str	r2, [r3, #8]
	capture_Config(&handlerCapturaFrec);
 8001462:	481c      	ldr	r0, [pc, #112]	; (80014d4 <HCSR04_Configuration+0x120>)
 8001464:	f000 fddc 	bl	8002020 <capture_Config>

	// COnfiguracion captura para el segundo sensor ultrasonico
	handlerPinCapture2.pGPIOx								= GPIOB;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HCSR04_Configuration+0x128>)
 800146a:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HCSR04_Configuration+0x11c>)
 800146c:	601a      	str	r2, [r3, #0]
	handlerPinCapture2.GPIO_PinConfig.GPIO_PinNumber		= PIN_6;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HCSR04_Configuration+0x128>)
 8001470:	2206      	movs	r2, #6
 8001472:	711a      	strb	r2, [r3, #4]
	handlerPinCapture2.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HCSR04_Configuration+0x128>)
 8001476:	2202      	movs	r2, #2
 8001478:	715a      	strb	r2, [r3, #5]
	handlerPinCapture2.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HCSR04_Configuration+0x128>)
 800147c:	2200      	movs	r2, #0
 800147e:	71da      	strb	r2, [r3, #7]
	handlerPinCapture2.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_FAST;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HCSR04_Configuration+0x128>)
 8001482:	2202      	movs	r2, #2
 8001484:	719a      	strb	r2, [r3, #6]
	handlerPinCapture2.GPIO_PinConfig.GPIO_PinAltFunMode	= AF2;
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HCSR04_Configuration+0x128>)
 8001488:	2202      	movs	r2, #2
 800148a:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinCapture2);
 800148c:	4813      	ldr	r0, [pc, #76]	; (80014dc <HCSR04_Configuration+0x128>)
 800148e:	f001 fa09 	bl	80028a4 <GPIO_Config>

	// COnfiguracion captura para el primer sensor ultrasonico
	handlerCapturaFrec2.ptrTIMx						= TIM4;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HCSR04_Configuration+0x12c>)
 8001494:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HCSR04_Configuration+0x124>)
 8001496:	601a      	str	r2, [r3, #0]
	handlerCapturaFrec2.config.channel				= CAPTURE_CHANNEL_1;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HCSR04_Configuration+0x12c>)
 800149a:	2200      	movs	r2, #0
 800149c:	711a      	strb	r2, [r3, #4]
	handlerCapturaFrec2.config.edgeSignal			= CAPTURE_RISING_EDGE;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HCSR04_Configuration+0x12c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	715a      	strb	r2, [r3, #5]
	handlerCapturaFrec2.config.prescalerCapture		= CAPTURE_PRESCALER_1_1;
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HCSR04_Configuration+0x12c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
	handlerCapturaFrec2.config.timerSpeed			= CAPTURE_TIMER_SPEED_1us;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HCSR04_Configuration+0x12c>)
 80014ac:	2210      	movs	r2, #16
 80014ae:	609a      	str	r2, [r3, #8]
	capture_Config(&handlerCapturaFrec2);
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <HCSR04_Configuration+0x12c>)
 80014b2:	f000 fdb5 	bl	8002020 <capture_Config>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000240 	.word	0x20000240
 80014c0:	40020800 	.word	0x40020800
 80014c4:	2000024c 	.word	0x2000024c
 80014c8:	40000400 	.word	0x40000400
 80014cc:	20000294 	.word	0x20000294
 80014d0:	40020400 	.word	0x40020400
 80014d4:	200002a0 	.word	0x200002a0
 80014d8:	40000800 	.word	0x40000800
 80014dc:	200002b0 	.word	0x200002b0
 80014e0:	200002bc 	.word	0x200002bc

080014e4 <Serial_Configuration>:

void Serial_Configuration(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

	/*
	 * Configurando los pines sobre los que funciona el USART
	 */
	handlerPinTX.pGPIOx								= GPIOA;
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <Serial_Configuration+0x98>)
 80014ea:	4a25      	ldr	r2, [pc, #148]	; (8001580 <Serial_Configuration+0x9c>)
 80014ec:	601a      	str	r2, [r3, #0]
	handlerPinTX.GPIO_PinConfig.GPIO_PinNumber		= PIN_2;
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <Serial_Configuration+0x98>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	711a      	strb	r2, [r3, #4]
	handlerPinTX.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <Serial_Configuration+0x98>)
 80014f6:	2202      	movs	r2, #2
 80014f8:	715a      	strb	r2, [r3, #5]
	handlerPinTX.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <Serial_Configuration+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	721a      	strb	r2, [r3, #8]
	handlerPinTX.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <Serial_Configuration+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	71da      	strb	r2, [r3, #7]
	handlerPinTX.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <Serial_Configuration+0x98>)
 8001508:	2202      	movs	r2, #2
 800150a:	719a      	strb	r2, [r3, #6]
	handlerPinTX.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <Serial_Configuration+0x98>)
 800150e:	2207      	movs	r2, #7
 8001510:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinTX);
 8001512:	481a      	ldr	r0, [pc, #104]	; (800157c <Serial_Configuration+0x98>)
 8001514:	f001 f9c6 	bl	80028a4 <GPIO_Config>

	handlerPinRX.pGPIOx								= GPIOA;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <Serial_Configuration+0xa0>)
 800151a:	4a19      	ldr	r2, [pc, #100]	; (8001580 <Serial_Configuration+0x9c>)
 800151c:	601a      	str	r2, [r3, #0]
	handlerPinRX.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <Serial_Configuration+0xa0>)
 8001520:	2203      	movs	r2, #3
 8001522:	711a      	strb	r2, [r3, #4]
	handlerPinRX.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_ALTFN;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <Serial_Configuration+0xa0>)
 8001526:	2202      	movs	r2, #2
 8001528:	715a      	strb	r2, [r3, #5]
	handlerPinRX.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <Serial_Configuration+0xa0>)
 800152c:	2200      	movs	r2, #0
 800152e:	721a      	strb	r2, [r3, #8]
	handlerPinRX.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <Serial_Configuration+0xa0>)
 8001532:	2200      	movs	r2, #0
 8001534:	71da      	strb	r2, [r3, #7]
	handlerPinRX.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_FAST;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <Serial_Configuration+0xa0>)
 8001538:	2202      	movs	r2, #2
 800153a:	719a      	strb	r2, [r3, #6]
	handlerPinRX.GPIO_PinConfig.GPIO_PinAltFunMode	= AF7;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <Serial_Configuration+0xa0>)
 800153e:	2207      	movs	r2, #7
 8001540:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerPinRX);
 8001542:	4810      	ldr	r0, [pc, #64]	; (8001584 <Serial_Configuration+0xa0>)
 8001544:	f001 f9ae 	bl	80028a4 <GPIO_Config>

	/*
	 * Configuramos la comunicacion serial
	 */
	handlerCommTerminal.ptrUSARTx						= USART2;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <Serial_Configuration+0xa4>)
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <Serial_Configuration+0xa8>)
 800154c:	601a      	str	r2, [r3, #0]
	handlerCommTerminal.USART_Config.USART_datasize		= USART_DATASIZE_8BIT;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <Serial_Configuration+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	719a      	strb	r2, [r3, #6]
	handlerCommTerminal.USART_Config.USART_parity		= USART_PARITY_ODD;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <Serial_Configuration+0xa4>)
 8001556:	2201      	movs	r2, #1
 8001558:	71da      	strb	r2, [r3, #7]
	handlerCommTerminal.USART_Config.USART_stopbits 	= USART_STOPBIT_1;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <Serial_Configuration+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	721a      	strb	r2, [r3, #8]
	handlerCommTerminal.USART_Config.USART_baudrate		= USART_BAUDRATE_115200;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <Serial_Configuration+0xa4>)
 8001562:	2203      	movs	r2, #3
 8001564:	715a      	strb	r2, [r3, #5]
	handlerCommTerminal.USART_Config.USART_mode			= USART_MODE_RXTX;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <Serial_Configuration+0xa4>)
 8001568:	2202      	movs	r2, #2
 800156a:	711a      	strb	r2, [r3, #4]
	handlerCommTerminal.USART_Config.USART_enableIntRX	= USART_RX_INTERRUP_ENABLE;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <Serial_Configuration+0xa4>)
 800156e:	2201      	movs	r2, #1
 8001570:	725a      	strb	r2, [r3, #9]
	USART_Config(&handlerCommTerminal);
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <Serial_Configuration+0xa4>)
 8001574:	f001 fe36 	bl	80031e4 <USART_Config>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200002cc 	.word	0x200002cc
 8001580:	40020000 	.word	0x40020000
 8001584:	200002d8 	.word	0x200002d8
 8001588:	200002e4 	.word	0x200002e4
 800158c:	40004400 	.word	0x40004400

08001590 <SPI_Configuration>:

void SPI_Configuration(void){
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b08b      	sub	sp, #44	; 0x2c
 8001594:	af04      	add	r7, sp, #16
	/*
	 * Configuración pines SPI
	 */

	// Clock configuration
	handlerSpiSCLK.pGPIOx								= GPIOB;
 8001596:	4b91      	ldr	r3, [pc, #580]	; (80017dc <SPI_Configuration+0x24c>)
 8001598:	4a91      	ldr	r2, [pc, #580]	; (80017e0 <SPI_Configuration+0x250>)
 800159a:	601a      	str	r2, [r3, #0]
	handlerSpiSCLK.GPIO_PinConfig.GPIO_PinNumber		= PIN_3;
 800159c:	4b8f      	ldr	r3, [pc, #572]	; (80017dc <SPI_Configuration+0x24c>)
 800159e:	2203      	movs	r2, #3
 80015a0:	711a      	strb	r2, [r3, #4]
	handlerSpiSCLK.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80015a2:	4b8e      	ldr	r3, [pc, #568]	; (80017dc <SPI_Configuration+0x24c>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	715a      	strb	r2, [r3, #5]
	handlerSpiSCLK.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80015a8:	4b8c      	ldr	r3, [pc, #560]	; (80017dc <SPI_Configuration+0x24c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	721a      	strb	r2, [r3, #8]
	handlerSpiSCLK.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80015ae:	4b8b      	ldr	r3, [pc, #556]	; (80017dc <SPI_Configuration+0x24c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	71da      	strb	r2, [r3, #7]
	handlerSpiSCLK.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 80015b4:	4b89      	ldr	r3, [pc, #548]	; (80017dc <SPI_Configuration+0x24c>)
 80015b6:	2203      	movs	r2, #3
 80015b8:	719a      	strb	r2, [r3, #6]
	handlerSpiSCLK.GPIO_PinConfig.GPIO_PinAltFunMode	= AF5;
 80015ba:	4b88      	ldr	r3, [pc, #544]	; (80017dc <SPI_Configuration+0x24c>)
 80015bc:	2205      	movs	r2, #5
 80015be:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerSpiSCLK);
 80015c0:	4886      	ldr	r0, [pc, #536]	; (80017dc <SPI_Configuration+0x24c>)
 80015c2:	f001 f96f 	bl	80028a4 <GPIO_Config>

	// MISO configuration
	handlerSpiMISO.pGPIOx								= GPIOB;
 80015c6:	4b87      	ldr	r3, [pc, #540]	; (80017e4 <SPI_Configuration+0x254>)
 80015c8:	4a85      	ldr	r2, [pc, #532]	; (80017e0 <SPI_Configuration+0x250>)
 80015ca:	601a      	str	r2, [r3, #0]
	handlerSpiMISO.GPIO_PinConfig.GPIO_PinNumber		= PIN_4;
 80015cc:	4b85      	ldr	r3, [pc, #532]	; (80017e4 <SPI_Configuration+0x254>)
 80015ce:	2204      	movs	r2, #4
 80015d0:	711a      	strb	r2, [r3, #4]
	handlerSpiMISO.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 80015d2:	4b84      	ldr	r3, [pc, #528]	; (80017e4 <SPI_Configuration+0x254>)
 80015d4:	2202      	movs	r2, #2
 80015d6:	715a      	strb	r2, [r3, #5]
	handlerSpiMISO.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 80015d8:	4b82      	ldr	r3, [pc, #520]	; (80017e4 <SPI_Configuration+0x254>)
 80015da:	2200      	movs	r2, #0
 80015dc:	721a      	strb	r2, [r3, #8]
	handlerSpiMISO.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 80015de:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <SPI_Configuration+0x254>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	71da      	strb	r2, [r3, #7]
	handlerSpiMISO.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 80015e4:	4b7f      	ldr	r3, [pc, #508]	; (80017e4 <SPI_Configuration+0x254>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	719a      	strb	r2, [r3, #6]
	handlerSpiMISO.GPIO_PinConfig.GPIO_PinAltFunMode	= AF5;
 80015ea:	4b7e      	ldr	r3, [pc, #504]	; (80017e4 <SPI_Configuration+0x254>)
 80015ec:	2205      	movs	r2, #5
 80015ee:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerSpiMISO);
 80015f0:	487c      	ldr	r0, [pc, #496]	; (80017e4 <SPI_Configuration+0x254>)
 80015f2:	f001 f957 	bl	80028a4 <GPIO_Config>

	// MOSI configuration
	handlerSpiMOSI.pGPIOx								= GPIOB;
 80015f6:	4b7c      	ldr	r3, [pc, #496]	; (80017e8 <SPI_Configuration+0x258>)
 80015f8:	4a79      	ldr	r2, [pc, #484]	; (80017e0 <SPI_Configuration+0x250>)
 80015fa:	601a      	str	r2, [r3, #0]
	handlerSpiMOSI.GPIO_PinConfig.GPIO_PinNumber		= PIN_5;
 80015fc:	4b7a      	ldr	r3, [pc, #488]	; (80017e8 <SPI_Configuration+0x258>)
 80015fe:	2205      	movs	r2, #5
 8001600:	711a      	strb	r2, [r3, #4]
	handlerSpiMOSI.GPIO_PinConfig.GPIO_PinMode			= GPIO_MODE_ALTFN;
 8001602:	4b79      	ldr	r3, [pc, #484]	; (80017e8 <SPI_Configuration+0x258>)
 8001604:	2202      	movs	r2, #2
 8001606:	715a      	strb	r2, [r3, #5]
	handlerSpiMOSI.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8001608:	4b77      	ldr	r3, [pc, #476]	; (80017e8 <SPI_Configuration+0x258>)
 800160a:	2200      	movs	r2, #0
 800160c:	721a      	strb	r2, [r3, #8]
	handlerSpiMOSI.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800160e:	4b76      	ldr	r3, [pc, #472]	; (80017e8 <SPI_Configuration+0x258>)
 8001610:	2200      	movs	r2, #0
 8001612:	71da      	strb	r2, [r3, #7]
	handlerSpiMOSI.GPIO_PinConfig.GPIO_PinSpeed			= GPIO_OSPEED_HIGH;
 8001614:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <SPI_Configuration+0x258>)
 8001616:	2203      	movs	r2, #3
 8001618:	719a      	strb	r2, [r3, #6]
	handlerSpiMOSI.GPIO_PinConfig.GPIO_PinAltFunMode	= AF5;
 800161a:	4b73      	ldr	r3, [pc, #460]	; (80017e8 <SPI_Configuration+0x258>)
 800161c:	2205      	movs	r2, #5
 800161e:	725a      	strb	r2, [r3, #9]
	GPIO_Config(&handlerSpiMOSI);
 8001620:	4871      	ldr	r0, [pc, #452]	; (80017e8 <SPI_Configuration+0x258>)
 8001622:	f001 f93f 	bl	80028a4 <GPIO_Config>

	// Slave Select configuration
	handlerSpiSS.pGPIOx								= GPIOA;
 8001626:	4b71      	ldr	r3, [pc, #452]	; (80017ec <SPI_Configuration+0x25c>)
 8001628:	4a71      	ldr	r2, [pc, #452]	; (80017f0 <SPI_Configuration+0x260>)
 800162a:	601a      	str	r2, [r3, #0]
	handlerSpiSS.GPIO_PinConfig.GPIO_PinNumber		= PIN_9;
 800162c:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <SPI_Configuration+0x25c>)
 800162e:	2209      	movs	r2, #9
 8001630:	711a      	strb	r2, [r3, #4]
	handlerSpiSS.GPIO_PinConfig.GPIO_PinMode		= GPIO_MODE_OUT;
 8001632:	4b6e      	ldr	r3, [pc, #440]	; (80017ec <SPI_Configuration+0x25c>)
 8001634:	2201      	movs	r2, #1
 8001636:	715a      	strb	r2, [r3, #5]
	handlerSpiSS.GPIO_PinConfig.GPIO_PinOPType		= GPIO_OTYPE_PUSHPULL;
 8001638:	4b6c      	ldr	r3, [pc, #432]	; (80017ec <SPI_Configuration+0x25c>)
 800163a:	2200      	movs	r2, #0
 800163c:	721a      	strb	r2, [r3, #8]
	handlerSpiSS.GPIO_PinConfig.GPIO_PinPuPdControl	= GPIO_PUPDR_NOTHING;
 800163e:	4b6b      	ldr	r3, [pc, #428]	; (80017ec <SPI_Configuration+0x25c>)
 8001640:	2200      	movs	r2, #0
 8001642:	71da      	strb	r2, [r3, #7]
	handlerSpiSS.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_OSPEED_HIGH;
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <SPI_Configuration+0x25c>)
 8001646:	2203      	movs	r2, #3
 8001648:	719a      	strb	r2, [r3, #6]
	GPIO_Config(&handlerSpiSS);
 800164a:	4868      	ldr	r0, [pc, #416]	; (80017ec <SPI_Configuration+0x25c>)
 800164c:	f001 f92a 	bl	80028a4 <GPIO_Config>

	// handler SPI configuration
	handlerSpiPort.ptrSPIx								= SPI1;
 8001650:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <SPI_Configuration+0x264>)
 8001652:	4a69      	ldr	r2, [pc, #420]	; (80017f8 <SPI_Configuration+0x268>)
 8001654:	601a      	str	r2, [r3, #0]
	handlerSpiPort.SPI_Config.SPI_mode					= SPI_MODE_0;
 8001656:	4b67      	ldr	r3, [pc, #412]	; (80017f4 <SPI_Configuration+0x264>)
 8001658:	2200      	movs	r2, #0
 800165a:	711a      	strb	r2, [r3, #4]
	handlerSpiPort.SPI_Config.SPI_fullDupplexEnable		= SPI_FULL_DUPPLEX;
 800165c:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <SPI_Configuration+0x264>)
 800165e:	2201      	movs	r2, #1
 8001660:	719a      	strb	r2, [r3, #6]
	handlerSpiPort.SPI_Config.SPI_datasize				= SPI_DATASIZE_8_BIT;
 8001662:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <SPI_Configuration+0x264>)
 8001664:	2200      	movs	r2, #0
 8001666:	71da      	strb	r2, [r3, #7]
	handlerSpiPort.SPI_Config.SPI_baudrate				= SPI_BAUDRATE_FPCLK_16; // 1MHz
 8001668:	4b62      	ldr	r3, [pc, #392]	; (80017f4 <SPI_Configuration+0x264>)
 800166a:	2203      	movs	r2, #3
 800166c:	715a      	strb	r2, [r3, #5]
	handlerSpiPort.SPI_slavePin							= handlerSpiSS;
 800166e:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <SPI_Configuration+0x264>)
 8001670:	4a5e      	ldr	r2, [pc, #376]	; (80017ec <SPI_Configuration+0x25c>)
 8001672:	330c      	adds	r3, #12
 8001674:	ca07      	ldmia	r2, {r0, r1, r2}
 8001676:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	spi_config(handlerSpiPort);
 800167a:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <SPI_Configuration+0x264>)
 800167c:	466c      	mov	r4, sp
 800167e:	f103 0210 	add.w	r2, r3, #16
 8001682:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001686:	e884 0003 	stmia.w	r4, {r0, r1}
 800168a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168c:	f001 fc4c 	bl	8002f28 <spi_config>

	//++++++++++++++++++++++++++++++++++++

	uint8_t deCode[2];

	deCode[0] = (0x09);
 8001690:	2309      	movs	r3, #9
 8001692:	753b      	strb	r3, [r7, #20]
	deCode[1] = (0x00);
 8001694:	2300      	movs	r3, #0
 8001696:	757b      	strb	r3, [r7, #21]

	// Activamos el esclavo
	spi_selectSlave(&handlerSpiPort);
 8001698:	4856      	ldr	r0, [pc, #344]	; (80017f4 <SPI_Configuration+0x264>)
 800169a:	f001 fd6a 	bl	8003172 <spi_selectSlave>

	spi_transmit(handlerSpiPort, deCode, 2);
 800169e:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <SPI_Configuration+0x264>)
 80016a0:	2202      	movs	r2, #2
 80016a2:	9203      	str	r2, [sp, #12]
 80016a4:	f107 0214 	add.w	r2, r7, #20
 80016a8:	9202      	str	r2, [sp, #8]
 80016aa:	466c      	mov	r4, sp
 80016ac:	f103 0210 	add.w	r2, r3, #16
 80016b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80016b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ba:	f001 fd21 	bl	8003100 <spi_transmit>

	// Desactivamos el esclavo
	spi_unSelectSlave(&handlerSpiPort);
 80016be:	484d      	ldr	r0, [pc, #308]	; (80017f4 <SPI_Configuration+0x264>)
 80016c0:	f001 fd65 	bl	800318e <spi_unSelectSlave>

	//+++++++++++++++++++++++++++++++++++++++

	uint8_t deScanlimit[2];

	deScanlimit[0] = (0x0B);
 80016c4:	230b      	movs	r3, #11
 80016c6:	743b      	strb	r3, [r7, #16]
	deScanlimit[1] = (0x07);
 80016c8:	2307      	movs	r3, #7
 80016ca:	747b      	strb	r3, [r7, #17]

	// Activamos el esclavo
	spi_selectSlave(&handlerSpiPort);
 80016cc:	4849      	ldr	r0, [pc, #292]	; (80017f4 <SPI_Configuration+0x264>)
 80016ce:	f001 fd50 	bl	8003172 <spi_selectSlave>

	spi_transmit(handlerSpiPort, deScanlimit, 2);
 80016d2:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <SPI_Configuration+0x264>)
 80016d4:	2202      	movs	r2, #2
 80016d6:	9203      	str	r2, [sp, #12]
 80016d8:	f107 0210 	add.w	r2, r7, #16
 80016dc:	9202      	str	r2, [sp, #8]
 80016de:	466c      	mov	r4, sp
 80016e0:	f103 0210 	add.w	r2, r3, #16
 80016e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80016ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ee:	f001 fd07 	bl	8003100 <spi_transmit>

	// Desactivamos el esclavo
	spi_unSelectSlave(&handlerSpiPort);
 80016f2:	4840      	ldr	r0, [pc, #256]	; (80017f4 <SPI_Configuration+0x264>)
 80016f4:	f001 fd4b 	bl	800318e <spi_unSelectSlave>

	//+++++++++++++++++++++++++++++++++++++++

	uint8_t shutdown[2];

	shutdown[0] = (0x0C);
 80016f8:	230c      	movs	r3, #12
 80016fa:	733b      	strb	r3, [r7, #12]
	shutdown[1] = (0x01);
 80016fc:	2301      	movs	r3, #1
 80016fe:	737b      	strb	r3, [r7, #13]

	// Activamos el esclavo
	spi_selectSlave(&handlerSpiPort);
 8001700:	483c      	ldr	r0, [pc, #240]	; (80017f4 <SPI_Configuration+0x264>)
 8001702:	f001 fd36 	bl	8003172 <spi_selectSlave>

	spi_transmit(handlerSpiPort, shutdown, 2);
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <SPI_Configuration+0x264>)
 8001708:	2202      	movs	r2, #2
 800170a:	9203      	str	r2, [sp, #12]
 800170c:	f107 020c 	add.w	r2, r7, #12
 8001710:	9202      	str	r2, [sp, #8]
 8001712:	466c      	mov	r4, sp
 8001714:	f103 0210 	add.w	r2, r3, #16
 8001718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001722:	f001 fced 	bl	8003100 <spi_transmit>

	// Desactivamos el esclavo
	spi_unSelectSlave(&handlerSpiPort);
 8001726:	4833      	ldr	r0, [pc, #204]	; (80017f4 <SPI_Configuration+0x264>)
 8001728:	f001 fd31 	bl	800318e <spi_unSelectSlave>

	//+++++++++++++++++++++++++++++++++++++++

	uint8_t test[2];

	test[0] = (0x0F);
 800172c:	230f      	movs	r3, #15
 800172e:	723b      	strb	r3, [r7, #8]
	test[1] = (0x00);
 8001730:	2300      	movs	r3, #0
 8001732:	727b      	strb	r3, [r7, #9]

	// Activamos el esclavo
	spi_selectSlave(&handlerSpiPort);
 8001734:	482f      	ldr	r0, [pc, #188]	; (80017f4 <SPI_Configuration+0x264>)
 8001736:	f001 fd1c 	bl	8003172 <spi_selectSlave>

	spi_transmit(handlerSpiPort, test, 2);
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <SPI_Configuration+0x264>)
 800173c:	2202      	movs	r2, #2
 800173e:	9203      	str	r2, [sp, #12]
 8001740:	f107 0208 	add.w	r2, r7, #8
 8001744:	9202      	str	r2, [sp, #8]
 8001746:	466c      	mov	r4, sp
 8001748:	f103 0210 	add.w	r2, r3, #16
 800174c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001750:	e884 0003 	stmia.w	r4, {r0, r1}
 8001754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001756:	f001 fcd3 	bl	8003100 <spi_transmit>

	// Desactivamos el esclavo
	spi_unSelectSlave(&handlerSpiPort);
 800175a:	4826      	ldr	r0, [pc, #152]	; (80017f4 <SPI_Configuration+0x264>)
 800175c:	f001 fd17 	bl	800318e <spi_unSelectSlave>

	//+++++++++++++++++++++++++++++++++++++++

	uint8_t intensity[2];

	intensity[0] = (0x0A);
 8001760:	230a      	movs	r3, #10
 8001762:	713b      	strb	r3, [r7, #4]
	intensity[1] = (0x04);
 8001764:	2304      	movs	r3, #4
 8001766:	717b      	strb	r3, [r7, #5]

	// Activamos el esclavo
	spi_selectSlave(&handlerSpiPort);
 8001768:	4822      	ldr	r0, [pc, #136]	; (80017f4 <SPI_Configuration+0x264>)
 800176a:	f001 fd02 	bl	8003172 <spi_selectSlave>

	spi_transmit(handlerSpiPort, intensity, 2);
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <SPI_Configuration+0x264>)
 8001770:	2202      	movs	r2, #2
 8001772:	9203      	str	r2, [sp, #12]
 8001774:	1d3a      	adds	r2, r7, #4
 8001776:	9202      	str	r2, [sp, #8]
 8001778:	466c      	mov	r4, sp
 800177a:	f103 0210 	add.w	r2, r3, #16
 800177e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001782:	e884 0003 	stmia.w	r4, {r0, r1}
 8001786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001788:	f001 fcba 	bl	8003100 <spi_transmit>

	// Desactivamos el esclavo
	spi_unSelectSlave(&handlerSpiPort);
 800178c:	4819      	ldr	r0, [pc, #100]	; (80017f4 <SPI_Configuration+0x264>)
 800178e:	f001 fcfe 	bl	800318e <spi_unSelectSlave>

	//+++++++++++++++++++++++++++++++++++++++

	MatrixLed_writeData(0x01, 0b00000000);
 8001792:	2100      	movs	r1, #0
 8001794:	2001      	movs	r0, #1
 8001796:	f000 f853 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x02, 0b00000000);
 800179a:	2100      	movs	r1, #0
 800179c:	2002      	movs	r0, #2
 800179e:	f000 f84f 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x03, 0b00000000);
 80017a2:	2100      	movs	r1, #0
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f84b 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x04, 0b00000000);
 80017aa:	2100      	movs	r1, #0
 80017ac:	2004      	movs	r0, #4
 80017ae:	f000 f847 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x05, 0b00000000);
 80017b2:	2100      	movs	r1, #0
 80017b4:	2005      	movs	r0, #5
 80017b6:	f000 f843 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x06, 0b00000000);
 80017ba:	2100      	movs	r1, #0
 80017bc:	2006      	movs	r0, #6
 80017be:	f000 f83f 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x07, 0b00000000);
 80017c2:	2100      	movs	r1, #0
 80017c4:	2007      	movs	r0, #7
 80017c6:	f000 f83b 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x08, 0b00000000);
 80017ca:	2100      	movs	r1, #0
 80017cc:	2008      	movs	r0, #8
 80017ce:	f000 f837 	bl	8001840 <MatrixLed_writeData>


}
 80017d2:	bf00      	nop
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd90      	pop	{r4, r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000394 	.word	0x20000394
 80017e0:	40020400 	.word	0x40020400
 80017e4:	200003a0 	.word	0x200003a0
 80017e8:	200003ac 	.word	0x200003ac
 80017ec:	200003b8 	.word	0x200003b8
 80017f0:	40020000 	.word	0x40020000
 80017f4:	200003c4 	.word	0x200003c4
 80017f8:	40013000 	.word	0x40013000

080017fc <timerDelay_Configuration>:

void timerDelay_Configuration(void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

	/*
	 * Configuramos el timer
	 */
	handlerDelay.ptrTIMx							= TIM5;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <timerDelay_Configuration+0x28>)
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <timerDelay_Configuration+0x2c>)
 8001804:	601a      	str	r2, [r3, #0]
	handlerDelay.TIMx_Config.TIMx_mode				= BTIMER_MODE_UP;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <timerDelay_Configuration+0x28>)
 8001808:	2200      	movs	r2, #0
 800180a:	711a      	strb	r2, [r3, #4]
	handlerDelay.TIMx_Config.TIMx_speed				= BTIMER_SPEED_10us;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <timerDelay_Configuration+0x28>)
 800180e:	22a0      	movs	r2, #160	; 0xa0
 8001810:	609a      	str	r2, [r3, #8]
	handlerDelay.TIMx_Config.TIMx_period			= 100;
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <timerDelay_Configuration+0x28>)
 8001814:	2264      	movs	r2, #100	; 0x64
 8001816:	60da      	str	r2, [r3, #12]
	BasicTimer_Config(&handlerDelay);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <timerDelay_Configuration+0x28>)
 800181a:	f000 f9d3 	bl	8001bc4 <BasicTimer_Config>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000374 	.word	0x20000374
 8001828:	40000c00 	.word	0x40000c00

0800182c <getCounterDelay>:

uint32_t getCounterDelay(void){
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

	return counterDelay;
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <getCounterDelay+0x10>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20000388 	.word	0x20000388

08001840 <MatrixLed_writeData>:
/*
 * Funciones varias
 */

// Función para escribir valores en la matriz de LEDs a través de SPI
void MatrixLed_writeData(uint8_t digit, uint8_t seg){
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af04      	add	r7, sp, #16
 8001846:	4603      	mov	r3, r0
 8001848:	460a      	mov	r2, r1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	4613      	mov	r3, r2
 800184e:	71bb      	strb	r3, [r7, #6]

	uint8_t data[2];

	// Columna de la matriz que deseamos seleccionar
	data[0] = (digit & 0xF);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	b2db      	uxtb	r3, r3
 8001858:	733b      	strb	r3, [r7, #12]

	// Fila de la matriz que deseamos seleccionar
	data[1] = seg;
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	737b      	strb	r3, [r7, #13]

	// Activamos el esclavo
	spi_selectSlave(&handlerSpiPort);
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <MatrixLed_writeData+0x54>)
 8001860:	f001 fc87 	bl	8003172 <spi_selectSlave>

	// Enviamos los datos
	spi_transmit(handlerSpiPort, data, 2);
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <MatrixLed_writeData+0x54>)
 8001866:	2202      	movs	r2, #2
 8001868:	9203      	str	r2, [sp, #12]
 800186a:	f107 020c 	add.w	r2, r7, #12
 800186e:	9202      	str	r2, [sp, #8]
 8001870:	466c      	mov	r4, sp
 8001872:	f103 0210 	add.w	r2, r3, #16
 8001876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187a:	e884 0003 	stmia.w	r4, {r0, r1}
 800187e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001880:	f001 fc3e 	bl	8003100 <spi_transmit>


	// Desactivamos el esclavo
	spi_unSelectSlave(&handlerSpiPort);
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <MatrixLed_writeData+0x54>)
 8001886:	f001 fc82 	bl	800318e <spi_unSelectSlave>
};
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	bf00      	nop
 8001894:	200003c4 	.word	0x200003c4

08001898 <initFrame>:

void initFrame(void){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	MatrixLed_writeData(0x01, 0b00011100);
 800189c:	211c      	movs	r1, #28
 800189e:	2001      	movs	r0, #1
 80018a0:	f7ff ffce 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x02, 0b01100010);
 80018a4:	2162      	movs	r1, #98	; 0x62
 80018a6:	2002      	movs	r0, #2
 80018a8:	f7ff ffca 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x03, 0b10011001);
 80018ac:	2199      	movs	r1, #153	; 0x99
 80018ae:	2003      	movs	r0, #3
 80018b0:	f7ff ffc6 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x04, 0b10110101);
 80018b4:	21b5      	movs	r1, #181	; 0xb5
 80018b6:	2004      	movs	r0, #4
 80018b8:	f7ff ffc2 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x05, 0b10111101);
 80018bc:	21bd      	movs	r1, #189	; 0xbd
 80018be:	2005      	movs	r0, #5
 80018c0:	f7ff ffbe 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x06, 0b10011001);
 80018c4:	2199      	movs	r1, #153	; 0x99
 80018c6:	2006      	movs	r0, #6
 80018c8:	f7ff ffba 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x07, 0b01100010);
 80018cc:	2162      	movs	r1, #98	; 0x62
 80018ce:	2007      	movs	r0, #7
 80018d0:	f7ff ffb6 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x08, 0b00011100);
 80018d4:	211c      	movs	r1, #28
 80018d6:	2008      	movs	r0, #8
 80018d8:	f7ff ffb2 	bl	8001840 <MatrixLed_writeData>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <eyesLeft>:

void eyesLeft(void){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	MatrixLed_writeData(0x01, 0b00011100);
 80018e4:	211c      	movs	r1, #28
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff ffaa 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x02, 0b01100010);
 80018ec:	2162      	movs	r1, #98	; 0x62
 80018ee:	2002      	movs	r0, #2
 80018f0:	f7ff ffa6 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x03, 0b10000001);
 80018f4:	2181      	movs	r1, #129	; 0x81
 80018f6:	2003      	movs	r0, #3
 80018f8:	f7ff ffa2 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x04, 0b10011001);
 80018fc:	2199      	movs	r1, #153	; 0x99
 80018fe:	2004      	movs	r0, #4
 8001900:	f7ff ff9e 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x05, 0b10110101);
 8001904:	21b5      	movs	r1, #181	; 0xb5
 8001906:	2005      	movs	r0, #5
 8001908:	f7ff ff9a 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x06, 0b10111101);
 800190c:	21bd      	movs	r1, #189	; 0xbd
 800190e:	2006      	movs	r0, #6
 8001910:	f7ff ff96 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x07, 0b01111010);
 8001914:	217a      	movs	r1, #122	; 0x7a
 8001916:	2007      	movs	r0, #7
 8001918:	f7ff ff92 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x08, 0b00011100);
 800191c:	211c      	movs	r1, #28
 800191e:	2008      	movs	r0, #8
 8001920:	f7ff ff8e 	bl	8001840 <MatrixLed_writeData>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <eyesRight>:

void eyesRight(void){
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	MatrixLed_writeData(0x01, 0b00011100);
 800192c:	211c      	movs	r1, #28
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff ff86 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x02, 0b01111010);
 8001934:	217a      	movs	r1, #122	; 0x7a
 8001936:	2002      	movs	r0, #2
 8001938:	f7ff ff82 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x03, 0b10110101);
 800193c:	21b5      	movs	r1, #181	; 0xb5
 800193e:	2003      	movs	r0, #3
 8001940:	f7ff ff7e 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x04, 0b10111101);
 8001944:	21bd      	movs	r1, #189	; 0xbd
 8001946:	2004      	movs	r0, #4
 8001948:	f7ff ff7a 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x05, 0b10011001);
 800194c:	2199      	movs	r1, #153	; 0x99
 800194e:	2005      	movs	r0, #5
 8001950:	f7ff ff76 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x06, 0b10000001);
 8001954:	2181      	movs	r1, #129	; 0x81
 8001956:	2006      	movs	r0, #6
 8001958:	f7ff ff72 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x07, 0b01100010);
 800195c:	2162      	movs	r1, #98	; 0x62
 800195e:	2007      	movs	r0, #7
 8001960:	f7ff ff6e 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x08, 0b00011100);
 8001964:	211c      	movs	r1, #28
 8001966:	2008      	movs	r0, #8
 8001968:	f7ff ff6a 	bl	8001840 <MatrixLed_writeData>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <eyesClose>:

void eyesClose(void){
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	MatrixLed_writeData(0x01, 0b00010000);
 8001974:	2110      	movs	r1, #16
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff ff62 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x02, 0b00010000);
 800197c:	2110      	movs	r1, #16
 800197e:	2002      	movs	r0, #2
 8001980:	f7ff ff5e 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x03, 0b00010000);
 8001984:	2110      	movs	r1, #16
 8001986:	2003      	movs	r0, #3
 8001988:	f7ff ff5a 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x04, 0b00010000);
 800198c:	2110      	movs	r1, #16
 800198e:	2004      	movs	r0, #4
 8001990:	f7ff ff56 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x05, 0b00010000);
 8001994:	2110      	movs	r1, #16
 8001996:	2005      	movs	r0, #5
 8001998:	f7ff ff52 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x06, 0b00010000);
 800199c:	2110      	movs	r1, #16
 800199e:	2006      	movs	r0, #6
 80019a0:	f7ff ff4e 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x07, 0b00010000);
 80019a4:	2110      	movs	r1, #16
 80019a6:	2007      	movs	r0, #7
 80019a8:	f7ff ff4a 	bl	8001840 <MatrixLed_writeData>
	MatrixLed_writeData(0x08, 0b00010000);
 80019ac:	2110      	movs	r1, #16
 80019ae:	2008      	movs	r0, #8
 80019b0:	f7ff ff46 	bl	8001840 <MatrixLed_writeData>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
	return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <_kill>:

int _kill(int pid, int sig)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019d0:	f001 fe6c 	bl	80036ac <__errno>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2216      	movs	r2, #22
 80019d8:	601a      	str	r2, [r3, #0]
	return -1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <_exit>:

void _exit (int status)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffe7 	bl	80019c6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019f8:	e7fe      	b.n	80019f8 <_exit+0x12>

080019fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e00a      	b.n	8001a22 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a0c:	f3af 8000 	nop.w
 8001a10:	4601      	mov	r1, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	60ba      	str	r2, [r7, #8]
 8001a18:	b2ca      	uxtb	r2, r1
 8001a1a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dbf0      	blt.n	8001a0c <_read+0x12>
	}

return len;
 8001a2a:	687b      	ldr	r3, [r7, #4]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e009      	b.n	8001a5a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	60ba      	str	r2, [r7, #8]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dbf1      	blt.n	8001a46 <_write+0x12>
	}
	return len;
 8001a62:	687b      	ldr	r3, [r7, #4]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_close>:

int _close(int file)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	return -1;
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a92:	605a      	str	r2, [r3, #4]
	return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <_isatty>:

int _isatty(int file)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
	return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <_sbrk+0x5c>)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <_sbrk+0x60>)
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <_sbrk+0x64>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <_sbrk+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d207      	bcs.n	8001b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001afc:	f001 fdd6 	bl	80036ac <__errno>
 8001b00:	4603      	mov	r3, r0
 8001b02:	220c      	movs	r2, #12
 8001b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b0a:	e009      	b.n	8001b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <_sbrk+0x64>)
 8001b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20020000 	.word	0x20020000
 8001b2c:	00000400 	.word	0x00000400
 8001b30:	200003dc 	.word	0x200003dc
 8001b34:	20000420 	.word	0x20000420

08001b38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b3a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b3c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b42:	490d      	ldr	r1, [pc, #52]	; (8001b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <LoopForever+0xe>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b58:	4c0a      	ldr	r4, [pc, #40]	; (8001b84 <LoopForever+0x16>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b66:	f001 fda7 	bl	80036b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b6a:	f7ff fa47 	bl	8000ffc <main>

08001b6e <LoopForever>:

LoopForever:
    b LoopForever
 8001b6e:	e7fe      	b.n	8001b6e <LoopForever>
  ldr   r0, =_estack
 8001b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001b7c:	080083fc 	.word	0x080083fc
  ldr r2, =_sbss
 8001b80:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001b84:	20000420 	.word	0x20000420

08001b88 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC_IRQHandler>
	...

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4906      	ldr	r1, [pc, #24]	; (8001bc0 <__NVIC_EnableIRQ+0x34>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <BasicTimer_Config>:
 *
 *  Como vamos a trabajar con interrupciones, antes de configurar una nueva, debemos desactivar
 *  el sistema global de interrupciones, activar la IRQ específica y luego volver a encender
 *  el sistema.
 */
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	// Guardamos una referencia al periferico que estamos utilizando...
	ptrTimerUsed = ptrBTimerHandler->ptrTIMx;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a4f      	ldr	r2, [pc, #316]	; (8001d10 <BasicTimer_Config+0x14c>)
 8001bd2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop

	/* 0. Desactivamos las interrupciones globales mientras configuramos el sistema.*/
	__disable_irq();
	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be0:	d106      	bne.n	8001bf0 <BasicTimer_Config+0x2c>
		// Registro del RCC que nos activa la señal de reloj para el TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001be2:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <BasicTimer_Config+0x150>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a4b      	ldr	r2, [pc, #300]	; (8001d14 <BasicTimer_Config+0x150>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	e024      	b.n	8001c3a <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <BasicTimer_Config+0x154>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d106      	bne.n	8001c08 <BasicTimer_Config+0x44>
		// Registro del RCC que nos activa la señal de reloj para el TIM3
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001bfa:	4b46      	ldr	r3, [pc, #280]	; (8001d14 <BasicTimer_Config+0x150>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a45      	ldr	r2, [pc, #276]	; (8001d14 <BasicTimer_Config+0x150>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	e018      	b.n	8001c3a <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a43      	ldr	r2, [pc, #268]	; (8001d1c <BasicTimer_Config+0x158>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d106      	bne.n	8001c20 <BasicTimer_Config+0x5c>
		// Registro del RCC que nos activa la señal de reloj para el TIM4
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <BasicTimer_Config+0x150>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a3f      	ldr	r2, [pc, #252]	; (8001d14 <BasicTimer_Config+0x150>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	e00c      	b.n	8001c3a <BasicTimer_Config+0x76>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a3e      	ldr	r2, [pc, #248]	; (8001d20 <BasicTimer_Config+0x15c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d106      	bne.n	8001c38 <BasicTimer_Config+0x74>
		// Registro del RCC que nos activa la señal de reloj para el TIM5
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <BasicTimer_Config+0x150>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a39      	ldr	r2, [pc, #228]	; (8001d14 <BasicTimer_Config+0x150>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	e000      	b.n	8001c3a <BasicTimer_Config+0x76>
	}
	else{
		__NOP();
 8001c38:	bf00      	nop
	 * Recordar que el prescaler nos indica la velocidad a la que se incrementa el counter, de forma que
	 * periodo_incremento * veces_incremento_counter = periodo_update
	 * Modificar el valor del registro PSC en el TIM utilizado
	 */
	/* Escriba codigo aca */
	ptrBTimerHandler->ptrTIMx->PSC = ptrBTimerHandler->TIMx_Config.TIMx_speed -1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3a01      	subs	r2, #1
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28

	/* 3. Configuramos la dirección del counter (up/down)*/
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode == BTIMER_MODE_UP){
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	791b      	ldrb	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d112      	bne.n	8001c74 <BasicTimer_Config+0xb0>

		/* 3a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
		// Configurar el registro que nos controla el modo up or down
		ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0210 	bic.w	r2, r2, #16
 8001c5c:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3a01      	subs	r2, #1
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter*/
		/* Escriba codigo aca */
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
 8001c72:	e011      	b.n	8001c98 <BasicTimer_Config+0xd4>

	}else{
		/* 3a. Estamos en DOWN_Mode, el limite se carga en ARR (0) y se comienza en un valor alto
		 * Trabaja contando en direccion descendente*/
		ptrBTimerHandler->ptrTIMx->CR1 &= TIM_CR1_DIR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f002 0210 	and.w	r2, r2, #16
 8001c82:	601a      	str	r2, [r3, #0]

		/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar
		 * En modo descendente, con numero positivos, cual es el minimi valor al que ARR puede llegar*/
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* 3c. Reiniciamos el registro counter
		 * Este es el valor con el que el counter comienza */
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMx_period - 1;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3a01      	subs	r2, #1
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* 4. Activamos el Timer (el CNT debe comenzar a contar*/
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

	/* 5. Activamos la interrupción debida al Timerx Utilizado
	 * Modificar el registro encargado de activar la interrupcion generada por el TIMx*/
	ptrBTimerHandler->ptrTIMx->DIER |= TIM_DIER_UIE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	60da      	str	r2, [r3, #12]

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrBTimerHandler->ptrTIMx == TIM2){
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc0:	d103      	bne.n	8001cca <BasicTimer_Config+0x106>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001cc2:	201c      	movs	r0, #28
 8001cc4:	f7ff ff62 	bl	8001b8c <__NVIC_EnableIRQ>
 8001cc8:	e01b      	b.n	8001d02 <BasicTimer_Config+0x13e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM3){
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <BasicTimer_Config+0x154>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d103      	bne.n	8001cdc <BasicTimer_Config+0x118>
		// Activando en NVIC para la interrupción del TIM3
		/* Escriba codigo aca */
		NVIC_EnableIRQ(TIM3_IRQn);
 8001cd4:	201d      	movs	r0, #29
 8001cd6:	f7ff ff59 	bl	8001b8c <__NVIC_EnableIRQ>
 8001cda:	e012      	b.n	8001d02 <BasicTimer_Config+0x13e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM4){
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <BasicTimer_Config+0x158>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d103      	bne.n	8001cee <BasicTimer_Config+0x12a>
		// Activando en NVIC para la interrupción del TIM4
		/* Escriba codigo aca */
		NVIC_EnableIRQ(TIM4_IRQn);
 8001ce6:	201e      	movs	r0, #30
 8001ce8:	f7ff ff50 	bl	8001b8c <__NVIC_EnableIRQ>
 8001cec:	e009      	b.n	8001d02 <BasicTimer_Config+0x13e>
	}
	else if(ptrBTimerHandler->ptrTIMx == TIM5){
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <BasicTimer_Config+0x15c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d103      	bne.n	8001d00 <BasicTimer_Config+0x13c>
			// Activando en NVIC para la interrupción del TIM5
			/* Escriba codigo aca */
			NVIC_EnableIRQ(TIM5_IRQn);
 8001cf8:	2032      	movs	r0, #50	; 0x32
 8001cfa:	f7ff ff47 	bl	8001b8c <__NVIC_EnableIRQ>
 8001cfe:	e000      	b.n	8001d02 <BasicTimer_Config+0x13e>
		}
	else{
		__NOP();
 8001d00:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001d02:	b662      	cpsie	i
}
 8001d04:	bf00      	nop
	}

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000040c 	.word	0x2000040c
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40000800 	.word	0x40000800
 8001d20:	40000c00 	.word	0x40000c00

08001d24 <BasicTimer2_Callback>:

__attribute__((weak)) void BasicTimer2_Callback(void){
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be	 implemented in the main file
	   */
	__NOP();
 8001d28:	bf00      	nop
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <BasicTimer3_Callback>:

__attribute__((weak)) void BasicTimer3_Callback(void){
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001d36:	bf00      	nop
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void){
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8001d44:	bf00      	nop
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <TIM2_IRQHandler>:

/* Esta es la función a la que apunta el sistema en el vector de interrupciones.
 * Se debe utilizar usando exactamente el mismo nombre definido en el vector de interrupciones,
 * Al hacerlo correctamente, el sistema apunta a esta función y cuando la interrupción se lanza
 * el sistema inmediatamente salta a este lugar en la memoria*/
void TIM2_IRQHandler(void){
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0

	// Verificamos si la interrupción proviene del basic timer
	if(TIM2->SR & TIM_SR_UIF){
 8001d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <TIM2_IRQHandler+0x26>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		TIM2->SR &= ~TIM_SR_UIF;
 8001d60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6113      	str	r3, [r2, #16]

		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer2_Callback();
 8001d70:	f7ff ffd8 	bl	8001d24 <BasicTimer2_Callback>
	}

	// Verificamos si la interrupción proviene de la captura de frecuencia y a qué canal esta asociada
	if(TIM2->SR & TIM_SR_CC1IF){
 8001d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00a      	beq.n	8001d98 <TIM2_IRQHandler+0x4a>
		// Limpiamos la bandera que indica que la interrupción se ha generado
		TIM2->SR &= ~TIM_SR_CC1IF;
 8001d82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d8c:	f023 0302 	bic.w	r3, r3, #2
 8001d90:	6113      	str	r3, [r2, #16]

		// LLamamos a la función que se debe encargar de hacer algo con esta interrupción
		CaptureTimer2_Channel1_Callback();
 8001d92:	f000 fcb1 	bl	80026f8 <CaptureTimer2_Channel1_Callback>

		// LLamamos a la función que se debe encargar de hacer algo con esta interrupción
		CaptureTimer2_Channel4_Callback();
	}

}
 8001d96:	e034      	b.n	8001e02 <TIM2_IRQHandler+0xb4>
	else if(TIM2->SR & TIM_SR_CC2IF){
 8001d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <TIM2_IRQHandler+0x6e>
		TIM2->SR &= ~TIM_SR_CC2IF;
 8001da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6113      	str	r3, [r2, #16]
		CaptureTimer2_Channel2_Callback();
 8001db6:	f000 fca6 	bl	8002706 <CaptureTimer2_Channel2_Callback>
}
 8001dba:	e022      	b.n	8001e02 <TIM2_IRQHandler+0xb4>
	else if(TIM2->SR & TIM_SR_CC3IF){
 8001dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00a      	beq.n	8001de0 <TIM2_IRQHandler+0x92>
		TIM2->SR &= ~TIM_SR_CC3IF;
 8001dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd4:	f023 0308 	bic.w	r3, r3, #8
 8001dd8:	6113      	str	r3, [r2, #16]
		CaptureTimer2_Channel3_Callback();
 8001dda:	f000 fc9b 	bl	8002714 <CaptureTimer2_Channel3_Callback>
}
 8001dde:	e010      	b.n	8001e02 <TIM2_IRQHandler+0xb4>
	else if(TIM2->SR & TIM_SR_CC4IF){
 8001de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <TIM2_IRQHandler+0xb4>
		TIM2->SR &= ~TIM_SR_CC4IF;
 8001dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df8:	f023 0310 	bic.w	r3, r3, #16
 8001dfc:	6113      	str	r3, [r2, #16]
		CaptureTimer2_Channel4_Callback();
 8001dfe:	f000 fc90 	bl	8002722 <CaptureTimer2_Channel4_Callback>
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0

	// Verificamos si la interrupción proviene del basic timer
	if(TIM3->SR & TIM_SR_UIF){
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <TIM3_IRQHandler+0x20>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		TIM3->SR &= ~TIM_SR_UIF;
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6113      	str	r3, [r2, #16]

		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer3_Callback();
 8001e24:	f7ff ff85 	bl	8001d32 <BasicTimer3_Callback>
	}

	// Verificamos si la interrupción proviene de la captura de frecuencia y a qué canal esta asociada
	if(TIM3->SR & TIM_SR_CC1IF){
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <TIM3_IRQHandler+0x3e>
		// Limpiamos la bandera que indica que la interrupción se ha generado
		TIM3->SR &= ~TIM_SR_CC1IF;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	4a1a      	ldr	r2, [pc, #104]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e3a:	f023 0302 	bic.w	r3, r3, #2
 8001e3e:	6113      	str	r3, [r2, #16]

		// LLamamos a la función que se debe encargar de hacer algo con esta interrupción
		CaptureTimer3_Channel1_Callback();
 8001e40:	f000 fc76 	bl	8002730 <CaptureTimer3_Channel1_Callback>

		// LLamamos a la función que se debe encargar de hacer algo con esta interrupción
		CaptureTimer3_Channel4_Callback();
	}

}
 8001e44:	e02b      	b.n	8001e9e <TIM3_IRQHandler+0x96>
	else if(TIM3->SR & TIM_SR_CC2IF){
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <TIM3_IRQHandler+0x5c>
		TIM3->SR &= ~TIM_SR_CC2IF;
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6113      	str	r3, [r2, #16]
		CaptureTimer3_Channel2_Callback();
 8001e5e:	f000 fc6e 	bl	800273e <CaptureTimer3_Channel2_Callback>
}
 8001e62:	e01c      	b.n	8001e9e <TIM3_IRQHandler+0x96>
	else if(TIM3->SR & TIM_SR_CC3IF){
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <TIM3_IRQHandler+0x7a>
		TIM3->SR &= ~TIM_SR_CC3IF;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e76:	f023 0308 	bic.w	r3, r3, #8
 8001e7a:	6113      	str	r3, [r2, #16]
		CaptureTimer3_Channel3_Callback();
 8001e7c:	f000 fc66 	bl	800274c <CaptureTimer3_Channel3_Callback>
}
 8001e80:	e00d      	b.n	8001e9e <TIM3_IRQHandler+0x96>
	else if(TIM3->SR & TIM_SR_CC4IF){
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d007      	beq.n	8001e9e <TIM3_IRQHandler+0x96>
		TIM3->SR &= ~TIM_SR_CC4IF;
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <TIM3_IRQHandler+0x9c>)
 8001e94:	f023 0310 	bic.w	r3, r3, #16
 8001e98:	6113      	str	r3, [r2, #16]
		CaptureTimer3_Channel4_Callback();
 8001e9a:	f000 fc5e 	bl	800275a <CaptureTimer3_Channel4_Callback>
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40000400 	.word	0x40000400

08001ea8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

	// Verificamos si la interrupción proviene del basic timer
	if(TIM4->SR & TIM_SR_UIF){
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <TIM4_IRQHandler+0x20>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		TIM4->SR &= ~TIM_SR_UIF;
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	6113      	str	r3, [r2, #16]

		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer4_Callback();
 8001ec4:	f7ff ff3c 	bl	8001d40 <BasicTimer4_Callback>
	}

	// Verificamos si la interrupción proviene de la captura de frecuencia y a qué canal esta asociada
	if(TIM4->SR & TIM_SR_CC1IF){
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <TIM4_IRQHandler+0x3e>
		// Limpiamos la bandera que indica que la interrupción se ha generado
		TIM4->SR &= ~TIM_SR_CC1IF;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001eda:	f023 0302 	bic.w	r3, r3, #2
 8001ede:	6113      	str	r3, [r2, #16]

		// LLamamos a la función que se debe encargar de hacer algo con esta interrupción
		CaptureTimer4_Channel1_Callback();
 8001ee0:	f7ff f9f6 	bl	80012d0 <CaptureTimer4_Channel1_Callback>
		// LLamamos a la función que se debe encargar de hacer algo con esta interrupción
		CaptureTimer4_Channel4_Callback();
	}


}
 8001ee4:	e02b      	b.n	8001f3e <TIM4_IRQHandler+0x96>
	else if(TIM4->SR & TIM_SR_CC2IF){
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <TIM4_IRQHandler+0x5c>
		TIM4->SR &= ~TIM_SR_CC2IF;
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6113      	str	r3, [r2, #16]
		CaptureTimer4_Channel2_Callback();
 8001efe:	f000 fc33 	bl	8002768 <CaptureTimer4_Channel2_Callback>
}
 8001f02:	e01c      	b.n	8001f3e <TIM4_IRQHandler+0x96>
	else if(TIM4->SR & TIM_SR_CC3IF){
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <TIM4_IRQHandler+0x7a>
		TIM4->SR &= ~TIM_SR_CC3IF;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001f16:	f023 0308 	bic.w	r3, r3, #8
 8001f1a:	6113      	str	r3, [r2, #16]
		CaptureTimer4_Channel3_Callback();
 8001f1c:	f7ff f9cc 	bl	80012b8 <CaptureTimer4_Channel3_Callback>
}
 8001f20:	e00d      	b.n	8001f3e <TIM4_IRQHandler+0x96>
	else if(TIM4->SR & TIM_SR_CC4IF){
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <TIM4_IRQHandler+0x96>
		TIM4->SR &= ~TIM_SR_CC4IF;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <TIM4_IRQHandler+0x9c>)
 8001f34:	f023 0310 	bic.w	r3, r3, #16
 8001f38:	6113      	str	r3, [r2, #16]
		CaptureTimer4_Channel4_Callback();
 8001f3a:	f000 fc1c 	bl	8002776 <CaptureTimer4_Channel4_Callback>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40000800 	.word	0x40000800

08001f48 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0

	// Verificamos si la interrupción proviene del basic timer
	if(TIM5->SR & TIM_SR_UIF){
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <TIM5_IRQHandler+0x20>
		/* Limpiamos la bandera que indica que la interrupción se ha generado */
		TIM5->SR &= ~TIM_SR_UIF;
 8001f58:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	6113      	str	r3, [r2, #16]

		/* LLamamos a la función que se debe encargar de hacer algo con esta interrupción*/
		BasicTimer5_Callback();
 8001f64:	f7ff f9c0 	bl	80012e8 <BasicTimer5_Callback>
	}

	// Verificamos si la interrupción proviene de la captura de frecuencia y a qué canal esta asociada
	if(TIM5->SR & TIM_SR_CC1IF){
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <TIM5_IRQHandler+0x3e>
		// Limpiamos la bandera que indica que la interrupción se ha generado
		TIM5->SR &= ~TIM_SR_CC1IF;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	4a1a      	ldr	r2, [pc, #104]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001f7a:	f023 0302 	bic.w	r3, r3, #2
 8001f7e:	6113      	str	r3, [r2, #16]

		// LLamamos a la función que se debe encargar de hacer algo con esta interrupción
		CaptureTimer5_Channel1_Callback();
 8001f80:	f000 fc00 	bl	8002784 <CaptureTimer5_Channel1_Callback>

		// LLamamos a la función que se debe encargar de hacer algo con esta interrupción
		CaptureTimer5_Channel4_Callback();
	}

}
 8001f84:	e02b      	b.n	8001fde <TIM5_IRQHandler+0x96>
	else if(TIM5->SR & TIM_SR_CC2IF){
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d008      	beq.n	8001fa4 <TIM5_IRQHandler+0x5c>
		TIM5->SR &= ~TIM_SR_CC2IF;
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6113      	str	r3, [r2, #16]
		CaptureTimer5_Channel2_Callback();
 8001f9e:	f000 fbf8 	bl	8002792 <CaptureTimer5_Channel2_Callback>
}
 8001fa2:	e01c      	b.n	8001fde <TIM5_IRQHandler+0x96>
	else if(TIM5->SR & TIM_SR_CC3IF){
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <TIM5_IRQHandler+0x7a>
		TIM5->SR &= ~TIM_SR_CC3IF;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001fb6:	f023 0308 	bic.w	r3, r3, #8
 8001fba:	6113      	str	r3, [r2, #16]
		CaptureTimer5_Channel3_Callback();
 8001fbc:	f000 fbf0 	bl	80027a0 <CaptureTimer5_Channel3_Callback>
}
 8001fc0:	e00d      	b.n	8001fde <TIM5_IRQHandler+0x96>
	else if(TIM5->SR & TIM_SR_CC4IF){
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <TIM5_IRQHandler+0x96>
		TIM5->SR &= ~TIM_SR_CC4IF;
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <TIM5_IRQHandler+0x9c>)
 8001fd4:	f023 0310 	bic.w	r3, r3, #16
 8001fd8:	6113      	str	r3, [r2, #16]
		CaptureTimer5_Channel4_Callback();
 8001fda:	f000 fbe8 	bl	80027ae <CaptureTimer5_Channel4_Callback>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40000c00 	.word	0x40000c00

08001fe8 <__NVIC_EnableIRQ>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4906      	ldr	r1, [pc, #24]	; (800201c <__NVIC_EnableIRQ+0x34>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100

08002020 <capture_Config>:

/*
 * Funcion para configurar la captura
 */

void capture_Config(Capture_Handler_t *ptrCaptureHandler){
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002028:	b672      	cpsid	i
}
 800202a:	bf00      	nop
	__disable_irq();

	/*
	 * 1. Activar la señal de reloj del periferico requerido
	 */
	if(ptrCaptureHandler->ptrTIMx == TIM2){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d106      	bne.n	8002044 <capture_Config+0x24>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002036:	4b7f      	ldr	r3, [pc, #508]	; (8002234 <capture_Config+0x214>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a7e      	ldr	r2, [pc, #504]	; (8002234 <capture_Config+0x214>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	e024      	b.n	800208e <capture_Config+0x6e>
	}
	else if(ptrCaptureHandler->ptrTIMx == TIM3){
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a7b      	ldr	r2, [pc, #492]	; (8002238 <capture_Config+0x218>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d106      	bne.n	800205c <capture_Config+0x3c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800204e:	4b79      	ldr	r3, [pc, #484]	; (8002234 <capture_Config+0x214>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a78      	ldr	r2, [pc, #480]	; (8002234 <capture_Config+0x214>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	e018      	b.n	800208e <capture_Config+0x6e>
	}
	else if(ptrCaptureHandler->ptrTIMx == TIM4){
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a76      	ldr	r2, [pc, #472]	; (800223c <capture_Config+0x21c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d106      	bne.n	8002074 <capture_Config+0x54>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002066:	4b73      	ldr	r3, [pc, #460]	; (8002234 <capture_Config+0x214>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a72      	ldr	r2, [pc, #456]	; (8002234 <capture_Config+0x214>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	e00c      	b.n	800208e <capture_Config+0x6e>
	}
	else if(ptrCaptureHandler->ptrTIMx == TIM5){
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a71      	ldr	r2, [pc, #452]	; (8002240 <capture_Config+0x220>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d106      	bne.n	800208c <capture_Config+0x6c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800207e:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <capture_Config+0x214>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a6c      	ldr	r2, [pc, #432]	; (8002234 <capture_Config+0x214>)
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	e000      	b.n	800208e <capture_Config+0x6e>
	}
	else{
		__NOP();
 800208c:	bf00      	nop


	/*
	 * 2a. Estamos en UP mode, el limite se carga en el ARR y se comienza en 0
	 */
	ptrCaptureHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0210 	bic.w	r2, r2, #16
 800209c:	601a      	str	r2, [r3, #0]
	 * 4. Además en el mismo "case" el modo del PWM, su polaridad.
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM
	 */
	switch(ptrCaptureHandler->config.channel){
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	791b      	ldrb	r3, [r3, #4]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	f200 8187 	bhi.w	80023b6 <capture_Config+0x396>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <capture_Config+0x90>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	080020c1 	.word	0x080020c1
 80020b4:	08002179 	.word	0x08002179
 80020b8:	08002245 	.word	0x08002245
 80020bc:	080022fd 	.word	0x080022fd
	case CAPTURE_CHANNEL_1:{
		// Borramos el posible valor cargado
		ptrCaptureHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC1S);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0203 	bic.w	r2, r2, #3
 80020ce:	619a      	str	r2, [r3, #24]

		// Configuramos como entrada el mismo canal
		ptrCaptureHandler->ptrTIMx->CCMR1 = (1 << TIM_CCMR1_CC1S_Pos);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	619a      	str	r2, [r3, #24]

		// Configuramos el filtro (sin filtro)
		ptrCaptureHandler->ptrTIMx->CCMR1 &= ~(0xF << TIM_CCMR1_IC1F_Pos);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020e6:	619a      	str	r2, [r3, #24]
		ptrCaptureHandler->ptrTIMx->CCMR1 |= (0x3 << TIM_CCMR1_IC1F_Pos);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80020f6:	619a      	str	r2, [r3, #24]

		// Configuramos el prescaler
		ptrCaptureHandler->ptrTIMx->CCMR1 &= ~(0x3 << TIM_CCMR1_IC1PSC_Pos);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 020c 	bic.w	r2, r2, #12
 8002106:	619a      	str	r2, [r3, #24]
		ptrCaptureHandler->ptrTIMx->CCMR1 |= (ptrCaptureHandler->config.prescalerCapture << TIM_CCMR1_IC1PSC_Pos);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6999      	ldr	r1, [r3, #24]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	009a      	lsls	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	619a      	str	r2, [r3, #24]

		// Configuramos el flanco que deseamos capturar
		if(ptrCaptureHandler->config.edgeSignal == CAPTURE_RISING_EDGE){
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	795b      	ldrb	r3, [r3, #5]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d110      	bne.n	8002146 <capture_Config+0x126>
			// Configuramos 00, para rising edge
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC1P);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a1a      	ldr	r2, [r3, #32]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0202 	bic.w	r2, r2, #2
 8002132:	621a      	str	r2, [r3, #32]
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC1NP);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0208 	bic.w	r2, r2, #8
 8002142:	621a      	str	r2, [r3, #32]
 8002144:	e00f      	b.n	8002166 <capture_Config+0x146>
		}
		else{
			// COnfiguramos 01, para falling edge
			ptrCaptureHandler->ptrTIMx->CCER |= (TIM_CCER_CC1P);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a1a      	ldr	r2, [r3, #32]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0202 	orr.w	r2, r2, #2
 8002154:	621a      	str	r2, [r3, #32]
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC1NP);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0208 	bic.w	r2, r2, #8
 8002164:	621a      	str	r2, [r3, #32]

		// Activamos el modulo de captura
//		ptrCaptureHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;

		// Se activa la interrupcion para el modo captura del timer en el canal correspondiente
		ptrCaptureHandler->ptrTIMx->DIER |= TIM_DIER_CC1IE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0202 	orr.w	r2, r2, #2
 8002174:	60da      	str	r2, [r3, #12]

		break;
 8002176:	e120      	b.n	80023ba <capture_Config+0x39a>
	}

	case CAPTURE_CHANNEL_2:{
		// Borramos el posible valor cargado
		ptrCaptureHandler->ptrTIMx->CCMR1 &= ~(TIM_CCMR1_CC2S);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002186:	619a      	str	r2, [r3, #24]

		// Configuramos como entrada el mismo canal
		ptrCaptureHandler->ptrTIMx->CCMR1 = (1 << TIM_CCMR1_CC2S_Pos);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002190:	619a      	str	r2, [r3, #24]

		// Configuramos el filtro (sin filtro)
		ptrCaptureHandler->ptrTIMx->CCMR1 &= ~(0xF << TIM_CCMR1_IC2F_Pos);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699a      	ldr	r2, [r3, #24]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80021a0:	619a      	str	r2, [r3, #24]
		ptrCaptureHandler->ptrTIMx->CCMR1 |= (0x3 << TIM_CCMR1_IC2F_Pos);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80021b0:	619a      	str	r2, [r3, #24]

		// Configuramos el prescaler
		ptrCaptureHandler->ptrTIMx->CCMR1 &= ~(0x3 << TIM_CCMR1_IC2PSC_Pos);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80021c0:	619a      	str	r2, [r3, #24]
		ptrCaptureHandler->ptrTIMx->CCMR1 |= (ptrCaptureHandler->config.prescalerCapture << TIM_CCMR1_IC2PSC_Pos);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6999      	ldr	r1, [r3, #24]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	029a      	lsls	r2, r3, #10
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	619a      	str	r2, [r3, #24]

		// Configuramos el flanco que deseamos capturar
		if(ptrCaptureHandler->config.edgeSignal == CAPTURE_RISING_EDGE){
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	795b      	ldrb	r3, [r3, #5]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d110      	bne.n	8002200 <capture_Config+0x1e0>
			// Configuramos 00, para rising edge
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC2P);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0220 	bic.w	r2, r2, #32
 80021ec:	621a      	str	r2, [r3, #32]
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC2NP);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a1a      	ldr	r2, [r3, #32]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fc:	621a      	str	r2, [r3, #32]
 80021fe:	e00f      	b.n	8002220 <capture_Config+0x200>
		}
		else{
			// COnfiguramos 01, para falling edge
			ptrCaptureHandler->ptrTIMx->CCER |= (TIM_CCER_CC2P);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0220 	orr.w	r2, r2, #32
 800220e:	621a      	str	r2, [r3, #32]
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC2NP);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800221e:	621a      	str	r2, [r3, #32]

		// Activamos el modulo de captura
//		ptrCaptureHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;

		// Se activa la interrupcion para el modo captura del timer en el canal correspondiente
		ptrCaptureHandler->ptrTIMx->DIER |= TIM_DIER_CC2IE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0204 	orr.w	r2, r2, #4
 800222e:	60da      	str	r2, [r3, #12]

		break;
 8002230:	e0c3      	b.n	80023ba <capture_Config+0x39a>
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00
	}

	case CAPTURE_CHANNEL_3:{
		// Borramos el posible valor cargado
		ptrCaptureHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC3S);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0203 	bic.w	r2, r2, #3
 8002252:	61da      	str	r2, [r3, #28]

		// Configuramos como entrada el mismo canal
		ptrCaptureHandler->ptrTIMx->CCMR2 = (1 << TIM_CCMR2_CC3S_Pos);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	61da      	str	r2, [r3, #28]

		// Configuramos el filtro (sin filtro)
		ptrCaptureHandler->ptrTIMx->CCMR2 &= ~(0xF << TIM_CCMR2_IC3F_Pos);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800226a:	61da      	str	r2, [r3, #28]
		ptrCaptureHandler->ptrTIMx->CCMR2 |= (0x3 << TIM_CCMR2_IC3F_Pos);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800227a:	61da      	str	r2, [r3, #28]

		// Configuramos el prescaler
		ptrCaptureHandler->ptrTIMx->CCMR2 &= ~(0x3 << TIM_CCMR2_IC3PSC_Pos);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 020c 	bic.w	r2, r2, #12
 800228a:	61da      	str	r2, [r3, #28]
		ptrCaptureHandler->ptrTIMx->CCMR2 |= (ptrCaptureHandler->config.prescalerCapture << TIM_CCMR2_IC3PSC_Pos);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69d9      	ldr	r1, [r3, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	009a      	lsls	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	61da      	str	r2, [r3, #28]

		// Configuramos el flanco que deseamos capturar
		if(ptrCaptureHandler->config.edgeSignal == CAPTURE_RISING_EDGE){
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	795b      	ldrb	r3, [r3, #5]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d110      	bne.n	80022ca <capture_Config+0x2aa>
			// Configuramos 00, para rising edge
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC3P);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022b6:	621a      	str	r2, [r3, #32]
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC3NP);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a1a      	ldr	r2, [r3, #32]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c6:	621a      	str	r2, [r3, #32]
 80022c8:	e00f      	b.n	80022ea <capture_Config+0x2ca>
		}
		else{
			// COnfiguramos 01, para falling edge
			ptrCaptureHandler->ptrTIMx->CCER |= (TIM_CCER_CC3P);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d8:	621a      	str	r2, [r3, #32]
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC3NP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e8:	621a      	str	r2, [r3, #32]

		// Activamos el modulo de captura
//		ptrCaptureHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;

		// Se activa la interrupcion para el modo captura del timer en el canal correspondiente
		ptrCaptureHandler->ptrTIMx->DIER |= TIM_DIER_CC3IE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0208 	orr.w	r2, r2, #8
 80022f8:	60da      	str	r2, [r3, #12]

		break;
 80022fa:	e05e      	b.n	80023ba <capture_Config+0x39a>
	}

	case CAPTURE_CHANNEL_4:{
		// Borramos el posible valor cargado
		ptrCaptureHandler->ptrTIMx->CCMR2 &= ~(TIM_CCMR2_CC4S);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800230a:	61da      	str	r2, [r3, #28]

		// Configuramos como entrada el mismo canal
		ptrCaptureHandler->ptrTIMx->CCMR2 = (1 << TIM_CCMR2_CC4S_Pos);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002314:	61da      	str	r2, [r3, #28]

		// Configuramos el filtro (sin filtro)
		ptrCaptureHandler->ptrTIMx->CCMR2 &= ~(0xF << TIM_CCMR2_IC4F_Pos);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8002324:	61da      	str	r2, [r3, #28]
		ptrCaptureHandler->ptrTIMx->CCMR2 |= (0x3 << TIM_CCMR2_IC4F_Pos);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8002334:	61da      	str	r2, [r3, #28]

		// Configuramos el prescaler
		ptrCaptureHandler->ptrTIMx->CCMR2 &= ~(0x3 << TIM_CCMR2_IC4PSC_Pos);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002344:	61da      	str	r2, [r3, #28]
		ptrCaptureHandler->ptrTIMx->CCMR2 |= (ptrCaptureHandler->config.prescalerCapture << TIM_CCMR2_IC4PSC_Pos);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	69d9      	ldr	r1, [r3, #28]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	029a      	lsls	r2, r3, #10
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	61da      	str	r2, [r3, #28]

		// Configuramos el flanco que deseamos capturar
		if(ptrCaptureHandler->config.edgeSignal == CAPTURE_RISING_EDGE){
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	795b      	ldrb	r3, [r3, #5]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d110      	bne.n	8002384 <capture_Config+0x364>
			// Configuramos 00, para rising edge
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC4P);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002370:	621a      	str	r2, [r3, #32]
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC4NP);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002380:	621a      	str	r2, [r3, #32]
 8002382:	e00f      	b.n	80023a4 <capture_Config+0x384>
		}
		else{
			// COnfiguramos 01, para falling edge
			ptrCaptureHandler->ptrTIMx->CCER |= (TIM_CCER_CC3P);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	621a      	str	r2, [r3, #32]
			ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC4NP);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023a2:	621a      	str	r2, [r3, #32]

		// Activamos el modulo de captura
//		ptrCaptureHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;

		// Se activa la interrupcion para el modo captura del timer en el canal correspondiente
		ptrCaptureHandler->ptrTIMx->DIER |= TIM_DIER_CC4IE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0210 	orr.w	r2, r2, #16
 80023b2:	60da      	str	r2, [r3, #12]

		break;
 80023b4:	e001      	b.n	80023ba <capture_Config+0x39a>
	}

	default:{
		__NOP();
 80023b6:	bf00      	nop
		break;
 80023b8:	bf00      	nop
	} // FIN del switch-case

	/*
	 * Configuramos el prescaler del timer, el cual define a qué velocidad se incrmenta nuestro timer
	 */
	ptrCaptureHandler->ptrTIMx->PSC = ptrCaptureHandler->config.timerSpeed;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28

	/* 6. Activamos el canal del sistema NVIC para que lea la interrupción*/
	if(ptrCaptureHandler->ptrTIMx == TIM2){
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023cc:	d103      	bne.n	80023d6 <capture_Config+0x3b6>
		// Activando en NVIC para la interrupción del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 80023ce:	201c      	movs	r0, #28
 80023d0:	f7ff fe0a 	bl	8001fe8 <__NVIC_EnableIRQ>
 80023d4:	e01b      	b.n	800240e <capture_Config+0x3ee>
	}
	else if(ptrCaptureHandler->ptrTIMx == TIM3){
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <capture_Config+0x40c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d103      	bne.n	80023e8 <capture_Config+0x3c8>
		// Activando en NVIC para la interrupción del TIM3
		/* Escriba codigo aca */
		NVIC_EnableIRQ(TIM3_IRQn);
 80023e0:	201d      	movs	r0, #29
 80023e2:	f7ff fe01 	bl	8001fe8 <__NVIC_EnableIRQ>
 80023e6:	e012      	b.n	800240e <capture_Config+0x3ee>
	}
	else if(ptrCaptureHandler->ptrTIMx == TIM4){
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a10      	ldr	r2, [pc, #64]	; (8002430 <capture_Config+0x410>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d103      	bne.n	80023fa <capture_Config+0x3da>
		// Activando en NVIC para la interrupción del TIM4
		/* Escriba codigo aca */
		NVIC_EnableIRQ(TIM4_IRQn);
 80023f2:	201e      	movs	r0, #30
 80023f4:	f7ff fdf8 	bl	8001fe8 <__NVIC_EnableIRQ>
 80023f8:	e009      	b.n	800240e <capture_Config+0x3ee>
	}
	else if(ptrCaptureHandler->ptrTIMx == TIM5){
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <capture_Config+0x414>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d103      	bne.n	800240c <capture_Config+0x3ec>
		// Activando en NVIC para la interrupción del TIM5
		/* Escriba codigo aca */
		NVIC_EnableIRQ(TIM5_IRQn);
 8002404:	2032      	movs	r0, #50	; 0x32
 8002406:	f7ff fdef 	bl	8001fe8 <__NVIC_EnableIRQ>
 800240a:	e000      	b.n	800240e <capture_Config+0x3ee>
	}
	else{
		__NOP();
 800240c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800240e:	b662      	cpsie	i
}
 8002410:	bf00      	nop

	/* 7. Volvemos a activar las interrupciones del sistema */
	__enable_irq();

	// Enciendo el timer para que empice a contar
	ptrCaptureHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]


}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800
 8002434:	40000c00 	.word	0x40000c00

08002438 <getDutty>:

	return deltaTimestamp;

}

uint64_t getDutty(Capture_Handler_t *ptrCaptureHandler){
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	 * por lo cual se escribe cada código dentro del "case" específico.
	 * Antes de lanzar la captura (encender el Timer para que cuente),
	 * debemos borrar el valor de los registros CCP, de forma que arranquen limpios
	 */

	switch(ptrCaptureHandler->config.channel){
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	791b      	ldrb	r3, [r3, #4]
 8002444:	2b03      	cmp	r3, #3
 8002446:	f000 8093 	beq.w	8002570 <getDutty+0x138>
 800244a:	2b03      	cmp	r3, #3
 800244c:	f300 80d5 	bgt.w	80025fa <getDutty+0x1c2>
 8002450:	2b01      	cmp	r3, #1
 8002452:	d002      	beq.n	800245a <getDutty+0x22>
 8002454:	2b02      	cmp	r3, #2
 8002456:	d046      	beq.n	80024e6 <getDutty+0xae>


			break;
		}
		default: {
			break;
 8002458:	e0cf      	b.n	80025fa <getDutty+0x1c2>
			if(timestamp == 0){
 800245a:	4b71      	ldr	r3, [pc, #452]	; (8002620 <getDutty+0x1e8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11c      	bne.n	800249c <getDutty+0x64>
				timestamp = 1;
 8002462:	4b6f      	ldr	r3, [pc, #444]	; (8002620 <getDutty+0x1e8>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]
				ptrCaptureHandler->ptrTIMx->CCR2 = 0;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2200      	movs	r2, #0
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
				timestamp1 = ptrCaptureHandler->ptrTIMx->CCR2;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	4a6b      	ldr	r2, [pc, #428]	; (8002624 <getDutty+0x1ec>)
 8002478:	6013      	str	r3, [r2, #0]
				ptrCaptureHandler->ptrTIMx->CCER |= (TIM_CCER_CC2P);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0220 	orr.w	r2, r2, #32
 8002488:	621a      	str	r2, [r3, #32]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC2NP);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002498:	621a      	str	r2, [r3, #32]
			break;
 800249a:	e0b0      	b.n	80025fe <getDutty+0x1c6>
			else if(timestamp == 1){
 800249c:	4b60      	ldr	r3, [pc, #384]	; (8002620 <getDutty+0x1e8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f040 80ac 	bne.w	80025fe <getDutty+0x1c6>
				timestamp2 = ptrCaptureHandler->ptrTIMx->CCR2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	4a5e      	ldr	r2, [pc, #376]	; (8002628 <getDutty+0x1f0>)
 80024ae:	6013      	str	r3, [r2, #0]
				timestamp = 0;
 80024b0:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <getDutty+0x1e8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
				deltaTimestamp = (timestamp2 - timestamp1);
 80024b6:	4b5c      	ldr	r3, [pc, #368]	; (8002628 <getDutty+0x1f0>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b5a      	ldr	r3, [pc, #360]	; (8002624 <getDutty+0x1ec>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	4a5a      	ldr	r2, [pc, #360]	; (800262c <getDutty+0x1f4>)
 80024c2:	6013      	str	r3, [r2, #0]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC2P);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0220 	bic.w	r2, r2, #32
 80024d2:	621a      	str	r2, [r3, #32]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC2NP);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a1a      	ldr	r2, [r3, #32]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e2:	621a      	str	r2, [r3, #32]
			break;
 80024e4:	e08b      	b.n	80025fe <getDutty+0x1c6>
			if(timestamp == 0){
 80024e6:	4b4e      	ldr	r3, [pc, #312]	; (8002620 <getDutty+0x1e8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d11c      	bne.n	8002528 <getDutty+0xf0>
				timestamp = 1;
 80024ee:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <getDutty+0x1e8>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
				ptrCaptureHandler->ptrTIMx->CCR3 = 0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2200      	movs	r2, #0
 80024fa:	63da      	str	r2, [r3, #60]	; 0x3c
				timestamp1 = ptrCaptureHandler->ptrTIMx->CCR3;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	4a48      	ldr	r2, [pc, #288]	; (8002624 <getDutty+0x1ec>)
 8002504:	6013      	str	r3, [r2, #0]
				ptrCaptureHandler->ptrTIMx->CCER |= (TIM_CCER_CC3P);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1a      	ldr	r2, [r3, #32]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002514:	621a      	str	r2, [r3, #32]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC3NP);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002524:	621a      	str	r2, [r3, #32]
			break;
 8002526:	e06c      	b.n	8002602 <getDutty+0x1ca>
			else if(timestamp == 1){
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <getDutty+0x1e8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d168      	bne.n	8002602 <getDutty+0x1ca>
				timestamp2 = ptrCaptureHandler->ptrTIMx->CCR3;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	4a3c      	ldr	r2, [pc, #240]	; (8002628 <getDutty+0x1f0>)
 8002538:	6013      	str	r3, [r2, #0]
				timestamp = 0;
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <getDutty+0x1e8>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
				deltaTimestamp = (timestamp2 - timestamp1);
 8002540:	4b39      	ldr	r3, [pc, #228]	; (8002628 <getDutty+0x1f0>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b37      	ldr	r3, [pc, #220]	; (8002624 <getDutty+0x1ec>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	4a38      	ldr	r2, [pc, #224]	; (800262c <getDutty+0x1f4>)
 800254c:	6013      	str	r3, [r2, #0]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC3P);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a1a      	ldr	r2, [r3, #32]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800255c:	621a      	str	r2, [r3, #32]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC3NP);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a1a      	ldr	r2, [r3, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256c:	621a      	str	r2, [r3, #32]
			break;
 800256e:	e048      	b.n	8002602 <getDutty+0x1ca>
			if(timestamp == 0){
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <getDutty+0x1e8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d11c      	bne.n	80025b2 <getDutty+0x17a>
				timestamp = 1;
 8002578:	4b29      	ldr	r3, [pc, #164]	; (8002620 <getDutty+0x1e8>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
				ptrCaptureHandler->ptrTIMx->CCR4 = 0;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
				timestamp1 = ptrCaptureHandler->ptrTIMx->CCR4;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a25      	ldr	r2, [pc, #148]	; (8002624 <getDutty+0x1ec>)
 800258e:	6013      	str	r3, [r2, #0]
				ptrCaptureHandler->ptrTIMx->CCER |= (TIM_CCER_CC4P);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800259e:	621a      	str	r2, [r3, #32]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC4NP);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ae:	621a      	str	r2, [r3, #32]
			break;
 80025b0:	e029      	b.n	8002606 <getDutty+0x1ce>
			else if(timestamp == 1){
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <getDutty+0x1e8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d125      	bne.n	8002606 <getDutty+0x1ce>
				timestamp2 = ptrCaptureHandler->ptrTIMx->CCR4;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <getDutty+0x1f0>)
 80025c2:	6013      	str	r3, [r2, #0]
				timestamp = 0;
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <getDutty+0x1e8>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
				deltaTimestamp = (timestamp2 - timestamp1);
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <getDutty+0x1f0>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <getDutty+0x1ec>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <getDutty+0x1f4>)
 80025d6:	6013      	str	r3, [r2, #0]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC4P);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a1a      	ldr	r2, [r3, #32]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025e6:	621a      	str	r2, [r3, #32]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC4NP);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025f6:	621a      	str	r2, [r3, #32]
			break;
 80025f8:	e005      	b.n	8002606 <getDutty+0x1ce>
			break;
 80025fa:	bf00      	nop
 80025fc:	e004      	b.n	8002608 <getDutty+0x1d0>
			break;
 80025fe:	bf00      	nop
 8002600:	e002      	b.n	8002608 <getDutty+0x1d0>
			break;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <getDutty+0x1d0>
			break;
 8002606:	bf00      	nop
		}
	}

	return deltaTimestamp;
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <getDutty+0x1f4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	f04f 0300 	mov.w	r3, #0
}
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	200003e0 	.word	0x200003e0
 8002624:	200003e4 	.word	0x200003e4
 8002628:	200003e8 	.word	0x200003e8
 800262c:	200003ec 	.word	0x200003ec

08002630 <getDutty_2>:


uint64_t getDutty_2(Capture_Handler_t *ptrCaptureHandler){
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	 * por lo cual se escribe cada código dentro del "case" específico.
	 * Antes de lanzar la captura (encender el Timer para que cuente),
	 * debemos borrar el valor de los registros CCP, de forma que arranquen limpios
	 */

	switch(ptrCaptureHandler->config.channel){
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	791b      	ldrb	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d144      	bne.n	80026ca <getDutty_2+0x9a>
		case CAPTURE_CHANNEL_1:{

			if(timestamp_c2 == 0){
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <getDutty_2+0xb8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d11c      	bne.n	8002682 <getDutty_2+0x52>

				// Bandera que indica una interrupcion
				timestamp_c2 = 1;
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <getDutty_2+0xb8>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

				// Borramos el valor inicial del CCP
				ptrCaptureHandler->ptrTIMx->CCR1 = 0;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	635a      	str	r2, [r3, #52]	; 0x34

				// Capturamos el valor del tiempo almacenado en el CCRx
				timestamp1_c2 = ptrCaptureHandler->ptrTIMx->CCR1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265c:	4a23      	ldr	r2, [pc, #140]	; (80026ec <getDutty_2+0xbc>)
 800265e:	6013      	str	r3, [r2, #0]

				// COnfiguramos 01, para falling edge
				ptrCaptureHandler->ptrTIMx->CCER |= (TIM_CCER_CC1P);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0202 	orr.w	r2, r2, #2
 800266e:	621a      	str	r2, [r3, #32]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC1NP);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6a1a      	ldr	r2, [r3, #32]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0208 	bic.w	r2, r2, #8
 800267e:	621a      	str	r2, [r3, #32]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC1P);
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC1NP);
			}


			break;
 8002680:	e025      	b.n	80026ce <getDutty_2+0x9e>
			else if(timestamp_c2 == 1){
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <getDutty_2+0xb8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d121      	bne.n	80026ce <getDutty_2+0x9e>
				timestamp2_c2 = ptrCaptureHandler->ptrTIMx->CCR1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002690:	4a17      	ldr	r2, [pc, #92]	; (80026f0 <getDutty_2+0xc0>)
 8002692:	6013      	str	r3, [r2, #0]
				timestamp_c2 = 0;
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <getDutty_2+0xb8>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
				deltaTimestamp_c2 = (timestamp2_c2 - timestamp1_c2);
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <getDutty_2+0xc0>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <getDutty_2+0xbc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <getDutty_2+0xc4>)
 80026a6:	6013      	str	r3, [r2, #0]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC1P);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0202 	bic.w	r2, r2, #2
 80026b6:	621a      	str	r2, [r3, #32]
				ptrCaptureHandler->ptrTIMx->CCER &= ~(TIM_CCER_CC1NP);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0208 	bic.w	r2, r2, #8
 80026c6:	621a      	str	r2, [r3, #32]
			break;
 80026c8:	e001      	b.n	80026ce <getDutty_2+0x9e>
		}
		default: {
			break;
 80026ca:	bf00      	nop
 80026cc:	e000      	b.n	80026d0 <getDutty_2+0xa0>
			break;
 80026ce:	bf00      	nop
		}
	}

	return deltaTimestamp_c2;
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <getDutty_2+0xc4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	f04f 0300 	mov.w	r3, #0
}
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	200003f0 	.word	0x200003f0
 80026ec:	200003f4 	.word	0x200003f4
 80026f0:	200003f8 	.word	0x200003f8
 80026f4:	200003fc 	.word	0x200003fc

080026f8 <CaptureTimer2_Channel1_Callback>:




// Callbacks para captura de frecuencia
__attribute__((weak)) void CaptureTimer2_Channel1_Callback(void){
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be	 implemented in the main file
	   */
	__NOP();
 80026fc:	bf00      	nop
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <CaptureTimer2_Channel2_Callback>:

__attribute__((weak)) void CaptureTimer2_Channel2_Callback(void){
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be	 implemented in the main file
	   */
	__NOP();
 800270a:	bf00      	nop
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <CaptureTimer2_Channel3_Callback>:

__attribute__((weak)) void CaptureTimer2_Channel3_Callback(void){
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be	 implemented in the main file
	   */
	__NOP();
 8002718:	bf00      	nop
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <CaptureTimer2_Channel4_Callback>:

__attribute__((weak)) void CaptureTimer2_Channel4_Callback(void){
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be	 implemented in the main file
	   */
	__NOP();
 8002726:	bf00      	nop
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <CaptureTimer3_Channel1_Callback>:

__attribute__((weak)) void CaptureTimer3_Channel1_Callback(void){
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002734:	bf00      	nop
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <CaptureTimer3_Channel2_Callback>:

__attribute__((weak)) void CaptureTimer3_Channel2_Callback(void){
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002742:	bf00      	nop
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <CaptureTimer3_Channel3_Callback>:

__attribute__((weak)) void CaptureTimer3_Channel3_Callback(void){
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002750:	bf00      	nop
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <CaptureTimer3_Channel4_Callback>:

__attribute__((weak)) void CaptureTimer3_Channel4_Callback(void){
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800275e:	bf00      	nop
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <CaptureTimer4_Channel2_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void CaptureTimer4_Channel2_Callback(void){
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800276c:	bf00      	nop
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <CaptureTimer4_Channel4_Callback>:
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void CaptureTimer4_Channel4_Callback(void){
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 800277a:	bf00      	nop
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <CaptureTimer5_Channel1_Callback>:

__attribute__((weak)) void CaptureTimer5_Channel1_Callback(void){
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002788:	bf00      	nop
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <CaptureTimer5_Channel2_Callback>:

__attribute__((weak)) void CaptureTimer5_Channel2_Callback(void){
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 8002796:	bf00      	nop
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <CaptureTimer5_Channel3_Callback>:

__attribute__((weak)) void CaptureTimer5_Channel3_Callback(void){
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80027a4:	bf00      	nop
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <CaptureTimer5_Channel4_Callback>:

__attribute__((weak)) void CaptureTimer5_Channel4_Callback(void){
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the BasicTimerX_Callback could be implemented in the main file
	   */
	__NOP();
 80027b2:	bf00      	nop
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <stopCapture>:


void stopCapture(Capture_Handler_t *ptrCaptureHandler){
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

	switch(ptrCaptureHandler->config.channel){
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	791b      	ldrb	r3, [r3, #4]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d82b      	bhi.n	8002824 <stopCapture+0x68>
 80027cc:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <stopCapture+0x18>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	080027f5 	.word	0x080027f5
 80027dc:	08002805 	.word	0x08002805
 80027e0:	08002815 	.word	0x08002815
	case CAPTURE_CHANNEL_1:{

		// desactivamos el modulo de captura
		ptrCaptureHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	621a      	str	r2, [r3, #32]
	}

	case CAPTURE_CHANNEL_2:{

		// desactivamos el modulo de captura
		ptrCaptureHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6a1a      	ldr	r2, [r3, #32]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0210 	bic.w	r2, r2, #16
 8002802:	621a      	str	r2, [r3, #32]
	}

	case CAPTURE_CHANNEL_3:{

		// desactivamos el modulo de captura
		ptrCaptureHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002812:	621a      	str	r2, [r3, #32]
	}

	case CAPTURE_CHANNEL_4:{

		// desactivamos el modulo de captura
		ptrCaptureHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002822:	621a      	str	r2, [r3, #32]

	}

	}

}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <startCapture>:

void startCapture(Capture_Handler_t *ptrCaptureHandler){
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	switch(ptrCaptureHandler->config.channel){
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	791b      	ldrb	r3, [r3, #4]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d82b      	bhi.n	8002898 <startCapture+0x68>
 8002840:	a201      	add	r2, pc, #4	; (adr r2, 8002848 <startCapture+0x18>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	08002859 	.word	0x08002859
 800284c:	08002869 	.word	0x08002869
 8002850:	08002879 	.word	0x08002879
 8002854:	08002889 	.word	0x08002889
	case CAPTURE_CHANNEL_1:{

		// Activamos el modulo de captura
		ptrCaptureHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a1a      	ldr	r2, [r3, #32]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	621a      	str	r2, [r3, #32]
	}

	case CAPTURE_CHANNEL_2:{

		// Activamos el modulo de captura
		ptrCaptureHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0210 	orr.w	r2, r2, #16
 8002876:	621a      	str	r2, [r3, #32]
	}

	case CAPTURE_CHANNEL_3:{

		// Activamos el modulo de captura
		ptrCaptureHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002886:	621a      	str	r2, [r3, #32]
	}

	case CAPTURE_CHANNEL_4:{

		// Activamos el modulo de captura
		ptrCaptureHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a1a      	ldr	r2, [r3, #32]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002896:	621a      	str	r2, [r3, #32]

	}

	}

}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <GPIO_Config>:
 * Lo primero y mas importante es activar la señal del reloj principal hacia ese
 * elemento especifico (relacionado con el periferico RCC), a esto llamaremos
 * simplemento "activar el periferico o activar la señal de reloj del periferico)
 */

void GPIO_Config (GPIO_Handler_t *pGPIOHandler){
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

	// Variable para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]

	// 1)Activar el periferico
	//verificamos para GPIOA
	if(pGPIOHandler->pGPIOx == GPIOA){
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a87      	ldr	r2, [pc, #540]	; (8002ad8 <GPIO_Config+0x234>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d106      	bne.n	80028cc <GPIO_Config+0x28>
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOAEN_Pos);
 80028be:	4b87      	ldr	r3, [pc, #540]	; (8002adc <GPIO_Config+0x238>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a86      	ldr	r2, [pc, #536]	; (8002adc <GPIO_Config+0x238>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	e03a      	b.n	8002942 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOB
	else if(pGPIOHandler->pGPIOx == GPIOB){
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a83      	ldr	r2, [pc, #524]	; (8002ae0 <GPIO_Config+0x23c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d106      	bne.n	80028e4 <GPIO_Config+0x40>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOBEN_Pos);
 80028d6:	4b81      	ldr	r3, [pc, #516]	; (8002adc <GPIO_Config+0x238>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a80      	ldr	r2, [pc, #512]	; (8002adc <GPIO_Config+0x238>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	e02e      	b.n	8002942 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOC
	else if(pGPIOHandler->pGPIOx == GPIOC){
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a7e      	ldr	r2, [pc, #504]	; (8002ae4 <GPIO_Config+0x240>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d106      	bne.n	80028fc <GPIO_Config+0x58>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOCEN_Pos);
 80028ee:	4b7b      	ldr	r3, [pc, #492]	; (8002adc <GPIO_Config+0x238>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a7a      	ldr	r2, [pc, #488]	; (8002adc <GPIO_Config+0x238>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	e022      	b.n	8002942 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOD
	else if(pGPIOHandler->pGPIOx == GPIOD){
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a79      	ldr	r2, [pc, #484]	; (8002ae8 <GPIO_Config+0x244>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d106      	bne.n	8002914 <GPIO_Config+0x70>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIODEN_Pos);
 8002906:	4b75      	ldr	r3, [pc, #468]	; (8002adc <GPIO_Config+0x238>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a74      	ldr	r2, [pc, #464]	; (8002adc <GPIO_Config+0x238>)
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	e016      	b.n	8002942 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOE
	else if(pGPIOHandler->pGPIOx == GPIOE){
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a74      	ldr	r2, [pc, #464]	; (8002aec <GPIO_Config+0x248>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d106      	bne.n	800292c <GPIO_Config+0x88>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOEEN_Pos);
 800291e:	4b6f      	ldr	r3, [pc, #444]	; (8002adc <GPIO_Config+0x238>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <GPIO_Config+0x238>)
 8002924:	f043 0310 	orr.w	r3, r3, #16
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	e00a      	b.n	8002942 <GPIO_Config+0x9e>
	}
	//Verificamos para GPIOH
	else if(pGPIOHandler->pGPIOx == GPIOH){
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a6f      	ldr	r2, [pc, #444]	; (8002af0 <GPIO_Config+0x24c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d105      	bne.n	8002942 <GPIO_Config+0x9e>
		//Escribimos 1 (SET) en la posicion correspondiente
		RCC->AHB1ENR |= (SET << RCC_AHB1ENR_GPIOHEN_Pos);
 8002936:	4b69      	ldr	r3, [pc, #420]	; (8002adc <GPIO_Config+0x238>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a68      	ldr	r2, [pc, #416]	; (8002adc <GPIO_Config+0x238>)
 800293c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
	// Despues de activado, podemos comenzar a configurar.

	// 2) COnfigurando el registro GPIOx_MODER
	// Acá estamos leyendo config, moviendo "PinNumber" veces hacia la izquierda
	// ese valor (shift left) y todo eso lo cargamos en la variable auxConfig
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	795b      	ldrb	r3, [r3, #5]
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	791b      	ldrb	r3, [r3, #4]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	60fb      	str	r3, [r7, #12]
	/*
	 * Antes de cargar el nuevo valor, limpiamos los bits especificos de ese registro
	 * (debemos escribir 0b00) para lo cual aplicamos una mascara y una operación de
	 * bitwise AND
	 */
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	791b      	ldrb	r3, [r3, #4]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2103      	movs	r1, #3
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	4619      	mov	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	400a      	ands	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

	// Cargamos a auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

	/*
	 * 3) Configurando el registro GPIOx_OTYPER
	 * De nuevo, leemos y movemos el valor un numero "PinNumber" de veces
	 */
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7a1b      	ldrb	r3, [r3, #8]
 8002986:	461a      	mov	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	791b      	ldrb	r3, [r3, #4]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	60fb      	str	r3, [r7, #12]

	// Limpiamos antes de cargar
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	791b      	ldrb	r3, [r3, #4]
 800299c:	4619      	mov	r1, r3
 800299e:	2301      	movs	r3, #1
 80029a0:	408b      	lsls	r3, r1
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	400a      	ands	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]

	// Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]

	// 4) Configurando ahora la velocidad
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	799b      	ldrb	r3, [r3, #6]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	791b      	ldrb	r3, [r3, #4]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0B11 << 2 *pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	791b      	ldrb	r3, [r3, #4]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2103      	movs	r1, #3
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	4619      	mov	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	400a      	ands	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]

	//cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]

	//5) Configurando si se desea pull up pull down o flotante.
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPuPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	79db      	ldrb	r3, [r3, #7]
 8002a02:	461a      	mov	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	791b      	ldrb	r3, [r3, #4]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	60fb      	str	r3, [r7, #12]

	//Limpiando la posicion antes de cargar la nueva configuracion
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	791b      	ldrb	r3, [r3, #4]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	4619      	mov	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	60da      	str	r2, [r3, #12]

	//Cargamos el resultado sobre el registro adecuado
	pGPIOHandler->pGPIOx->PUPDR |= auxConfig;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68d9      	ldr	r1, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	60da      	str	r2, [r3, #12]

	//Esta es la parte para la configuracion de las funciones alternativas.. se vera luego
	if (pGPIOHandler->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	795b      	ldrb	r3, [r3, #5]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d143      	bne.n	8002ace <GPIO_Config+0x22a>

		//Seleccionamos primero si se debe utilizar el registro bajo (AFRL) o el alto (AFRH)
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8){
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	791b      	ldrb	r3, [r3, #4]
 8002a4a:	2b07      	cmp	r3, #7
 8002a4c:	d81f      	bhi.n	8002a8e <GPIO_Config+0x1ea>
			//Estamos en el registro AGRL, que controla los piner del pIN_0 AL PIN_7
			auxPosition = 4 * pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	791b      	ldrb	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	60bb      	str	r3, [r7, #8]

			//Limpiamos primero la posicion del tegistro que deseamos escribir a continuacion
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	210f      	movs	r1, #15
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	621a      	str	r2, [r3, #32]

			//Y escribimos el valor confiurado en la posicon seleccionada
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6a1a      	ldr	r2, [r3, #32]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7a5b      	ldrb	r3, [r3, #9]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	621a      	str	r2, [r3, #32]

			// Y escribimos el valor configurado en la posicion seleccionada
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
} //Fin del GPIO_Config
 8002a8c:	e01f      	b.n	8002ace <GPIO_Config+0x22a>
			auxPosition = 4* (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber -8);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	791b      	ldrb	r3, [r3, #4]
 8002a92:	3b08      	subs	r3, #8
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	400a      	ands	r2, r1
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7a5b      	ldrb	r3, [r3, #9]
 8002abc:	4619      	mov	r1, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
} //Fin del GPIO_Config
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	40020c00 	.word	0x40020c00
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40021c00 	.word	0x40021c00

08002af4 <GPIO_WritePin>:
/**
 * Funcion utilizada para cambiar de estado el pin entregado en el handler, asignando
 * el valor entregado en la variable newState
 *
 */
void GPIO_WritePin(GPIO_Handler_t *pPinHandler, uint8_t newState){
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->0DR &= ~(SET << pPinHandler ->GPIO_PinConfig.GPIO_PinNumber);
	if(newState == SET){
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10d      	bne.n	8002b22 <GPIO_WritePin+0x2e>
		// Trabajando con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	791b      	ldrb	r3, [r3, #4]
 8002b10:	4619      	mov	r1, r3
 8002b12:	2301      	movs	r3, #1
 8002b14:	408b      	lsls	r3, r1
 8002b16:	4619      	mov	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	619a      	str	r2, [r3, #24]
	else{
		//Trabajando con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
	}

}
 8002b20:	e00d      	b.n	8002b3e <GPIO_WritePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET << (pPinHandler->GPIO_PinConfig.GPIO_PinNumber + 16));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	791b      	ldrb	r3, [r3, #4]
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	2101      	movs	r1, #1
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	4619      	mov	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <GPIOxTooglePin>:
	pinValue &= mask;

	return pinValue;
}

void GPIOxTooglePin(GPIO_Handler_t *pPinHandler){
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR ^= (SET <<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	408b      	lsls	r3, r1
 8002b60:	4619      	mov	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	404a      	eors	r2, r1
 8002b68:	615a      	str	r2, [r3, #20]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <pwm_Config>:
 *      Author: namontoy
 */
#include "PwmDriver.h"

/**/
void pwm_Config(PWM_Handler_t *ptrPwmHandler){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

	/* 1. Activar la señal de reloj del periférico requerido */
	if(ptrPwmHandler->ptrTIMx == TIM2){
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d106      	bne.n	8002b94 <pwm_Config+0x20>
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002b86:	4b95      	ldr	r3, [pc, #596]	; (8002ddc <pwm_Config+0x268>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a94      	ldr	r2, [pc, #592]	; (8002ddc <pwm_Config+0x268>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	e024      	b.n	8002bde <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM3){
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a91      	ldr	r2, [pc, #580]	; (8002de0 <pwm_Config+0x26c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d106      	bne.n	8002bac <pwm_Config+0x38>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002b9e:	4b8f      	ldr	r3, [pc, #572]	; (8002ddc <pwm_Config+0x268>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a8e      	ldr	r2, [pc, #568]	; (8002ddc <pwm_Config+0x268>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	e018      	b.n	8002bde <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM4){
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a8c      	ldr	r2, [pc, #560]	; (8002de4 <pwm_Config+0x270>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d106      	bne.n	8002bc4 <pwm_Config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002bb6:	4b89      	ldr	r3, [pc, #548]	; (8002ddc <pwm_Config+0x268>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a88      	ldr	r2, [pc, #544]	; (8002ddc <pwm_Config+0x268>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	e00c      	b.n	8002bde <pwm_Config+0x6a>
	}
	else if(ptrPwmHandler->ptrTIMx == TIM5){
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a87      	ldr	r2, [pc, #540]	; (8002de8 <pwm_Config+0x274>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d106      	bne.n	8002bdc <pwm_Config+0x68>
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002bce:	4b83      	ldr	r3, [pc, #524]	; (8002ddc <pwm_Config+0x268>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	4a82      	ldr	r2, [pc, #520]	; (8002ddc <pwm_Config+0x268>)
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bda:	e000      	b.n	8002bde <pwm_Config+0x6a>
	}
	else{
		__NOP();
 8002bdc:	bf00      	nop
	}

	/* 1. Cargamos la frecuencia deseada */
	setFrequency(ptrPwmHandler);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f954 	bl	8002e8c <setFrequency>

	/* 2. Cargamos el valor del dutty-Cycle*/
	setDuttyCycle(ptrPwmHandler);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f969 	bl	8002ebc <setDuttyCycle>

	/* 2a. Estamos en UP_Mode, el limite se carga en ARR y se comienza en 0 */
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_DIR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0210 	bic.w	r2, r2, #16
 8002bf8:	601a      	str	r2, [r3, #0]

	/* 3b. Configuramos el Auto-reload. Este es el "limite" hasta donde el CNT va a contar */
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo - 1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	899b      	ldrh	r3, [r3, #12]
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	62da      	str	r2, [r3, #44]	; 0x2c

	/* 3c. Reiniciamos el registro counter*/

	ptrPwmHandler->ptrTIMx->CNT = 0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
	 *
	 * 4. Además, en el mismo "case" podemos configurar el modo del PWM, su polaridad...
	 *
	 * 5. Y además activamos el preload bit, para que cada vez que exista un update-event
	 * el valor cargado en el CCRx será recargado en el registro "shadow" del PWM */
	switch(ptrPwmHandler->config.channel){
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	791b      	ldrb	r3, [r3, #4]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	f200 80dc 	bhi.w	8002dd0 <pwm_Config+0x25c>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <pwm_Config+0xac>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c99 	.word	0x08002c99
 8002c28:	08002d01 	.word	0x08002d01
 8002c2c:	08002d69 	.word	0x08002d69
	case PWM_CHANNEL_1:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S_0;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S_1;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0202 	bic.w	r2, r2, #2
 8002c4e:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0210 	bic.w	r2, r2, #16
 8002c5e:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0220 	orr.w	r2, r2, #32
 8002c6e:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1M_2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7e:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0208 	orr.w	r2, r2, #8
 8002c8e:	619a      	str	r2, [r3, #24]

		enableOutput(ptrPwmHandler);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f8bd 	bl	8002e10 <enableOutput>

		break;
 8002c96:	e09c      	b.n	8002dd2 <pwm_Config+0x25e>
	}

	case PWM_CHANNEL_2:{
		// Seleccionamos como salida el canal
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S_0;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S_1;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0202 	bic.w	r2, r2, #2
 8002cb6:	619a      	str	r2, [r3, #24]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cc6:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_1;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd6:	619a      	str	r2, [r3, #24]
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2M_2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce6:	619a      	str	r2, [r3, #24]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cf6:	619a      	str	r2, [r3, #24]

		enableOutput(ptrPwmHandler);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f889 	bl	8002e10 <enableOutput>
		break;
 8002cfe:	e068      	b.n	8002dd2 <pwm_Config+0x25e>
	}

	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S_0;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S_1;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0202 	bic.w	r2, r2, #2
 8002d1e:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0210 	bic.w	r2, r2, #16
 8002d2e:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_1;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0220 	orr.w	r2, r2, #32
 8002d3e:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3M_2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4e:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69da      	ldr	r2, [r3, #28]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0208 	orr.w	r2, r2, #8
 8002d5e:	61da      	str	r2, [r3, #28]

		enableOutput(ptrPwmHandler);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f855 	bl	8002e10 <enableOutput>
		break;
 8002d66:	e034      	b.n	8002dd2 <pwm_Config+0x25e>

	}
	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S_0;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d76:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S_1;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0202 	bic.w	r2, r2, #2
 8002d86:	61da      	str	r2, [r3, #28]

		// Configuramos el canal como PWM
		ptrPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d96:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_1;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da6:	61da      	str	r2, [r3, #28]
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4M_2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db6:	61da      	str	r2, [r3, #28]

		// Activamos la funcionalidad de pre-load
		ptrPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc6:	61da      	str	r2, [r3, #28]
		enableOutput(ptrPwmHandler);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f821 	bl	8002e10 <enableOutput>



		break;
 8002dce:	e000      	b.n	8002dd2 <pwm_Config+0x25e>
	}


	default:{
		break;
 8002dd0:	bf00      	nop
	}
	}// fin del switch-case
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800
 8002de8:	40000c00 	.word	0x40000c00

08002dec <startPwmSignal>:

/* Función para activar el Timer y activar todo el módulo PWM */
void startPwmSignal(PWM_Handler_t *ptrPwmHandler) {
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	ptrPwmHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
	...

08002e10 <enableOutput>:
void stopPwmSignal(PWM_Handler_t *ptrPwmHandler) {
	ptrPwmHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
}

/* Función encargada de activar cada uno de los canales con los que cuenta el TimerX */
void enableOutput(PWM_Handler_t *ptrPwmHandler) {
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	switch (ptrPwmHandler->config.channel) {
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	791b      	ldrb	r3, [r3, #4]
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d82f      	bhi.n	8002e80 <enableOutput+0x70>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <enableOutput+0x18>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e4b 	.word	0x08002e4b
 8002e30:	08002e5d 	.word	0x08002e5d
 8002e34:	08002e6f 	.word	0x08002e6f
	case PWM_CHANNEL_1: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	621a      	str	r2, [r3, #32]
		break;
 8002e48:	e01b      	b.n	8002e82 <enableOutput+0x72>
	}
	case PWM_CHANNEL_2: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a1a      	ldr	r2, [r3, #32]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0210 	orr.w	r2, r2, #16
 8002e58:	621a      	str	r2, [r3, #32]
		break;
 8002e5a:	e012      	b.n	8002e82 <enableOutput+0x72>
	}
	case PWM_CHANNEL_3: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a1a      	ldr	r2, [r3, #32]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6a:	621a      	str	r2, [r3, #32]
		break;
 8002e6c:	e009      	b.n	8002e82 <enableOutput+0x72>
	}
	case PWM_CHANNEL_4: {
		// Activamos la salida del canal 1
		ptrPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e7c:	621a      	str	r2, [r3, #32]
		break;
 8002e7e:	e000      	b.n	8002e82 <enableOutput+0x72>
	}


	default: {
		break;
 8002e80:	bf00      	nop
	}
	}
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <setFrequency>:
/* 
 * La frecuencia es definida por el conjunto formado por el preescaler (PSC)
 * y el valor límite al que llega el Timer (ARR), con estos dos se establece
 * la frecuencia.
 * */
void setFrequency(PWM_Handler_t *ptrPwmHandler){
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

	// Cargamos el valor del prescaler, nos define la velocidad (en ns) a la cual
	// se incrementa el Timer
	ptrPwmHandler->ptrTIMx->PSC |= ptrPwmHandler->config.prescaler;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28

	// Cargamos el valor del ARR, el cual es el límite de incrementos del Timer
	// antes de hacer un update y reload.
	ptrPwmHandler->ptrTIMx->ARR = ptrPwmHandler->config.periodo - 1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	899b      	ldrh	r3, [r3, #12]
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <setDuttyCycle>:
    setFrequency(ptrPwmHandler);

}

/* El valor del dutty debe estar dado en valores de %, entre 0% y 100%*/
void setDuttyCycle(PWM_Handler_t *ptrPwmHandler){
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

	// Seleccionamos el canal para configurar su dutty
	switch(ptrPwmHandler->config.channel){
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	791b      	ldrb	r3, [r3, #4]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d827      	bhi.n	8002f1c <setDuttyCycle+0x60>
 8002ecc:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <setDuttyCycle+0x18>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002ef3 	.word	0x08002ef3
 8002edc:	08002f01 	.word	0x08002f01
 8002ee0:	08002f0f 	.word	0x08002f0f
	case PWM_CHANNEL_1:{
		ptrPwmHandler->ptrTIMx->CCR1 = ptrPwmHandler->config.duttyCicle - 1;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	89db      	ldrh	r3, [r3, #14]
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34

		break;
 8002ef0:	e015      	b.n	8002f1e <setDuttyCycle+0x62>
	}
	case PWM_CHANNEL_2:{
		ptrPwmHandler->ptrTIMx->CCR2 = ptrPwmHandler->config.duttyCicle - 1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	89db      	ldrh	r3, [r3, #14]
 8002ef6:	1e5a      	subs	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38

		break;
 8002efe:	e00e      	b.n	8002f1e <setDuttyCycle+0x62>
	}
	case PWM_CHANNEL_3:{
		ptrPwmHandler->ptrTIMx->CCR3 = ptrPwmHandler->config.duttyCicle - 1;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	89db      	ldrh	r3, [r3, #14]
 8002f04:	1e5a      	subs	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	63da      	str	r2, [r3, #60]	; 0x3c

		break;
 8002f0c:	e007      	b.n	8002f1e <setDuttyCycle+0x62>
	}
	case PWM_CHANNEL_4:{
		ptrPwmHandler->ptrTIMx->CCR4 = ptrPwmHandler->config.duttyCicle -1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	89db      	ldrh	r3, [r3, #14]
 8002f12:	1e5a      	subs	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

		break;
 8002f1a:	e000      	b.n	8002f1e <setDuttyCycle+0x62>
	}

	default:{
		break;
 8002f1c:	bf00      	nop
	}

	}// fin del switch-case

}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <spi_config>:
 *
 */

#include "SpiDriver.h"

void spi_config(SPI_Handler_t ptrHandlerSPI){
 8002f28:	b084      	sub	sp, #16
 8002f2a:	b490      	push	{r4, r7}
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	f107 0408 	add.w	r4, r7, #8
 8002f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*1. Activamos la señal de reloj del periferico*/
	if(ptrHandlerSPI.ptrSPIx == SPI1){
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4a6b      	ldr	r2, [pc, #428]	; (80030e8 <spi_config+0x1c0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d106      	bne.n	8002f4c <spi_config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002f3e:	4b6b      	ldr	r3, [pc, #428]	; (80030ec <spi_config+0x1c4>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a6a      	ldr	r2, [pc, #424]	; (80030ec <spi_config+0x1c4>)
 8002f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	e02a      	b.n	8002fa2 <spi_config+0x7a>
	}
	else if(ptrHandlerSPI.ptrSPIx == SPI2){
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4a68      	ldr	r2, [pc, #416]	; (80030f0 <spi_config+0x1c8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d106      	bne.n	8002f62 <spi_config+0x3a>
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002f54:	4b65      	ldr	r3, [pc, #404]	; (80030ec <spi_config+0x1c4>)
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	4a64      	ldr	r2, [pc, #400]	; (80030ec <spi_config+0x1c4>)
 8002f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f60:	e01f      	b.n	8002fa2 <spi_config+0x7a>
	}
	else if(ptrHandlerSPI.ptrSPIx == SPI3){
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4a63      	ldr	r2, [pc, #396]	; (80030f4 <spi_config+0x1cc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d106      	bne.n	8002f78 <spi_config+0x50>
		RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8002f6a:	4b60      	ldr	r3, [pc, #384]	; (80030ec <spi_config+0x1c4>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a5f      	ldr	r2, [pc, #380]	; (80030ec <spi_config+0x1c4>)
 8002f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	e014      	b.n	8002fa2 <spi_config+0x7a>
	}
	else if(ptrHandlerSPI.ptrSPIx == SPI4){
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4a5f      	ldr	r2, [pc, #380]	; (80030f8 <spi_config+0x1d0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d106      	bne.n	8002f8e <spi_config+0x66>
		RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8002f80:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <spi_config+0x1c4>)
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	4a59      	ldr	r2, [pc, #356]	; (80030ec <spi_config+0x1c4>)
 8002f86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f8a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8c:	e009      	b.n	8002fa2 <spi_config+0x7a>
	}
	else if(ptrHandlerSPI.ptrSPIx == SPI5){
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4a5a      	ldr	r2, [pc, #360]	; (80030fc <spi_config+0x1d4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d105      	bne.n	8002fa2 <spi_config+0x7a>
		RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 8002f96:	4b55      	ldr	r3, [pc, #340]	; (80030ec <spi_config+0x1c4>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	4a54      	ldr	r2, [pc, #336]	; (80030ec <spi_config+0x1c4>)
 8002f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fa0:	6453      	str	r3, [r2, #68]	; 0x44
	}

	/*2. Limpiamos el registro de configuracion para comenzar de cero */
	ptrHandlerSPI.ptrSPIx->CR1 = 0x00;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

	/*3. Configuramos la velocidad a la que se maneja el reloj del SPI */
	ptrHandlerSPI.ptrSPIx->CR1 |= (ptrHandlerSPI.SPI_Config.SPI_baudrate << SPI_CR1_BR_Pos);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	7b7b      	ldrb	r3, [r7, #13]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

	/*4. Configuramos el modo */
	switch(ptrHandlerSPI.SPI_Config.SPI_mode){
 8002fb8:	7b3b      	ldrb	r3, [r7, #12]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d83e      	bhi.n	800303c <spi_config+0x114>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <spi_config+0x9c>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fef 	.word	0x08002fef
 8002fcc:	08003009 	.word	0x08003009
 8002fd0:	08003023 	.word	0x08003023
	case 0:
		ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_CPHA;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
		ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_CPOL;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f022 0202 	bic.w	r2, r2, #2
 8002fea:	601a      	str	r2, [r3, #0]
		break;
 8002fec:	e032      	b.n	8003054 <spi_config+0x12c>
	case 1:
		ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_CPHA;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
		ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_CPOL;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f022 0202 	bic.w	r2, r2, #2
 8003004:	601a      	str	r2, [r3, #0]
		break;
 8003006:	e025      	b.n	8003054 <spi_config+0x12c>
	case 2:
		ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_CPHA;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
		ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_CPOL;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f042 0202 	orr.w	r2, r2, #2
 800301e:	601a      	str	r2, [r3, #0]
		break;
 8003020:	e018      	b.n	8003054 <spi_config+0x12c>
	case 3:
		ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_CPHA;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
		ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_CPOL;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f042 0202 	orr.w	r2, r2, #2
 8003038:	601a      	str	r2, [r3, #0]
		break;
 800303a:	e00b      	b.n	8003054 <spi_config+0x12c>
	default:
		// Configuramos el mode 00 como caso por defecto
		ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_CPHA;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
		ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_CPOL;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f022 0202 	bic.w	r2, r2, #2
 8003052:	601a      	str	r2, [r3, #0]
	}
	/* 5. Configuramos si full Dupplex a solo recepcion */
	if(ptrHandlerSPI.SPI_Config.SPI_fullDupplexEnable == SPI_FULL_DUPPLEX){
 8003054:	7bbb      	ldrb	r3, [r7, #14]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10c      	bne.n	8003074 <spi_config+0x14c>
		//Selecciona full dupplex
		ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_RXONLY;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003064:	601a      	str	r2, [r3, #0]
		//Selecciona modo unidireccional (cada linea solo tiene una direccion)
		ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_BIDIMODE;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e005      	b.n	8003080 <spi_config+0x158>
	}
	else{
		//Selecciona solo RX activado
		ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_RXONLY;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800307e:	601a      	str	r2, [r3, #0]
	}
	/* 6. Modo de transferencia en MSB-First */
	ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_LSBFIRST;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800308a:	601a      	str	r2, [r3, #0]

	/* 7. Activamos para que el equipo se comporte como el maestro de la red */
	ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_MSTR;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f042 0204 	orr.w	r2, r2, #4
 8003096:	601a      	str	r2, [r3, #0]

	/* 8. configuramos el formato del dato (tamaño) para que sea de 8 bit */
	if(ptrHandlerSPI.SPI_Config.SPI_datasize == SPI_DATASIZE_8_BIT){
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <spi_config+0x184>
		//fram de datos de 8 bit
		ptrHandlerSPI.ptrSPIx->CR1 &= ~SPI_CR1_DFF;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e005      	b.n	80030b8 <spi_config+0x190>
	}
	else{
		//fram de datos de 16 bit
		ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_DFF;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b6:	601a      	str	r2, [r3, #0]
	}
	/*9. Configuramos para que el control del pin SS (seleccion del salve
	 * 	 sea controlado por software (nosotros debemos hacer ese control),
	 * 	 de la otra forma, sera el hardware el que controla la selccion del slave
	 */
	ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_SSM;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c2:	601a      	str	r2, [r3, #0]
	ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_SSI;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ce:	601a      	str	r2, [r3, #0]

	/* 10. Activamos el periferico SPI */
	ptrHandlerSPI.ptrSPIx->CR1 |= SPI_CR1_SPE;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030da:	601a      	str	r2, [r3, #0]

}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc90      	pop	{r4, r7}
 80030e2:	b004      	add	sp, #16
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40013000 	.word	0x40013000
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40003800 	.word	0x40003800
 80030f4:	40003c00 	.word	0x40003c00
 80030f8:	40013400 	.word	0x40013400
 80030fc:	40015000 	.word	0x40015000

08003100 <spi_transmit>:


void spi_transmit(SPI_Handler_t ptrHandlerSPI, uint8_t *ptrData, uint32_t dataSize){
 8003100:	b084      	sub	sp, #16
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	f107 0c10 	add.w	ip, r7, #16
 800310c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t auxData;
	(void) auxData;

	while(dataSize >0 ){
 8003110:	e010      	b.n	8003134 <spi_transmit+0x34>

		//Esperamos a que el buffer este vacio
		while(!(ptrHandlerSPI.ptrSPIx->SR & SPI_SR_TXE)){
			__NOP();
 8003112:	bf00      	nop
		while(!(ptrHandlerSPI.ptrSPIx->SR & SPI_SR_TXE)){
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f8      	beq.n	8003112 <spi_transmit+0x12>
		}

		// Enviamos el dato al que apunta el puntero
		ptrHandlerSPI.ptrSPIx->DR = (uint8_t) (0xFF & *ptrData);
 8003120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003122:	781a      	ldrb	r2, [r3, #0]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	60da      	str	r2, [r3, #12]

		//Actualizamos el puntero y el numero de datos que faltan por enviar
		ptrData++;
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	3301      	adds	r3, #1
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
		dataSize--;
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	3b01      	subs	r3, #1
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(dataSize >0 ){
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ec      	bne.n	8003114 <spi_transmit+0x14>
	}
	//Esperamos de nuevo a que el buffer este vacio
	while(!(ptrHandlerSPI.ptrSPIx->SR & SPI_SR_TXE)){
 800313a:	e000      	b.n	800313e <spi_transmit+0x3e>
		__NOP();
 800313c:	bf00      	nop
	while(!(ptrHandlerSPI.ptrSPIx->SR & SPI_SR_TXE)){
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f8      	beq.n	800313c <spi_transmit+0x3c>
	}

	//Esperamos a que la bandera de ocupado baje (observar que la logica cambia)
	while((ptrHandlerSPI.ptrSPIx->SR & SPI_SR_BSY)){
 800314a:	e000      	b.n	800314e <spi_transmit+0x4e>
		__NOP();
 800314c:	bf00      	nop
	while((ptrHandlerSPI.ptrSPIx->SR & SPI_SR_BSY)){
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f8      	bne.n	800314c <spi_transmit+0x4c>
	}

	/*Debemos limpiar la bandera de OverRun (que a veces se levanta).
	 * Para esto debemos leer el DR y luego leer el SR del modulo SPI PAG 599
	 */
	auxData = ptrHandlerSPI.ptrSPIx->DR;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	71fb      	strb	r3, [r7, #7]
	auxData = ptrHandlerSPI.ptrSPIx->SR;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	71fb      	strb	r3, [r7, #7]
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	b004      	add	sp, #16
 8003170:	4770      	bx	lr

08003172 <spi_selectSlave>:
		//Actualizamos el puntero y el tamaño de los datos
		ptrData++;
		dataSize--;
	}
}
void spi_selectSlave(SPI_Handler_t *ptrHandlerSPI){
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
	GPIO_WritePin(&ptrHandlerSPI->SPI_slavePin, RESET);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	330c      	adds	r3, #12
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fcb7 	bl	8002af4 <GPIO_WritePin>
	//GPIOA->BSRR |= (SET << 9)
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <spi_unSelectSlave>:
void spi_unSelectSlave(SPI_Handler_t *ptrHandlerSPI){
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
	GPIO_WritePin(&ptrHandlerSPI->SPI_slavePin, SET);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	330c      	adds	r3, #12
 800319a:	2101      	movs	r1, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fca9 	bl	8002af4 <GPIO_WritePin>
	//GPIOA->BSRR |= (SET << 9)
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <__NVIC_EnableIRQ>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	db0b      	blt.n	80031d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4906      	ldr	r1, [pc, #24]	; (80031e0 <__NVIC_EnableIRQ+0x34>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2001      	movs	r0, #1
 80031ce:	fa00 f202 	lsl.w	r2, r0, r2
 80031d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <USART_Config>:
 */

uint8_t auxRxData = 0;


void USART_Config(USART_Handler_t *ptrUsartHandler){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80031ec:	b672      	cpsid	i
}
 80031ee:	bf00      	nop
	__disable_irq();

	/* 1. Activamos la señal de reloj que viene desde el BUS al que pertenece el periferico */
	/* Lo debemos hacer para cada uno de las pisbles opciones que tengamos (USART1, USART2, USART6) */
    /* 1.1 Configuramos el USART1 */
	if(ptrUsartHandler->ptrUSARTx == USART1){
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a94      	ldr	r2, [pc, #592]	; (8003448 <USART_Config+0x264>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d106      	bne.n	8003208 <USART_Config+0x24>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80031fa:	4b94      	ldr	r3, [pc, #592]	; (800344c <USART_Config+0x268>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	4a93      	ldr	r2, [pc, #588]	; (800344c <USART_Config+0x268>)
 8003200:	f043 0310 	orr.w	r3, r3, #16
 8003204:	6453      	str	r3, [r2, #68]	; 0x44
 8003206:	e016      	b.n	8003236 <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART6){
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a90      	ldr	r2, [pc, #576]	; (8003450 <USART_Config+0x26c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d106      	bne.n	8003220 <USART_Config+0x3c>
		/* 1.2 Configuramos el USART6 */
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 8003212:	4b8e      	ldr	r3, [pc, #568]	; (800344c <USART_Config+0x268>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	4a8d      	ldr	r2, [pc, #564]	; (800344c <USART_Config+0x268>)
 8003218:	f043 0320 	orr.w	r3, r3, #32
 800321c:	6453      	str	r3, [r2, #68]	; 0x44
 800321e:	e00a      	b.n	8003236 <USART_Config+0x52>
	}else if(ptrUsartHandler->ptrUSARTx == USART2){
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a8b      	ldr	r2, [pc, #556]	; (8003454 <USART_Config+0x270>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d105      	bne.n	8003236 <USART_Config+0x52>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800322a:	4b88      	ldr	r3, [pc, #544]	; (800344c <USART_Config+0x268>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a87      	ldr	r2, [pc, #540]	; (800344c <USART_Config+0x268>)
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configuracion del Baudrate (registro BRR) */
	/* Configuramos el modo: only TX, only RX, o RXTX */
	/* Por ultimo activamos el modulo USART cuando todo esta correctamente configurado */

	// 2.1 Comienzo por limpiar los registros, para cargar la configuración desde cero
	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]

	// 2.2 Configuracion del Parity:
	// Verificamos si el parity esta activado o no
    // Tenga cuidado, el parity hace parte del tamaño de los datos...
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE){
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	79db      	ldrb	r3, [r3, #7]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d025      	beq.n	800329a <USART_Config+0xb6>

		// Verificamos si se ha seleccionado ODD or EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_EVEN){
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	79db      	ldrb	r3, [r3, #7]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d110      	bne.n	8003278 <USART_Config+0x94>
			// Es even, entonces cargamos la configuracion adecuada
			ptrUsartHandler->ptrUSARTx->CR1 &= ~(USART_CR1_PS);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003264:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	e018      	b.n	80032aa <USART_Config+0xc6>
			
		}else{
			// Si es "else" significa que la paridad seleccionada es ODD, y cargamos esta configuracion
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	e007      	b.n	80032aa <USART_Config+0xc6>
		}
	}else{
		// Si llegamos aca, es porque no deseamos tener el parity-check
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a8:	60da      	str	r2, [r3, #12]
	}

	// 2.3 Configuramos el tamaño del dato
    if(ptrUsartHandler->USART_Config.USART_datasize ==USART_DATASIZE_8BIT){
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	799b      	ldrb	r3, [r3, #6]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d115      	bne.n	80032de <USART_Config+0xfa>

    	// Verificamos si se esta trabajando o no con paridad
    	if (ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_NONE){
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	79db      	ldrb	r3, [r3, #7]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d108      	bne.n	80032cc <USART_Config+0xe8>
    		// Deseamos trabajar con datos de 8 bits
    		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	e010      	b.n	80032ee <USART_Config+0x10a>
    	}
    	else{
    		// Si la partidad esta activada debemos agregar un bir adicional
    		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	e007      	b.n	80032ee <USART_Config+0x10a>
    	}
    }
    else{
    	// Se configura el tamaño del bit para 9 bits
    	ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032ec:	60da      	str	r2, [r3, #12]
    }

	// 2.4 Configuramos los stop bits (SFR USART_CR2)
	switch(ptrUsartHandler->USART_Config.USART_stopbits){
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7a1b      	ldrb	r3, [r3, #8]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d84e      	bhi.n	8003394 <USART_Config+0x1b0>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <USART_Config+0x118>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	0800332f 	.word	0x0800332f
 8003304:	08003351 	.word	0x08003351
 8003308:	08003373 	.word	0x08003373
	case USART_STOPBIT_1: {
		// Debemoscargar el valor 0b00 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800331a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800332a:	611a      	str	r2, [r3, #16]
		break;
 800332c:	e043      	b.n	80033b6 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_0_5: {
		// Debemoscargar el valor 0b01 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800333c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334c:	611a      	str	r2, [r3, #16]
		break;
 800334e:	e032      	b.n	80033b6 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_2: {
		// Debemoscargar el valor 0b10 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800335e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800336e:	611a      	str	r2, [r3, #16]
		break;
 8003370:	e021      	b.n	80033b6 <USART_Config+0x1d2>
	}
	case USART_STOPBIT_1_5: {
		// Debemoscargar el valor 0b11 en los dos bits de STOP
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_0);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003380:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (USART_CR2_STOP_1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003390:	611a      	str	r2, [r3, #16]
		break;
 8003392:	e010      	b.n	80033b6 <USART_Config+0x1d2>
	}
	default: {
		// En el casopor defecto seleccionamos 1 bit de parada
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_0);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033a2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(USART_CR2_STOP_1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b2:	611a      	str	r2, [r3, #16]
		break;
 80033b4:	bf00      	nop
	}
	}

	// 2.5 Configuracion del Baudrate (SFR USART_BRR)
	// Ver tabla de valores (Tabla 73), Frec = 16MHz, overr = 0;
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600){
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	795b      	ldrb	r3, [r3, #5]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <USART_Config+0x1e6>
		// El valor a cargar es 104.1875 -> Mantiza = 104,fraction = 0.1875
		// Mantiza = 104 = 0x68, fraction = 16 * 0.1875 = 3
		// Valor a cargar 0x0683
		// Configurando el Baudrate generator para una velocidad de 9600bps
		ptrUsartHandler->ptrUSARTx->BRR = 0x0683;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f240 6283 	movw	r2, #1667	; 0x683
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	e025      	b.n	8003416 <USART_Config+0x232>
	}

	else if (ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200) {
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	795b      	ldrb	r3, [r3, #5]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <USART_Config+0x1fa>
		// El valor a cargar es 52.0625 -> Mantiza = 52,fraction = 0.0625
		// Mantiza = 52 = 0x34, fraction = 16 * 0.1875 = 1
		ptrUsartHandler->ptrUSARTx->BRR=0x0341;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f240 3241 	movw	r2, #833	; 0x341
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	e01b      	b.n	8003416 <USART_Config+0x232>
	}

	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200){
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	795b      	ldrb	r3, [r3, #5]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d104      	bne.n	80033f0 <USART_Config+0x20c>
		// el valor a cargar es 8.6875 -> Mantiza=8, fraction=0.6875
		// Mantiza=8=0x8, fraction=0.6875*16=11=B
		ptrUsartHandler->ptrUSARTx->BRR=0x008B;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	228b      	movs	r2, #139	; 0x8b
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	e012      	b.n	8003416 <USART_Config+0x232>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_57600){
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	795b      	ldrb	r3, [r3, #5]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d105      	bne.n	8003404 <USART_Config+0x220>
		// El valor a cargar es 17.375 -> Mantiza = 17, fracción = 0.375
		// Mantiza = 17 = 0x11, fraccion = 16 * 0.375 = 6
		ptrUsartHandler->ptrUSARTx->BRR=0x0116;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f44f 728b 	mov.w	r2, #278	; 0x116
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	e008      	b.n	8003416 <USART_Config+0x232>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_CUSTOM){
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	795b      	ldrb	r3, [r3, #5]
 8003408:	2b04      	cmp	r3, #4
 800340a:	d104      	bne.n	8003416 <USART_Config+0x232>
		// El valor a cargar es 27.1267 -> Mantiza = 27, fraccion = 0.1267
		// Mantiza = 27 = 1b, fraccion = 16 * 0.1267 = 2
		ptrUsartHandler->ptrUSARTx->BRR=0x01b2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 8003414:	609a      	str	r2, [r3, #8]
	}

	// 2.6 Configuramos el modo: TX only, RX only, RXTX, disable
	switch(ptrUsartHandler->USART_Config.USART_mode){
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	791b      	ldrb	r3, [r3, #4]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d84f      	bhi.n	80034be <USART_Config+0x2da>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <USART_Config+0x240>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003435 	.word	0x08003435
 8003428:	08003459 	.word	0x08003459
 800342c:	0800346b 	.word	0x0800346b
 8003430:	0800348d 	.word	0x0800348d
	case USART_MODE_TX:
	{
		// Activamos la parte del sistema encargada de enviar
		ptrUsartHandler->ptrUSARTx->CR1 |=USART_CR1_TE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0208 	orr.w	r2, r2, #8
 8003442:	60da      	str	r2, [r3, #12]
		break;
 8003444:	e054      	b.n	80034f0 <USART_Config+0x30c>
 8003446:	bf00      	nop
 8003448:	40011000 	.word	0x40011000
 800344c:	40023800 	.word	0x40023800
 8003450:	40011400 	.word	0x40011400
 8003454:	40004400 	.word	0x40004400
	}
	case USART_MODE_RX:
	{
		// Activamos la parte del sistema encargada de recibir
		ptrUsartHandler->ptrUSARTx->CR1 |=USART_CR1_RE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0204 	orr.w	r2, r2, #4
 8003466:	60da      	str	r2, [r3, #12]
		break;
 8003468:	e042      	b.n	80034f0 <USART_Config+0x30c>
	}
	case USART_MODE_RXTX:
	{
		// Activamos ambas partes, tanto transmision como recepcion
		ptrUsartHandler->ptrUSARTx->CR1 |=USART_CR1_RE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0204 	orr.w	r2, r2, #4
 8003478:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |=USART_CR1_TE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0208 	orr.w	r2, r2, #8
 8003488:	60da      	str	r2, [r3, #12]
		break;
 800348a:	e031      	b.n	80034f0 <USART_Config+0x30c>
	}
	case USART_MODE_DISABLE:
	{
		// Desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &=~USART_CR1_RE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0204 	bic.w	r2, r2, #4
 800349a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &=~USART_CR1_TE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0208 	bic.w	r2, r2, #8
 80034aa:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ba:	60da      	str	r2, [r3, #12]
		break;
 80034bc:	e018      	b.n	80034f0 <USART_Config+0x30c>
	}
	
	default:
	{
		// Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0204 	bic.w	r2, r2, #4
 80034cc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &=~USART_CR1_TE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0208 	bic.w	r2, r2, #8
 80034dc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ec:	60da      	str	r2, [r3, #12]
		break;
 80034ee:	bf00      	nop
	}
	}

	//2.6 activamos el modulo serial
	if (ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	791b      	ldrb	r3, [r3, #4]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d007      	beq.n	8003508 <USART_Config+0x324>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003506:	60da      	str	r2, [r3, #12]
	}
	// verificamos la activacion de la interrupcion Rx
	if (ptrUsartHandler->ptrUSARTx == USART1){
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a27      	ldr	r2, [pc, #156]	; (80035ac <USART_Config+0x3c8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d03a      	beq.n	8003588 <USART_Config+0x3a4>
		// falta el usart 1
	}

	/* 1.2 Configuramos USART2 */
	else if (ptrUsartHandler->ptrUSARTx == USART2) {
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <USART_Config+0x3cc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d118      	bne.n	800354e <USART_Config+0x36a>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7a5b      	ldrb	r3, [r3, #9]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10b      	bne.n	800353c <USART_Config+0x358>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0220 	orr.w	r2, r2, #32
 8003532:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART2_IRQn);
 8003534:	2026      	movs	r0, #38	; 0x26
 8003536:	f7ff fe39 	bl	80031ac <__NVIC_EnableIRQ>
 800353a:	e025      	b.n	8003588 <USART_Config+0x3a4>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0220 	bic.w	r2, r2, #32
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	e01c      	b.n	8003588 <USART_Config+0x3a4>
		}
	}

	/* 1.3 Configuramos USART6 */
	else if (ptrUsartHandler->ptrUSARTx == USART6) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a18      	ldr	r2, [pc, #96]	; (80035b4 <USART_Config+0x3d0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d117      	bne.n	8003588 <USART_Config+0x3a4>
		if (ptrUsartHandler->USART_Config.USART_enableIntRX == USART_RX_INTERRUP_ENABLE) {
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7a5b      	ldrb	r3, [r3, #9]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10b      	bne.n	8003578 <USART_Config+0x394>
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0220 	orr.w	r2, r2, #32
 800356e:	60da      	str	r2, [r3, #12]
			NVIC_EnableIRQ(USART6_IRQn);
 8003570:	2047      	movs	r0, #71	; 0x47
 8003572:	f7ff fe1b 	bl	80031ac <__NVIC_EnableIRQ>
 8003576:	e007      	b.n	8003588 <USART_Config+0x3a4>
		} else {
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0220 	bic.w	r2, r2, #32
 8003586:	60da      	str	r2, [r3, #12]
		}
	}

	// 2.8 Activamos el modulo serial.
	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE){
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	791b      	ldrb	r3, [r3, #4]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d007      	beq.n	80035a0 <USART_Config+0x3bc>
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800359e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80035a0:	b662      	cpsie	i
}
 80035a2:	bf00      	nop
	}

	// Activamos las interrupciones globales
	__enable_irq();
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40011000 	.word	0x40011000
 80035b0:	40004400 	.word	0x40004400
 80035b4:	40011400 	.word	0x40011400

080035b8 <usart6Rx_Callback>:
	            the usart2Rx_Callback could be implemented in the main file
	   */
	__NOP();
}

__attribute__((weak)) void usart6Rx_Callback(void){
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
	  /* NOTE : This function should not be modified, when the callback is needed,
	            the usart6Rx_Callback could be implemented in the main file
	   */
	__NOP();
 80035bc:	bf00      	nop
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr

080035c6 <writeChar>:

/* funcion para escribir un solo char */
char writeChar(USART_Handler_t *ptrUsartHandler, char dataToSend ){
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	70fb      	strb	r3, [r7, #3]
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80035d2:	e000      	b.n	80035d6 <writeChar+0x10>
		__NOP();
 80035d4:	bf00      	nop
	while( !(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE)){
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f7      	beq.n	80035d4 <writeChar+0xe>
	}

	ptrUsartHandler->ptrUSARTx->DR = dataToSend;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	605a      	str	r2, [r3, #4]

	return dataToSend;
 80035ec:	78fb      	ldrb	r3, [r7, #3]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <writeMsg>:

// FUnción para escribir un mensaje
void writeMsg(USART_Handler_t *ptrUsartHandler, char *msgToSend){
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
	while(*msgToSend != '\0'){
 8003602:	e008      	b.n	8003616 <writeMsg+0x1e>
		writeChar(ptrUsartHandler, *msgToSend);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ffdb 	bl	80035c6 <writeChar>
		msgToSend++;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	603b      	str	r3, [r7, #0]
	while(*msgToSend != '\0'){
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f2      	bne.n	8003604 <writeMsg+0xc>
	}
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <getRxData>:

uint8_t getRxData(void){
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	return auxRxData;
 800362c:	4b02      	ldr	r3, [pc, #8]	; (8003638 <getRxData+0x10>)
 800362e:	781b      	ldrb	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	20000400 	.word	0x20000400

0800363c <USART2_IRQHandler>:

/*
 * Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART2_IRQHandler(void){
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART2->SR & USART_SR_RXNE){
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <USART2_IRQHandler+0x30>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00c      	beq.n	8003666 <USART2_IRQHandler+0x2a>
		USART2->SR &= ~USART_SR_RXNE;
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <USART2_IRQHandler+0x30>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a06      	ldr	r2, [pc, #24]	; (800366c <USART2_IRQHandler+0x30>)
 8003652:	f023 0320 	bic.w	r3, r3, #32
 8003656:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART2->DR;
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <USART2_IRQHandler+0x30>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b04      	ldr	r3, [pc, #16]	; (8003670 <USART2_IRQHandler+0x34>)
 8003660:	701a      	strb	r2, [r3, #0]
		usart2Rx_Callback();
 8003662:	f7fd fe1d 	bl	80012a0 <usart2Rx_Callback>
	}
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40004400 	.word	0x40004400
 8003670:	20000400 	.word	0x20000400

08003674 <USART6_IRQHandler>:

/*
 * Handler de la interrupción del USART
 * Acá deben estar todas las interrupciones asociadas: TX, RX, PE...
 */
void USART6_IRQHandler(void){
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
	// Evaluamos que la interrupción que se dio es por RX
	if(USART6->SR & USART_SR_RXNE){
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <USART6_IRQHandler+0x30>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00c      	beq.n	800369e <USART6_IRQHandler+0x2a>
		USART6->SR &= ~USART_SR_RXNE;
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <USART6_IRQHandler+0x30>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a06      	ldr	r2, [pc, #24]	; (80036a4 <USART6_IRQHandler+0x30>)
 800368a:	f023 0320 	bic.w	r3, r3, #32
 800368e:	6013      	str	r3, [r2, #0]
		auxRxData = (uint8_t) USART6->DR;
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <USART6_IRQHandler+0x30>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <USART6_IRQHandler+0x34>)
 8003698:	701a      	strb	r2, [r3, #0]
		usart6Rx_Callback();
 800369a:	f7ff ff8d 	bl	80035b8 <usart6Rx_Callback>
	}
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40011400 	.word	0x40011400
 80036a8:	20000400 	.word	0x20000400

080036ac <__errno>:
 80036ac:	4b01      	ldr	r3, [pc, #4]	; (80036b4 <__errno+0x8>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000040 	.word	0x20000040

080036b8 <__libc_init_array>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	4d0d      	ldr	r5, [pc, #52]	; (80036f0 <__libc_init_array+0x38>)
 80036bc:	4c0d      	ldr	r4, [pc, #52]	; (80036f4 <__libc_init_array+0x3c>)
 80036be:	1b64      	subs	r4, r4, r5
 80036c0:	10a4      	asrs	r4, r4, #2
 80036c2:	2600      	movs	r6, #0
 80036c4:	42a6      	cmp	r6, r4
 80036c6:	d109      	bne.n	80036dc <__libc_init_array+0x24>
 80036c8:	4d0b      	ldr	r5, [pc, #44]	; (80036f8 <__libc_init_array+0x40>)
 80036ca:	4c0c      	ldr	r4, [pc, #48]	; (80036fc <__libc_init_array+0x44>)
 80036cc:	f004 fc10 	bl	8007ef0 <_init>
 80036d0:	1b64      	subs	r4, r4, r5
 80036d2:	10a4      	asrs	r4, r4, #2
 80036d4:	2600      	movs	r6, #0
 80036d6:	42a6      	cmp	r6, r4
 80036d8:	d105      	bne.n	80036e6 <__libc_init_array+0x2e>
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e0:	4798      	blx	r3
 80036e2:	3601      	adds	r6, #1
 80036e4:	e7ee      	b.n	80036c4 <__libc_init_array+0xc>
 80036e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ea:	4798      	blx	r3
 80036ec:	3601      	adds	r6, #1
 80036ee:	e7f2      	b.n	80036d6 <__libc_init_array+0x1e>
 80036f0:	080083f4 	.word	0x080083f4
 80036f4:	080083f4 	.word	0x080083f4
 80036f8:	080083f4 	.word	0x080083f4
 80036fc:	080083f8 	.word	0x080083f8

08003700 <memset>:
 8003700:	4402      	add	r2, r0
 8003702:	4603      	mov	r3, r0
 8003704:	4293      	cmp	r3, r2
 8003706:	d100      	bne.n	800370a <memset+0xa>
 8003708:	4770      	bx	lr
 800370a:	f803 1b01 	strb.w	r1, [r3], #1
 800370e:	e7f9      	b.n	8003704 <memset+0x4>

08003710 <__cvt>:
 8003710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003714:	b088      	sub	sp, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	461f      	mov	r7, r3
 800371a:	4614      	mov	r4, r2
 800371c:	bfb8      	it	lt
 800371e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003722:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003724:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003726:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800372a:	bfb6      	itet	lt
 800372c:	461f      	movlt	r7, r3
 800372e:	2300      	movge	r3, #0
 8003730:	232d      	movlt	r3, #45	; 0x2d
 8003732:	7013      	strb	r3, [r2, #0]
 8003734:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003736:	f023 0820 	bic.w	r8, r3, #32
 800373a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800373e:	d005      	beq.n	800374c <__cvt+0x3c>
 8003740:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003744:	d100      	bne.n	8003748 <__cvt+0x38>
 8003746:	3501      	adds	r5, #1
 8003748:	2302      	movs	r3, #2
 800374a:	e000      	b.n	800374e <__cvt+0x3e>
 800374c:	2303      	movs	r3, #3
 800374e:	aa07      	add	r2, sp, #28
 8003750:	9204      	str	r2, [sp, #16]
 8003752:	aa06      	add	r2, sp, #24
 8003754:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003758:	e9cd 3500 	strd	r3, r5, [sp]
 800375c:	4622      	mov	r2, r4
 800375e:	463b      	mov	r3, r7
 8003760:	f001 fd9a 	bl	8005298 <_dtoa_r>
 8003764:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003768:	4606      	mov	r6, r0
 800376a:	d102      	bne.n	8003772 <__cvt+0x62>
 800376c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800376e:	07db      	lsls	r3, r3, #31
 8003770:	d522      	bpl.n	80037b8 <__cvt+0xa8>
 8003772:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003776:	eb06 0905 	add.w	r9, r6, r5
 800377a:	d110      	bne.n	800379e <__cvt+0x8e>
 800377c:	7833      	ldrb	r3, [r6, #0]
 800377e:	2b30      	cmp	r3, #48	; 0x30
 8003780:	d10a      	bne.n	8003798 <__cvt+0x88>
 8003782:	2200      	movs	r2, #0
 8003784:	2300      	movs	r3, #0
 8003786:	4620      	mov	r0, r4
 8003788:	4639      	mov	r1, r7
 800378a:	f7fd f9a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800378e:	b918      	cbnz	r0, 8003798 <__cvt+0x88>
 8003790:	f1c5 0501 	rsb	r5, r5, #1
 8003794:	f8ca 5000 	str.w	r5, [sl]
 8003798:	f8da 3000 	ldr.w	r3, [sl]
 800379c:	4499      	add	r9, r3
 800379e:	2200      	movs	r2, #0
 80037a0:	2300      	movs	r3, #0
 80037a2:	4620      	mov	r0, r4
 80037a4:	4639      	mov	r1, r7
 80037a6:	f7fd f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80037aa:	b108      	cbz	r0, 80037b0 <__cvt+0xa0>
 80037ac:	f8cd 901c 	str.w	r9, [sp, #28]
 80037b0:	2230      	movs	r2, #48	; 0x30
 80037b2:	9b07      	ldr	r3, [sp, #28]
 80037b4:	454b      	cmp	r3, r9
 80037b6:	d307      	bcc.n	80037c8 <__cvt+0xb8>
 80037b8:	9b07      	ldr	r3, [sp, #28]
 80037ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80037bc:	1b9b      	subs	r3, r3, r6
 80037be:	4630      	mov	r0, r6
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	b008      	add	sp, #32
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c8:	1c59      	adds	r1, r3, #1
 80037ca:	9107      	str	r1, [sp, #28]
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e7f0      	b.n	80037b2 <__cvt+0xa2>

080037d0 <__exponent>:
 80037d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037d2:	4603      	mov	r3, r0
 80037d4:	2900      	cmp	r1, #0
 80037d6:	bfb8      	it	lt
 80037d8:	4249      	neglt	r1, r1
 80037da:	f803 2b02 	strb.w	r2, [r3], #2
 80037de:	bfb4      	ite	lt
 80037e0:	222d      	movlt	r2, #45	; 0x2d
 80037e2:	222b      	movge	r2, #43	; 0x2b
 80037e4:	2909      	cmp	r1, #9
 80037e6:	7042      	strb	r2, [r0, #1]
 80037e8:	dd2a      	ble.n	8003840 <__exponent+0x70>
 80037ea:	f10d 0407 	add.w	r4, sp, #7
 80037ee:	46a4      	mov	ip, r4
 80037f0:	270a      	movs	r7, #10
 80037f2:	46a6      	mov	lr, r4
 80037f4:	460a      	mov	r2, r1
 80037f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80037fa:	fb07 1516 	mls	r5, r7, r6, r1
 80037fe:	3530      	adds	r5, #48	; 0x30
 8003800:	2a63      	cmp	r2, #99	; 0x63
 8003802:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003806:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800380a:	4631      	mov	r1, r6
 800380c:	dcf1      	bgt.n	80037f2 <__exponent+0x22>
 800380e:	3130      	adds	r1, #48	; 0x30
 8003810:	f1ae 0502 	sub.w	r5, lr, #2
 8003814:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003818:	1c44      	adds	r4, r0, #1
 800381a:	4629      	mov	r1, r5
 800381c:	4561      	cmp	r1, ip
 800381e:	d30a      	bcc.n	8003836 <__exponent+0x66>
 8003820:	f10d 0209 	add.w	r2, sp, #9
 8003824:	eba2 020e 	sub.w	r2, r2, lr
 8003828:	4565      	cmp	r5, ip
 800382a:	bf88      	it	hi
 800382c:	2200      	movhi	r2, #0
 800382e:	4413      	add	r3, r2
 8003830:	1a18      	subs	r0, r3, r0
 8003832:	b003      	add	sp, #12
 8003834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800383a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800383e:	e7ed      	b.n	800381c <__exponent+0x4c>
 8003840:	2330      	movs	r3, #48	; 0x30
 8003842:	3130      	adds	r1, #48	; 0x30
 8003844:	7083      	strb	r3, [r0, #2]
 8003846:	70c1      	strb	r1, [r0, #3]
 8003848:	1d03      	adds	r3, r0, #4
 800384a:	e7f1      	b.n	8003830 <__exponent+0x60>

0800384c <_printf_float>:
 800384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003850:	b091      	sub	sp, #68	; 0x44
 8003852:	460c      	mov	r4, r1
 8003854:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003858:	4616      	mov	r6, r2
 800385a:	461f      	mov	r7, r3
 800385c:	4605      	mov	r5, r0
 800385e:	f002 fe6d 	bl	800653c <_localeconv_r>
 8003862:	6803      	ldr	r3, [r0, #0]
 8003864:	9309      	str	r3, [sp, #36]	; 0x24
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fcba 	bl	80001e0 <strlen>
 800386c:	2300      	movs	r3, #0
 800386e:	930e      	str	r3, [sp, #56]	; 0x38
 8003870:	f8d8 3000 	ldr.w	r3, [r8]
 8003874:	900a      	str	r0, [sp, #40]	; 0x28
 8003876:	3307      	adds	r3, #7
 8003878:	f023 0307 	bic.w	r3, r3, #7
 800387c:	f103 0208 	add.w	r2, r3, #8
 8003880:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003884:	f8d4 b000 	ldr.w	fp, [r4]
 8003888:	f8c8 2000 	str.w	r2, [r8]
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003894:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003898:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800389c:	930b      	str	r3, [sp, #44]	; 0x2c
 800389e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038a0:	4b9c      	ldr	r3, [pc, #624]	; (8003b14 <_printf_float+0x2c8>)
 80038a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038a6:	4640      	mov	r0, r8
 80038a8:	f7fd f948 	bl	8000b3c <__aeabi_dcmpun>
 80038ac:	bb70      	cbnz	r0, 800390c <_printf_float+0xc0>
 80038ae:	4b99      	ldr	r3, [pc, #612]	; (8003b14 <_printf_float+0x2c8>)
 80038b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038b6:	4640      	mov	r0, r8
 80038b8:	f7fd f922 	bl	8000b00 <__aeabi_dcmple>
 80038bc:	bb30      	cbnz	r0, 800390c <_printf_float+0xc0>
 80038be:	2200      	movs	r2, #0
 80038c0:	2300      	movs	r3, #0
 80038c2:	4640      	mov	r0, r8
 80038c4:	4651      	mov	r1, sl
 80038c6:	f7fd f911 	bl	8000aec <__aeabi_dcmplt>
 80038ca:	b110      	cbz	r0, 80038d2 <_printf_float+0x86>
 80038cc:	232d      	movs	r3, #45	; 0x2d
 80038ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d2:	4b91      	ldr	r3, [pc, #580]	; (8003b18 <_printf_float+0x2cc>)
 80038d4:	4891      	ldr	r0, [pc, #580]	; (8003b1c <_printf_float+0x2d0>)
 80038d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80038da:	bf94      	ite	ls
 80038dc:	4698      	movls	r8, r3
 80038de:	4680      	movhi	r8, r0
 80038e0:	2303      	movs	r3, #3
 80038e2:	6123      	str	r3, [r4, #16]
 80038e4:	f02b 0304 	bic.w	r3, fp, #4
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	f04f 0a00 	mov.w	sl, #0
 80038ee:	9700      	str	r7, [sp, #0]
 80038f0:	4633      	mov	r3, r6
 80038f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80038f4:	4621      	mov	r1, r4
 80038f6:	4628      	mov	r0, r5
 80038f8:	f000 f9d2 	bl	8003ca0 <_printf_common>
 80038fc:	3001      	adds	r0, #1
 80038fe:	f040 808f 	bne.w	8003a20 <_printf_float+0x1d4>
 8003902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003906:	b011      	add	sp, #68	; 0x44
 8003908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390c:	4642      	mov	r2, r8
 800390e:	4653      	mov	r3, sl
 8003910:	4640      	mov	r0, r8
 8003912:	4651      	mov	r1, sl
 8003914:	f7fd f912 	bl	8000b3c <__aeabi_dcmpun>
 8003918:	b140      	cbz	r0, 800392c <_printf_float+0xe0>
 800391a:	f1ba 0f00 	cmp.w	sl, #0
 800391e:	bfbc      	itt	lt
 8003920:	232d      	movlt	r3, #45	; 0x2d
 8003922:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003926:	487e      	ldr	r0, [pc, #504]	; (8003b20 <_printf_float+0x2d4>)
 8003928:	4b7e      	ldr	r3, [pc, #504]	; (8003b24 <_printf_float+0x2d8>)
 800392a:	e7d4      	b.n	80038d6 <_printf_float+0x8a>
 800392c:	6863      	ldr	r3, [r4, #4]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003934:	d142      	bne.n	80039bc <_printf_float+0x170>
 8003936:	2306      	movs	r3, #6
 8003938:	6063      	str	r3, [r4, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	9206      	str	r2, [sp, #24]
 800393e:	aa0e      	add	r2, sp, #56	; 0x38
 8003940:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003944:	aa0d      	add	r2, sp, #52	; 0x34
 8003946:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800394a:	9203      	str	r2, [sp, #12]
 800394c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003950:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003954:	6023      	str	r3, [r4, #0]
 8003956:	6863      	ldr	r3, [r4, #4]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	4642      	mov	r2, r8
 800395c:	4653      	mov	r3, sl
 800395e:	4628      	mov	r0, r5
 8003960:	910b      	str	r1, [sp, #44]	; 0x2c
 8003962:	f7ff fed5 	bl	8003710 <__cvt>
 8003966:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003968:	2947      	cmp	r1, #71	; 0x47
 800396a:	4680      	mov	r8, r0
 800396c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800396e:	d108      	bne.n	8003982 <_printf_float+0x136>
 8003970:	1cc8      	adds	r0, r1, #3
 8003972:	db02      	blt.n	800397a <_printf_float+0x12e>
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	4299      	cmp	r1, r3
 8003978:	dd40      	ble.n	80039fc <_printf_float+0x1b0>
 800397a:	f1a9 0902 	sub.w	r9, r9, #2
 800397e:	fa5f f989 	uxtb.w	r9, r9
 8003982:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003986:	d81f      	bhi.n	80039c8 <_printf_float+0x17c>
 8003988:	3901      	subs	r1, #1
 800398a:	464a      	mov	r2, r9
 800398c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003990:	910d      	str	r1, [sp, #52]	; 0x34
 8003992:	f7ff ff1d 	bl	80037d0 <__exponent>
 8003996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003998:	1813      	adds	r3, r2, r0
 800399a:	2a01      	cmp	r2, #1
 800399c:	4682      	mov	sl, r0
 800399e:	6123      	str	r3, [r4, #16]
 80039a0:	dc02      	bgt.n	80039a8 <_printf_float+0x15c>
 80039a2:	6822      	ldr	r2, [r4, #0]
 80039a4:	07d2      	lsls	r2, r2, #31
 80039a6:	d501      	bpl.n	80039ac <_printf_float+0x160>
 80039a8:	3301      	adds	r3, #1
 80039aa:	6123      	str	r3, [r4, #16]
 80039ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d09c      	beq.n	80038ee <_printf_float+0xa2>
 80039b4:	232d      	movs	r3, #45	; 0x2d
 80039b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ba:	e798      	b.n	80038ee <_printf_float+0xa2>
 80039bc:	2947      	cmp	r1, #71	; 0x47
 80039be:	d1bc      	bne.n	800393a <_printf_float+0xee>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ba      	bne.n	800393a <_printf_float+0xee>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e7b7      	b.n	8003938 <_printf_float+0xec>
 80039c8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80039cc:	d118      	bne.n	8003a00 <_printf_float+0x1b4>
 80039ce:	2900      	cmp	r1, #0
 80039d0:	6863      	ldr	r3, [r4, #4]
 80039d2:	dd0b      	ble.n	80039ec <_printf_float+0x1a0>
 80039d4:	6121      	str	r1, [r4, #16]
 80039d6:	b913      	cbnz	r3, 80039de <_printf_float+0x192>
 80039d8:	6822      	ldr	r2, [r4, #0]
 80039da:	07d0      	lsls	r0, r2, #31
 80039dc:	d502      	bpl.n	80039e4 <_printf_float+0x198>
 80039de:	3301      	adds	r3, #1
 80039e0:	440b      	add	r3, r1
 80039e2:	6123      	str	r3, [r4, #16]
 80039e4:	65a1      	str	r1, [r4, #88]	; 0x58
 80039e6:	f04f 0a00 	mov.w	sl, #0
 80039ea:	e7df      	b.n	80039ac <_printf_float+0x160>
 80039ec:	b913      	cbnz	r3, 80039f4 <_printf_float+0x1a8>
 80039ee:	6822      	ldr	r2, [r4, #0]
 80039f0:	07d2      	lsls	r2, r2, #31
 80039f2:	d501      	bpl.n	80039f8 <_printf_float+0x1ac>
 80039f4:	3302      	adds	r3, #2
 80039f6:	e7f4      	b.n	80039e2 <_printf_float+0x196>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e7f2      	b.n	80039e2 <_printf_float+0x196>
 80039fc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a02:	4299      	cmp	r1, r3
 8003a04:	db05      	blt.n	8003a12 <_printf_float+0x1c6>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	6121      	str	r1, [r4, #16]
 8003a0a:	07d8      	lsls	r0, r3, #31
 8003a0c:	d5ea      	bpl.n	80039e4 <_printf_float+0x198>
 8003a0e:	1c4b      	adds	r3, r1, #1
 8003a10:	e7e7      	b.n	80039e2 <_printf_float+0x196>
 8003a12:	2900      	cmp	r1, #0
 8003a14:	bfd4      	ite	le
 8003a16:	f1c1 0202 	rsble	r2, r1, #2
 8003a1a:	2201      	movgt	r2, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	e7e0      	b.n	80039e2 <_printf_float+0x196>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	055a      	lsls	r2, r3, #21
 8003a24:	d407      	bmi.n	8003a36 <_printf_float+0x1ea>
 8003a26:	6923      	ldr	r3, [r4, #16]
 8003a28:	4642      	mov	r2, r8
 8003a2a:	4631      	mov	r1, r6
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	47b8      	blx	r7
 8003a30:	3001      	adds	r0, #1
 8003a32:	d12b      	bne.n	8003a8c <_printf_float+0x240>
 8003a34:	e765      	b.n	8003902 <_printf_float+0xb6>
 8003a36:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a3a:	f240 80dc 	bls.w	8003bf6 <_printf_float+0x3aa>
 8003a3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a42:	2200      	movs	r2, #0
 8003a44:	2300      	movs	r3, #0
 8003a46:	f7fd f847 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d033      	beq.n	8003ab6 <_printf_float+0x26a>
 8003a4e:	4a36      	ldr	r2, [pc, #216]	; (8003b28 <_printf_float+0x2dc>)
 8003a50:	2301      	movs	r3, #1
 8003a52:	4631      	mov	r1, r6
 8003a54:	4628      	mov	r0, r5
 8003a56:	47b8      	blx	r7
 8003a58:	3001      	adds	r0, #1
 8003a5a:	f43f af52 	beq.w	8003902 <_printf_float+0xb6>
 8003a5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a62:	429a      	cmp	r2, r3
 8003a64:	db02      	blt.n	8003a6c <_printf_float+0x220>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	07d8      	lsls	r0, r3, #31
 8003a6a:	d50f      	bpl.n	8003a8c <_printf_float+0x240>
 8003a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a70:	4631      	mov	r1, r6
 8003a72:	4628      	mov	r0, r5
 8003a74:	47b8      	blx	r7
 8003a76:	3001      	adds	r0, #1
 8003a78:	f43f af43 	beq.w	8003902 <_printf_float+0xb6>
 8003a7c:	f04f 0800 	mov.w	r8, #0
 8003a80:	f104 091a 	add.w	r9, r4, #26
 8003a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a86:	3b01      	subs	r3, #1
 8003a88:	4543      	cmp	r3, r8
 8003a8a:	dc09      	bgt.n	8003aa0 <_printf_float+0x254>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	079b      	lsls	r3, r3, #30
 8003a90:	f100 8101 	bmi.w	8003c96 <_printf_float+0x44a>
 8003a94:	68e0      	ldr	r0, [r4, #12]
 8003a96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a98:	4298      	cmp	r0, r3
 8003a9a:	bfb8      	it	lt
 8003a9c:	4618      	movlt	r0, r3
 8003a9e:	e732      	b.n	8003906 <_printf_float+0xba>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	464a      	mov	r2, r9
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	47b8      	blx	r7
 8003aaa:	3001      	adds	r0, #1
 8003aac:	f43f af29 	beq.w	8003902 <_printf_float+0xb6>
 8003ab0:	f108 0801 	add.w	r8, r8, #1
 8003ab4:	e7e6      	b.n	8003a84 <_printf_float+0x238>
 8003ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	dc37      	bgt.n	8003b2c <_printf_float+0x2e0>
 8003abc:	4a1a      	ldr	r2, [pc, #104]	; (8003b28 <_printf_float+0x2dc>)
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4631      	mov	r1, r6
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	47b8      	blx	r7
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	f43f af1b 	beq.w	8003902 <_printf_float+0xb6>
 8003acc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d102      	bne.n	8003ada <_printf_float+0x28e>
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	07d9      	lsls	r1, r3, #31
 8003ad8:	d5d8      	bpl.n	8003a8c <_printf_float+0x240>
 8003ada:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b8      	blx	r7
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f43f af0c 	beq.w	8003902 <_printf_float+0xb6>
 8003aea:	f04f 0900 	mov.w	r9, #0
 8003aee:	f104 0a1a 	add.w	sl, r4, #26
 8003af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003af4:	425b      	negs	r3, r3
 8003af6:	454b      	cmp	r3, r9
 8003af8:	dc01      	bgt.n	8003afe <_printf_float+0x2b2>
 8003afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003afc:	e794      	b.n	8003a28 <_printf_float+0x1dc>
 8003afe:	2301      	movs	r3, #1
 8003b00:	4652      	mov	r2, sl
 8003b02:	4631      	mov	r1, r6
 8003b04:	4628      	mov	r0, r5
 8003b06:	47b8      	blx	r7
 8003b08:	3001      	adds	r0, #1
 8003b0a:	f43f aefa 	beq.w	8003902 <_printf_float+0xb6>
 8003b0e:	f109 0901 	add.w	r9, r9, #1
 8003b12:	e7ee      	b.n	8003af2 <_printf_float+0x2a6>
 8003b14:	7fefffff 	.word	0x7fefffff
 8003b18:	08007f3c 	.word	0x08007f3c
 8003b1c:	08007f40 	.word	0x08007f40
 8003b20:	08007f48 	.word	0x08007f48
 8003b24:	08007f44 	.word	0x08007f44
 8003b28:	08007f4c 	.word	0x08007f4c
 8003b2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b30:	429a      	cmp	r2, r3
 8003b32:	bfa8      	it	ge
 8003b34:	461a      	movge	r2, r3
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	4691      	mov	r9, r2
 8003b3a:	dc37      	bgt.n	8003bac <_printf_float+0x360>
 8003b3c:	f04f 0b00 	mov.w	fp, #0
 8003b40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b44:	f104 021a 	add.w	r2, r4, #26
 8003b48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003b4c:	ebaa 0309 	sub.w	r3, sl, r9
 8003b50:	455b      	cmp	r3, fp
 8003b52:	dc33      	bgt.n	8003bbc <_printf_float+0x370>
 8003b54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	db3b      	blt.n	8003bd4 <_printf_float+0x388>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	07da      	lsls	r2, r3, #31
 8003b60:	d438      	bmi.n	8003bd4 <_printf_float+0x388>
 8003b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b66:	eba2 030a 	sub.w	r3, r2, sl
 8003b6a:	eba2 0901 	sub.w	r9, r2, r1
 8003b6e:	4599      	cmp	r9, r3
 8003b70:	bfa8      	it	ge
 8003b72:	4699      	movge	r9, r3
 8003b74:	f1b9 0f00 	cmp.w	r9, #0
 8003b78:	dc34      	bgt.n	8003be4 <_printf_float+0x398>
 8003b7a:	f04f 0800 	mov.w	r8, #0
 8003b7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b82:	f104 0a1a 	add.w	sl, r4, #26
 8003b86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	eba3 0309 	sub.w	r3, r3, r9
 8003b90:	4543      	cmp	r3, r8
 8003b92:	f77f af7b 	ble.w	8003a8c <_printf_float+0x240>
 8003b96:	2301      	movs	r3, #1
 8003b98:	4652      	mov	r2, sl
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	47b8      	blx	r7
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	f43f aeae 	beq.w	8003902 <_printf_float+0xb6>
 8003ba6:	f108 0801 	add.w	r8, r8, #1
 8003baa:	e7ec      	b.n	8003b86 <_printf_float+0x33a>
 8003bac:	4613      	mov	r3, r2
 8003bae:	4631      	mov	r1, r6
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	47b8      	blx	r7
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	d1c0      	bne.n	8003b3c <_printf_float+0x2f0>
 8003bba:	e6a2      	b.n	8003902 <_printf_float+0xb6>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8003bc4:	47b8      	blx	r7
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f43f ae9b 	beq.w	8003902 <_printf_float+0xb6>
 8003bcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003bce:	f10b 0b01 	add.w	fp, fp, #1
 8003bd2:	e7b9      	b.n	8003b48 <_printf_float+0x2fc>
 8003bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bd8:	4631      	mov	r1, r6
 8003bda:	4628      	mov	r0, r5
 8003bdc:	47b8      	blx	r7
 8003bde:	3001      	adds	r0, #1
 8003be0:	d1bf      	bne.n	8003b62 <_printf_float+0x316>
 8003be2:	e68e      	b.n	8003902 <_printf_float+0xb6>
 8003be4:	464b      	mov	r3, r9
 8003be6:	eb08 020a 	add.w	r2, r8, sl
 8003bea:	4631      	mov	r1, r6
 8003bec:	4628      	mov	r0, r5
 8003bee:	47b8      	blx	r7
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	d1c2      	bne.n	8003b7a <_printf_float+0x32e>
 8003bf4:	e685      	b.n	8003902 <_printf_float+0xb6>
 8003bf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bf8:	2a01      	cmp	r2, #1
 8003bfa:	dc01      	bgt.n	8003c00 <_printf_float+0x3b4>
 8003bfc:	07db      	lsls	r3, r3, #31
 8003bfe:	d537      	bpl.n	8003c70 <_printf_float+0x424>
 8003c00:	2301      	movs	r3, #1
 8003c02:	4642      	mov	r2, r8
 8003c04:	4631      	mov	r1, r6
 8003c06:	4628      	mov	r0, r5
 8003c08:	47b8      	blx	r7
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	f43f ae79 	beq.w	8003902 <_printf_float+0xb6>
 8003c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c14:	4631      	mov	r1, r6
 8003c16:	4628      	mov	r0, r5
 8003c18:	47b8      	blx	r7
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	f43f ae71 	beq.w	8003902 <_printf_float+0xb6>
 8003c20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c24:	2200      	movs	r2, #0
 8003c26:	2300      	movs	r3, #0
 8003c28:	f7fc ff56 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c2c:	b9d8      	cbnz	r0, 8003c66 <_printf_float+0x41a>
 8003c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c30:	f108 0201 	add.w	r2, r8, #1
 8003c34:	3b01      	subs	r3, #1
 8003c36:	4631      	mov	r1, r6
 8003c38:	4628      	mov	r0, r5
 8003c3a:	47b8      	blx	r7
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d10e      	bne.n	8003c5e <_printf_float+0x412>
 8003c40:	e65f      	b.n	8003902 <_printf_float+0xb6>
 8003c42:	2301      	movs	r3, #1
 8003c44:	464a      	mov	r2, r9
 8003c46:	4631      	mov	r1, r6
 8003c48:	4628      	mov	r0, r5
 8003c4a:	47b8      	blx	r7
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	f43f ae58 	beq.w	8003902 <_printf_float+0xb6>
 8003c52:	f108 0801 	add.w	r8, r8, #1
 8003c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	4543      	cmp	r3, r8
 8003c5c:	dcf1      	bgt.n	8003c42 <_printf_float+0x3f6>
 8003c5e:	4653      	mov	r3, sl
 8003c60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c64:	e6e1      	b.n	8003a2a <_printf_float+0x1de>
 8003c66:	f04f 0800 	mov.w	r8, #0
 8003c6a:	f104 091a 	add.w	r9, r4, #26
 8003c6e:	e7f2      	b.n	8003c56 <_printf_float+0x40a>
 8003c70:	2301      	movs	r3, #1
 8003c72:	4642      	mov	r2, r8
 8003c74:	e7df      	b.n	8003c36 <_printf_float+0x3ea>
 8003c76:	2301      	movs	r3, #1
 8003c78:	464a      	mov	r2, r9
 8003c7a:	4631      	mov	r1, r6
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	47b8      	blx	r7
 8003c80:	3001      	adds	r0, #1
 8003c82:	f43f ae3e 	beq.w	8003902 <_printf_float+0xb6>
 8003c86:	f108 0801 	add.w	r8, r8, #1
 8003c8a:	68e3      	ldr	r3, [r4, #12]
 8003c8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003c8e:	1a5b      	subs	r3, r3, r1
 8003c90:	4543      	cmp	r3, r8
 8003c92:	dcf0      	bgt.n	8003c76 <_printf_float+0x42a>
 8003c94:	e6fe      	b.n	8003a94 <_printf_float+0x248>
 8003c96:	f04f 0800 	mov.w	r8, #0
 8003c9a:	f104 0919 	add.w	r9, r4, #25
 8003c9e:	e7f4      	b.n	8003c8a <_printf_float+0x43e>

08003ca0 <_printf_common>:
 8003ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	688a      	ldr	r2, [r1, #8]
 8003caa:	690b      	ldr	r3, [r1, #16]
 8003cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	bfb8      	it	lt
 8003cb4:	4613      	movlt	r3, r2
 8003cb6:	6033      	str	r3, [r6, #0]
 8003cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cbc:	4607      	mov	r7, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	b10a      	cbz	r2, 8003cc6 <_printf_common+0x26>
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	6033      	str	r3, [r6, #0]
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	0699      	lsls	r1, r3, #26
 8003cca:	bf42      	ittt	mi
 8003ccc:	6833      	ldrmi	r3, [r6, #0]
 8003cce:	3302      	addmi	r3, #2
 8003cd0:	6033      	strmi	r3, [r6, #0]
 8003cd2:	6825      	ldr	r5, [r4, #0]
 8003cd4:	f015 0506 	ands.w	r5, r5, #6
 8003cd8:	d106      	bne.n	8003ce8 <_printf_common+0x48>
 8003cda:	f104 0a19 	add.w	sl, r4, #25
 8003cde:	68e3      	ldr	r3, [r4, #12]
 8003ce0:	6832      	ldr	r2, [r6, #0]
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	42ab      	cmp	r3, r5
 8003ce6:	dc26      	bgt.n	8003d36 <_printf_common+0x96>
 8003ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cec:	1e13      	subs	r3, r2, #0
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	bf18      	it	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	0692      	lsls	r2, r2, #26
 8003cf6:	d42b      	bmi.n	8003d50 <_printf_common+0xb0>
 8003cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	4638      	mov	r0, r7
 8003d00:	47c0      	blx	r8
 8003d02:	3001      	adds	r0, #1
 8003d04:	d01e      	beq.n	8003d44 <_printf_common+0xa4>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	68e5      	ldr	r5, [r4, #12]
 8003d0a:	6832      	ldr	r2, [r6, #0]
 8003d0c:	f003 0306 	and.w	r3, r3, #6
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	bf08      	it	eq
 8003d14:	1aad      	subeq	r5, r5, r2
 8003d16:	68a3      	ldr	r3, [r4, #8]
 8003d18:	6922      	ldr	r2, [r4, #16]
 8003d1a:	bf0c      	ite	eq
 8003d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d20:	2500      	movne	r5, #0
 8003d22:	4293      	cmp	r3, r2
 8003d24:	bfc4      	itt	gt
 8003d26:	1a9b      	subgt	r3, r3, r2
 8003d28:	18ed      	addgt	r5, r5, r3
 8003d2a:	2600      	movs	r6, #0
 8003d2c:	341a      	adds	r4, #26
 8003d2e:	42b5      	cmp	r5, r6
 8003d30:	d11a      	bne.n	8003d68 <_printf_common+0xc8>
 8003d32:	2000      	movs	r0, #0
 8003d34:	e008      	b.n	8003d48 <_printf_common+0xa8>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4652      	mov	r2, sl
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	47c0      	blx	r8
 8003d40:	3001      	adds	r0, #1
 8003d42:	d103      	bne.n	8003d4c <_printf_common+0xac>
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4c:	3501      	adds	r5, #1
 8003d4e:	e7c6      	b.n	8003cde <_printf_common+0x3e>
 8003d50:	18e1      	adds	r1, r4, r3
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	2030      	movs	r0, #48	; 0x30
 8003d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d5a:	4422      	add	r2, r4
 8003d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d64:	3302      	adds	r3, #2
 8003d66:	e7c7      	b.n	8003cf8 <_printf_common+0x58>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	4638      	mov	r0, r7
 8003d70:	47c0      	blx	r8
 8003d72:	3001      	adds	r0, #1
 8003d74:	d0e6      	beq.n	8003d44 <_printf_common+0xa4>
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7d9      	b.n	8003d2e <_printf_common+0x8e>
	...

08003d7c <_printf_i>:
 8003d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	460c      	mov	r4, r1
 8003d82:	4691      	mov	r9, r2
 8003d84:	7e27      	ldrb	r7, [r4, #24]
 8003d86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d88:	2f78      	cmp	r7, #120	; 0x78
 8003d8a:	4680      	mov	r8, r0
 8003d8c:	469a      	mov	sl, r3
 8003d8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d92:	d807      	bhi.n	8003da4 <_printf_i+0x28>
 8003d94:	2f62      	cmp	r7, #98	; 0x62
 8003d96:	d80a      	bhi.n	8003dae <_printf_i+0x32>
 8003d98:	2f00      	cmp	r7, #0
 8003d9a:	f000 80d8 	beq.w	8003f4e <_printf_i+0x1d2>
 8003d9e:	2f58      	cmp	r7, #88	; 0x58
 8003da0:	f000 80a3 	beq.w	8003eea <_printf_i+0x16e>
 8003da4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dac:	e03a      	b.n	8003e24 <_printf_i+0xa8>
 8003dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003db2:	2b15      	cmp	r3, #21
 8003db4:	d8f6      	bhi.n	8003da4 <_printf_i+0x28>
 8003db6:	a001      	add	r0, pc, #4	; (adr r0, 8003dbc <_printf_i+0x40>)
 8003db8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003dbc:	08003e15 	.word	0x08003e15
 8003dc0:	08003e29 	.word	0x08003e29
 8003dc4:	08003da5 	.word	0x08003da5
 8003dc8:	08003da5 	.word	0x08003da5
 8003dcc:	08003da5 	.word	0x08003da5
 8003dd0:	08003da5 	.word	0x08003da5
 8003dd4:	08003e29 	.word	0x08003e29
 8003dd8:	08003da5 	.word	0x08003da5
 8003ddc:	08003da5 	.word	0x08003da5
 8003de0:	08003da5 	.word	0x08003da5
 8003de4:	08003da5 	.word	0x08003da5
 8003de8:	08003f35 	.word	0x08003f35
 8003dec:	08003e59 	.word	0x08003e59
 8003df0:	08003f17 	.word	0x08003f17
 8003df4:	08003da5 	.word	0x08003da5
 8003df8:	08003da5 	.word	0x08003da5
 8003dfc:	08003f57 	.word	0x08003f57
 8003e00:	08003da5 	.word	0x08003da5
 8003e04:	08003e59 	.word	0x08003e59
 8003e08:	08003da5 	.word	0x08003da5
 8003e0c:	08003da5 	.word	0x08003da5
 8003e10:	08003f1f 	.word	0x08003f1f
 8003e14:	680b      	ldr	r3, [r1, #0]
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	600a      	str	r2, [r1, #0]
 8003e1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0a3      	b.n	8003f70 <_printf_i+0x1f4>
 8003e28:	6825      	ldr	r5, [r4, #0]
 8003e2a:	6808      	ldr	r0, [r1, #0]
 8003e2c:	062e      	lsls	r6, r5, #24
 8003e2e:	f100 0304 	add.w	r3, r0, #4
 8003e32:	d50a      	bpl.n	8003e4a <_printf_i+0xce>
 8003e34:	6805      	ldr	r5, [r0, #0]
 8003e36:	600b      	str	r3, [r1, #0]
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	da03      	bge.n	8003e44 <_printf_i+0xc8>
 8003e3c:	232d      	movs	r3, #45	; 0x2d
 8003e3e:	426d      	negs	r5, r5
 8003e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e44:	485e      	ldr	r0, [pc, #376]	; (8003fc0 <_printf_i+0x244>)
 8003e46:	230a      	movs	r3, #10
 8003e48:	e019      	b.n	8003e7e <_printf_i+0x102>
 8003e4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e4e:	6805      	ldr	r5, [r0, #0]
 8003e50:	600b      	str	r3, [r1, #0]
 8003e52:	bf18      	it	ne
 8003e54:	b22d      	sxthne	r5, r5
 8003e56:	e7ef      	b.n	8003e38 <_printf_i+0xbc>
 8003e58:	680b      	ldr	r3, [r1, #0]
 8003e5a:	6825      	ldr	r5, [r4, #0]
 8003e5c:	1d18      	adds	r0, r3, #4
 8003e5e:	6008      	str	r0, [r1, #0]
 8003e60:	0628      	lsls	r0, r5, #24
 8003e62:	d501      	bpl.n	8003e68 <_printf_i+0xec>
 8003e64:	681d      	ldr	r5, [r3, #0]
 8003e66:	e002      	b.n	8003e6e <_printf_i+0xf2>
 8003e68:	0669      	lsls	r1, r5, #25
 8003e6a:	d5fb      	bpl.n	8003e64 <_printf_i+0xe8>
 8003e6c:	881d      	ldrh	r5, [r3, #0]
 8003e6e:	4854      	ldr	r0, [pc, #336]	; (8003fc0 <_printf_i+0x244>)
 8003e70:	2f6f      	cmp	r7, #111	; 0x6f
 8003e72:	bf0c      	ite	eq
 8003e74:	2308      	moveq	r3, #8
 8003e76:	230a      	movne	r3, #10
 8003e78:	2100      	movs	r1, #0
 8003e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e7e:	6866      	ldr	r6, [r4, #4]
 8003e80:	60a6      	str	r6, [r4, #8]
 8003e82:	2e00      	cmp	r6, #0
 8003e84:	bfa2      	ittt	ge
 8003e86:	6821      	ldrge	r1, [r4, #0]
 8003e88:	f021 0104 	bicge.w	r1, r1, #4
 8003e8c:	6021      	strge	r1, [r4, #0]
 8003e8e:	b90d      	cbnz	r5, 8003e94 <_printf_i+0x118>
 8003e90:	2e00      	cmp	r6, #0
 8003e92:	d04d      	beq.n	8003f30 <_printf_i+0x1b4>
 8003e94:	4616      	mov	r6, r2
 8003e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8003e9e:	5dc7      	ldrb	r7, [r0, r7]
 8003ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ea4:	462f      	mov	r7, r5
 8003ea6:	42bb      	cmp	r3, r7
 8003ea8:	460d      	mov	r5, r1
 8003eaa:	d9f4      	bls.n	8003e96 <_printf_i+0x11a>
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d10b      	bne.n	8003ec8 <_printf_i+0x14c>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	07df      	lsls	r7, r3, #31
 8003eb4:	d508      	bpl.n	8003ec8 <_printf_i+0x14c>
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	6861      	ldr	r1, [r4, #4]
 8003eba:	4299      	cmp	r1, r3
 8003ebc:	bfde      	ittt	le
 8003ebe:	2330      	movle	r3, #48	; 0x30
 8003ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ec4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003ec8:	1b92      	subs	r2, r2, r6
 8003eca:	6122      	str	r2, [r4, #16]
 8003ecc:	f8cd a000 	str.w	sl, [sp]
 8003ed0:	464b      	mov	r3, r9
 8003ed2:	aa03      	add	r2, sp, #12
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f7ff fee2 	bl	8003ca0 <_printf_common>
 8003edc:	3001      	adds	r0, #1
 8003ede:	d14c      	bne.n	8003f7a <_printf_i+0x1fe>
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee4:	b004      	add	sp, #16
 8003ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eea:	4835      	ldr	r0, [pc, #212]	; (8003fc0 <_printf_i+0x244>)
 8003eec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	680e      	ldr	r6, [r1, #0]
 8003ef4:	061f      	lsls	r7, r3, #24
 8003ef6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003efa:	600e      	str	r6, [r1, #0]
 8003efc:	d514      	bpl.n	8003f28 <_printf_i+0x1ac>
 8003efe:	07d9      	lsls	r1, r3, #31
 8003f00:	bf44      	itt	mi
 8003f02:	f043 0320 	orrmi.w	r3, r3, #32
 8003f06:	6023      	strmi	r3, [r4, #0]
 8003f08:	b91d      	cbnz	r5, 8003f12 <_printf_i+0x196>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	f023 0320 	bic.w	r3, r3, #32
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	2310      	movs	r3, #16
 8003f14:	e7b0      	b.n	8003e78 <_printf_i+0xfc>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f043 0320 	orr.w	r3, r3, #32
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	2378      	movs	r3, #120	; 0x78
 8003f20:	4828      	ldr	r0, [pc, #160]	; (8003fc4 <_printf_i+0x248>)
 8003f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f26:	e7e3      	b.n	8003ef0 <_printf_i+0x174>
 8003f28:	065e      	lsls	r6, r3, #25
 8003f2a:	bf48      	it	mi
 8003f2c:	b2ad      	uxthmi	r5, r5
 8003f2e:	e7e6      	b.n	8003efe <_printf_i+0x182>
 8003f30:	4616      	mov	r6, r2
 8003f32:	e7bb      	b.n	8003eac <_printf_i+0x130>
 8003f34:	680b      	ldr	r3, [r1, #0]
 8003f36:	6826      	ldr	r6, [r4, #0]
 8003f38:	6960      	ldr	r0, [r4, #20]
 8003f3a:	1d1d      	adds	r5, r3, #4
 8003f3c:	600d      	str	r5, [r1, #0]
 8003f3e:	0635      	lsls	r5, r6, #24
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	d501      	bpl.n	8003f48 <_printf_i+0x1cc>
 8003f44:	6018      	str	r0, [r3, #0]
 8003f46:	e002      	b.n	8003f4e <_printf_i+0x1d2>
 8003f48:	0671      	lsls	r1, r6, #25
 8003f4a:	d5fb      	bpl.n	8003f44 <_printf_i+0x1c8>
 8003f4c:	8018      	strh	r0, [r3, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6123      	str	r3, [r4, #16]
 8003f52:	4616      	mov	r6, r2
 8003f54:	e7ba      	b.n	8003ecc <_printf_i+0x150>
 8003f56:	680b      	ldr	r3, [r1, #0]
 8003f58:	1d1a      	adds	r2, r3, #4
 8003f5a:	600a      	str	r2, [r1, #0]
 8003f5c:	681e      	ldr	r6, [r3, #0]
 8003f5e:	6862      	ldr	r2, [r4, #4]
 8003f60:	2100      	movs	r1, #0
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7fc f944 	bl	80001f0 <memchr>
 8003f68:	b108      	cbz	r0, 8003f6e <_printf_i+0x1f2>
 8003f6a:	1b80      	subs	r0, r0, r6
 8003f6c:	6060      	str	r0, [r4, #4]
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	6123      	str	r3, [r4, #16]
 8003f72:	2300      	movs	r3, #0
 8003f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f78:	e7a8      	b.n	8003ecc <_printf_i+0x150>
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4640      	mov	r0, r8
 8003f82:	47d0      	blx	sl
 8003f84:	3001      	adds	r0, #1
 8003f86:	d0ab      	beq.n	8003ee0 <_printf_i+0x164>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	079b      	lsls	r3, r3, #30
 8003f8c:	d413      	bmi.n	8003fb6 <_printf_i+0x23a>
 8003f8e:	68e0      	ldr	r0, [r4, #12]
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	4298      	cmp	r0, r3
 8003f94:	bfb8      	it	lt
 8003f96:	4618      	movlt	r0, r3
 8003f98:	e7a4      	b.n	8003ee4 <_printf_i+0x168>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4632      	mov	r2, r6
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	47d0      	blx	sl
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d09b      	beq.n	8003ee0 <_printf_i+0x164>
 8003fa8:	3501      	adds	r5, #1
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	9903      	ldr	r1, [sp, #12]
 8003fae:	1a5b      	subs	r3, r3, r1
 8003fb0:	42ab      	cmp	r3, r5
 8003fb2:	dcf2      	bgt.n	8003f9a <_printf_i+0x21e>
 8003fb4:	e7eb      	b.n	8003f8e <_printf_i+0x212>
 8003fb6:	2500      	movs	r5, #0
 8003fb8:	f104 0619 	add.w	r6, r4, #25
 8003fbc:	e7f5      	b.n	8003faa <_printf_i+0x22e>
 8003fbe:	bf00      	nop
 8003fc0:	08007f4e 	.word	0x08007f4e
 8003fc4:	08007f5f 	.word	0x08007f5f

08003fc8 <_scanf_float>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	4617      	mov	r7, r2
 8003fd0:	9303      	str	r3, [sp, #12]
 8003fd2:	688b      	ldr	r3, [r1, #8]
 8003fd4:	1e5a      	subs	r2, r3, #1
 8003fd6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003fda:	bf83      	ittte	hi
 8003fdc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003fe0:	195b      	addhi	r3, r3, r5
 8003fe2:	9302      	strhi	r3, [sp, #8]
 8003fe4:	2300      	movls	r3, #0
 8003fe6:	bf86      	itte	hi
 8003fe8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003fec:	608b      	strhi	r3, [r1, #8]
 8003fee:	9302      	strls	r3, [sp, #8]
 8003ff0:	680b      	ldr	r3, [r1, #0]
 8003ff2:	468b      	mov	fp, r1
 8003ff4:	2500      	movs	r5, #0
 8003ff6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003ffa:	f84b 3b1c 	str.w	r3, [fp], #28
 8003ffe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004002:	4680      	mov	r8, r0
 8004004:	460c      	mov	r4, r1
 8004006:	465e      	mov	r6, fp
 8004008:	46aa      	mov	sl, r5
 800400a:	46a9      	mov	r9, r5
 800400c:	9501      	str	r5, [sp, #4]
 800400e:	68a2      	ldr	r2, [r4, #8]
 8004010:	b152      	cbz	r2, 8004028 <_scanf_float+0x60>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b4e      	cmp	r3, #78	; 0x4e
 8004018:	d864      	bhi.n	80040e4 <_scanf_float+0x11c>
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d83c      	bhi.n	8004098 <_scanf_float+0xd0>
 800401e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004022:	b2c8      	uxtb	r0, r1
 8004024:	280e      	cmp	r0, #14
 8004026:	d93a      	bls.n	800409e <_scanf_float+0xd6>
 8004028:	f1b9 0f00 	cmp.w	r9, #0
 800402c:	d003      	beq.n	8004036 <_scanf_float+0x6e>
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800403a:	f1ba 0f01 	cmp.w	sl, #1
 800403e:	f200 8113 	bhi.w	8004268 <_scanf_float+0x2a0>
 8004042:	455e      	cmp	r6, fp
 8004044:	f200 8105 	bhi.w	8004252 <_scanf_float+0x28a>
 8004048:	2501      	movs	r5, #1
 800404a:	4628      	mov	r0, r5
 800404c:	b007      	add	sp, #28
 800404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004052:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004056:	2a0d      	cmp	r2, #13
 8004058:	d8e6      	bhi.n	8004028 <_scanf_float+0x60>
 800405a:	a101      	add	r1, pc, #4	; (adr r1, 8004060 <_scanf_float+0x98>)
 800405c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004060:	0800419f 	.word	0x0800419f
 8004064:	08004029 	.word	0x08004029
 8004068:	08004029 	.word	0x08004029
 800406c:	08004029 	.word	0x08004029
 8004070:	080041ff 	.word	0x080041ff
 8004074:	080041d7 	.word	0x080041d7
 8004078:	08004029 	.word	0x08004029
 800407c:	08004029 	.word	0x08004029
 8004080:	080041ad 	.word	0x080041ad
 8004084:	08004029 	.word	0x08004029
 8004088:	08004029 	.word	0x08004029
 800408c:	08004029 	.word	0x08004029
 8004090:	08004029 	.word	0x08004029
 8004094:	08004165 	.word	0x08004165
 8004098:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800409c:	e7db      	b.n	8004056 <_scanf_float+0x8e>
 800409e:	290e      	cmp	r1, #14
 80040a0:	d8c2      	bhi.n	8004028 <_scanf_float+0x60>
 80040a2:	a001      	add	r0, pc, #4	; (adr r0, 80040a8 <_scanf_float+0xe0>)
 80040a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80040a8:	08004157 	.word	0x08004157
 80040ac:	08004029 	.word	0x08004029
 80040b0:	08004157 	.word	0x08004157
 80040b4:	080041eb 	.word	0x080041eb
 80040b8:	08004029 	.word	0x08004029
 80040bc:	08004105 	.word	0x08004105
 80040c0:	08004141 	.word	0x08004141
 80040c4:	08004141 	.word	0x08004141
 80040c8:	08004141 	.word	0x08004141
 80040cc:	08004141 	.word	0x08004141
 80040d0:	08004141 	.word	0x08004141
 80040d4:	08004141 	.word	0x08004141
 80040d8:	08004141 	.word	0x08004141
 80040dc:	08004141 	.word	0x08004141
 80040e0:	08004141 	.word	0x08004141
 80040e4:	2b6e      	cmp	r3, #110	; 0x6e
 80040e6:	d809      	bhi.n	80040fc <_scanf_float+0x134>
 80040e8:	2b60      	cmp	r3, #96	; 0x60
 80040ea:	d8b2      	bhi.n	8004052 <_scanf_float+0x8a>
 80040ec:	2b54      	cmp	r3, #84	; 0x54
 80040ee:	d077      	beq.n	80041e0 <_scanf_float+0x218>
 80040f0:	2b59      	cmp	r3, #89	; 0x59
 80040f2:	d199      	bne.n	8004028 <_scanf_float+0x60>
 80040f4:	2d07      	cmp	r5, #7
 80040f6:	d197      	bne.n	8004028 <_scanf_float+0x60>
 80040f8:	2508      	movs	r5, #8
 80040fa:	e029      	b.n	8004150 <_scanf_float+0x188>
 80040fc:	2b74      	cmp	r3, #116	; 0x74
 80040fe:	d06f      	beq.n	80041e0 <_scanf_float+0x218>
 8004100:	2b79      	cmp	r3, #121	; 0x79
 8004102:	e7f6      	b.n	80040f2 <_scanf_float+0x12a>
 8004104:	6821      	ldr	r1, [r4, #0]
 8004106:	05c8      	lsls	r0, r1, #23
 8004108:	d51a      	bpl.n	8004140 <_scanf_float+0x178>
 800410a:	9b02      	ldr	r3, [sp, #8]
 800410c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004110:	6021      	str	r1, [r4, #0]
 8004112:	f109 0901 	add.w	r9, r9, #1
 8004116:	b11b      	cbz	r3, 8004120 <_scanf_float+0x158>
 8004118:	3b01      	subs	r3, #1
 800411a:	3201      	adds	r2, #1
 800411c:	9302      	str	r3, [sp, #8]
 800411e:	60a2      	str	r2, [r4, #8]
 8004120:	68a3      	ldr	r3, [r4, #8]
 8004122:	3b01      	subs	r3, #1
 8004124:	60a3      	str	r3, [r4, #8]
 8004126:	6923      	ldr	r3, [r4, #16]
 8004128:	3301      	adds	r3, #1
 800412a:	6123      	str	r3, [r4, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3b01      	subs	r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	f340 8084 	ble.w	8004240 <_scanf_float+0x278>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	e766      	b.n	800400e <_scanf_float+0x46>
 8004140:	eb1a 0f05 	cmn.w	sl, r5
 8004144:	f47f af70 	bne.w	8004028 <_scanf_float+0x60>
 8004148:	6822      	ldr	r2, [r4, #0]
 800414a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800414e:	6022      	str	r2, [r4, #0]
 8004150:	f806 3b01 	strb.w	r3, [r6], #1
 8004154:	e7e4      	b.n	8004120 <_scanf_float+0x158>
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	0610      	lsls	r0, r2, #24
 800415a:	f57f af65 	bpl.w	8004028 <_scanf_float+0x60>
 800415e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004162:	e7f4      	b.n	800414e <_scanf_float+0x186>
 8004164:	f1ba 0f00 	cmp.w	sl, #0
 8004168:	d10e      	bne.n	8004188 <_scanf_float+0x1c0>
 800416a:	f1b9 0f00 	cmp.w	r9, #0
 800416e:	d10e      	bne.n	800418e <_scanf_float+0x1c6>
 8004170:	6822      	ldr	r2, [r4, #0]
 8004172:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004176:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800417a:	d108      	bne.n	800418e <_scanf_float+0x1c6>
 800417c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004180:	6022      	str	r2, [r4, #0]
 8004182:	f04f 0a01 	mov.w	sl, #1
 8004186:	e7e3      	b.n	8004150 <_scanf_float+0x188>
 8004188:	f1ba 0f02 	cmp.w	sl, #2
 800418c:	d055      	beq.n	800423a <_scanf_float+0x272>
 800418e:	2d01      	cmp	r5, #1
 8004190:	d002      	beq.n	8004198 <_scanf_float+0x1d0>
 8004192:	2d04      	cmp	r5, #4
 8004194:	f47f af48 	bne.w	8004028 <_scanf_float+0x60>
 8004198:	3501      	adds	r5, #1
 800419a:	b2ed      	uxtb	r5, r5
 800419c:	e7d8      	b.n	8004150 <_scanf_float+0x188>
 800419e:	f1ba 0f01 	cmp.w	sl, #1
 80041a2:	f47f af41 	bne.w	8004028 <_scanf_float+0x60>
 80041a6:	f04f 0a02 	mov.w	sl, #2
 80041aa:	e7d1      	b.n	8004150 <_scanf_float+0x188>
 80041ac:	b97d      	cbnz	r5, 80041ce <_scanf_float+0x206>
 80041ae:	f1b9 0f00 	cmp.w	r9, #0
 80041b2:	f47f af3c 	bne.w	800402e <_scanf_float+0x66>
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80041bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80041c0:	f47f af39 	bne.w	8004036 <_scanf_float+0x6e>
 80041c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	2501      	movs	r5, #1
 80041cc:	e7c0      	b.n	8004150 <_scanf_float+0x188>
 80041ce:	2d03      	cmp	r5, #3
 80041d0:	d0e2      	beq.n	8004198 <_scanf_float+0x1d0>
 80041d2:	2d05      	cmp	r5, #5
 80041d4:	e7de      	b.n	8004194 <_scanf_float+0x1cc>
 80041d6:	2d02      	cmp	r5, #2
 80041d8:	f47f af26 	bne.w	8004028 <_scanf_float+0x60>
 80041dc:	2503      	movs	r5, #3
 80041de:	e7b7      	b.n	8004150 <_scanf_float+0x188>
 80041e0:	2d06      	cmp	r5, #6
 80041e2:	f47f af21 	bne.w	8004028 <_scanf_float+0x60>
 80041e6:	2507      	movs	r5, #7
 80041e8:	e7b2      	b.n	8004150 <_scanf_float+0x188>
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	0591      	lsls	r1, r2, #22
 80041ee:	f57f af1b 	bpl.w	8004028 <_scanf_float+0x60>
 80041f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80041f6:	6022      	str	r2, [r4, #0]
 80041f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80041fc:	e7a8      	b.n	8004150 <_scanf_float+0x188>
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004204:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004208:	d006      	beq.n	8004218 <_scanf_float+0x250>
 800420a:	0550      	lsls	r0, r2, #21
 800420c:	f57f af0c 	bpl.w	8004028 <_scanf_float+0x60>
 8004210:	f1b9 0f00 	cmp.w	r9, #0
 8004214:	f43f af0f 	beq.w	8004036 <_scanf_float+0x6e>
 8004218:	0591      	lsls	r1, r2, #22
 800421a:	bf58      	it	pl
 800421c:	9901      	ldrpl	r1, [sp, #4]
 800421e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004222:	bf58      	it	pl
 8004224:	eba9 0101 	subpl.w	r1, r9, r1
 8004228:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800422c:	bf58      	it	pl
 800422e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004232:	6022      	str	r2, [r4, #0]
 8004234:	f04f 0900 	mov.w	r9, #0
 8004238:	e78a      	b.n	8004150 <_scanf_float+0x188>
 800423a:	f04f 0a03 	mov.w	sl, #3
 800423e:	e787      	b.n	8004150 <_scanf_float+0x188>
 8004240:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004244:	4639      	mov	r1, r7
 8004246:	4640      	mov	r0, r8
 8004248:	4798      	blx	r3
 800424a:	2800      	cmp	r0, #0
 800424c:	f43f aedf 	beq.w	800400e <_scanf_float+0x46>
 8004250:	e6ea      	b.n	8004028 <_scanf_float+0x60>
 8004252:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004256:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800425a:	463a      	mov	r2, r7
 800425c:	4640      	mov	r0, r8
 800425e:	4798      	blx	r3
 8004260:	6923      	ldr	r3, [r4, #16]
 8004262:	3b01      	subs	r3, #1
 8004264:	6123      	str	r3, [r4, #16]
 8004266:	e6ec      	b.n	8004042 <_scanf_float+0x7a>
 8004268:	1e6b      	subs	r3, r5, #1
 800426a:	2b06      	cmp	r3, #6
 800426c:	d825      	bhi.n	80042ba <_scanf_float+0x2f2>
 800426e:	2d02      	cmp	r5, #2
 8004270:	d836      	bhi.n	80042e0 <_scanf_float+0x318>
 8004272:	455e      	cmp	r6, fp
 8004274:	f67f aee8 	bls.w	8004048 <_scanf_float+0x80>
 8004278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800427c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004280:	463a      	mov	r2, r7
 8004282:	4640      	mov	r0, r8
 8004284:	4798      	blx	r3
 8004286:	6923      	ldr	r3, [r4, #16]
 8004288:	3b01      	subs	r3, #1
 800428a:	6123      	str	r3, [r4, #16]
 800428c:	e7f1      	b.n	8004272 <_scanf_float+0x2aa>
 800428e:	9802      	ldr	r0, [sp, #8]
 8004290:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004294:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004298:	9002      	str	r0, [sp, #8]
 800429a:	463a      	mov	r2, r7
 800429c:	4640      	mov	r0, r8
 800429e:	4798      	blx	r3
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	6123      	str	r3, [r4, #16]
 80042a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80042aa:	fa5f fa8a 	uxtb.w	sl, sl
 80042ae:	f1ba 0f02 	cmp.w	sl, #2
 80042b2:	d1ec      	bne.n	800428e <_scanf_float+0x2c6>
 80042b4:	3d03      	subs	r5, #3
 80042b6:	b2ed      	uxtb	r5, r5
 80042b8:	1b76      	subs	r6, r6, r5
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	05da      	lsls	r2, r3, #23
 80042be:	d52f      	bpl.n	8004320 <_scanf_float+0x358>
 80042c0:	055b      	lsls	r3, r3, #21
 80042c2:	d510      	bpl.n	80042e6 <_scanf_float+0x31e>
 80042c4:	455e      	cmp	r6, fp
 80042c6:	f67f aebf 	bls.w	8004048 <_scanf_float+0x80>
 80042ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80042d2:	463a      	mov	r2, r7
 80042d4:	4640      	mov	r0, r8
 80042d6:	4798      	blx	r3
 80042d8:	6923      	ldr	r3, [r4, #16]
 80042da:	3b01      	subs	r3, #1
 80042dc:	6123      	str	r3, [r4, #16]
 80042de:	e7f1      	b.n	80042c4 <_scanf_float+0x2fc>
 80042e0:	46aa      	mov	sl, r5
 80042e2:	9602      	str	r6, [sp, #8]
 80042e4:	e7df      	b.n	80042a6 <_scanf_float+0x2de>
 80042e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80042ea:	6923      	ldr	r3, [r4, #16]
 80042ec:	2965      	cmp	r1, #101	; 0x65
 80042ee:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80042f2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	d00c      	beq.n	8004314 <_scanf_float+0x34c>
 80042fa:	2945      	cmp	r1, #69	; 0x45
 80042fc:	d00a      	beq.n	8004314 <_scanf_float+0x34c>
 80042fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004302:	463a      	mov	r2, r7
 8004304:	4640      	mov	r0, r8
 8004306:	4798      	blx	r3
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800430e:	3b01      	subs	r3, #1
 8004310:	1eb5      	subs	r5, r6, #2
 8004312:	6123      	str	r3, [r4, #16]
 8004314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004318:	463a      	mov	r2, r7
 800431a:	4640      	mov	r0, r8
 800431c:	4798      	blx	r3
 800431e:	462e      	mov	r6, r5
 8004320:	6825      	ldr	r5, [r4, #0]
 8004322:	f015 0510 	ands.w	r5, r5, #16
 8004326:	d159      	bne.n	80043dc <_scanf_float+0x414>
 8004328:	7035      	strb	r5, [r6, #0]
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	d11c      	bne.n	8004370 <_scanf_float+0x3a8>
 8004336:	9b01      	ldr	r3, [sp, #4]
 8004338:	454b      	cmp	r3, r9
 800433a:	eba3 0209 	sub.w	r2, r3, r9
 800433e:	d124      	bne.n	800438a <_scanf_float+0x3c2>
 8004340:	2200      	movs	r2, #0
 8004342:	4659      	mov	r1, fp
 8004344:	4640      	mov	r0, r8
 8004346:	f000 fe8b 	bl	8005060 <_strtod_r>
 800434a:	f8d4 c000 	ldr.w	ip, [r4]
 800434e:	9b03      	ldr	r3, [sp, #12]
 8004350:	f01c 0f02 	tst.w	ip, #2
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4606      	mov	r6, r0
 8004358:	460f      	mov	r7, r1
 800435a:	d021      	beq.n	80043a0 <_scanf_float+0x3d8>
 800435c:	9903      	ldr	r1, [sp, #12]
 800435e:	1d1a      	adds	r2, r3, #4
 8004360:	600a      	str	r2, [r1, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	e9c3 6700 	strd	r6, r7, [r3]
 8004368:	68e3      	ldr	r3, [r4, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60e3      	str	r3, [r4, #12]
 800436e:	e66c      	b.n	800404a <_scanf_float+0x82>
 8004370:	9b04      	ldr	r3, [sp, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0e4      	beq.n	8004340 <_scanf_float+0x378>
 8004376:	9905      	ldr	r1, [sp, #20]
 8004378:	230a      	movs	r3, #10
 800437a:	462a      	mov	r2, r5
 800437c:	3101      	adds	r1, #1
 800437e:	4640      	mov	r0, r8
 8004380:	f000 fefa 	bl	8005178 <_strtol_r>
 8004384:	9b04      	ldr	r3, [sp, #16]
 8004386:	9e05      	ldr	r6, [sp, #20]
 8004388:	1ac2      	subs	r2, r0, r3
 800438a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800438e:	429e      	cmp	r6, r3
 8004390:	bf28      	it	cs
 8004392:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004396:	4912      	ldr	r1, [pc, #72]	; (80043e0 <_scanf_float+0x418>)
 8004398:	4630      	mov	r0, r6
 800439a:	f000 f829 	bl	80043f0 <siprintf>
 800439e:	e7cf      	b.n	8004340 <_scanf_float+0x378>
 80043a0:	f01c 0f04 	tst.w	ip, #4
 80043a4:	f103 0e04 	add.w	lr, r3, #4
 80043a8:	d003      	beq.n	80043b2 <_scanf_float+0x3ea>
 80043aa:	9903      	ldr	r1, [sp, #12]
 80043ac:	f8c1 e000 	str.w	lr, [r1]
 80043b0:	e7d7      	b.n	8004362 <_scanf_float+0x39a>
 80043b2:	9a03      	ldr	r2, [sp, #12]
 80043b4:	f8c2 e000 	str.w	lr, [r2]
 80043b8:	f8d3 8000 	ldr.w	r8, [r3]
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	f7fc fbbc 	bl	8000b3c <__aeabi_dcmpun>
 80043c4:	b128      	cbz	r0, 80043d2 <_scanf_float+0x40a>
 80043c6:	4807      	ldr	r0, [pc, #28]	; (80043e4 <_scanf_float+0x41c>)
 80043c8:	f000 f80e 	bl	80043e8 <nanf>
 80043cc:	f8c8 0000 	str.w	r0, [r8]
 80043d0:	e7ca      	b.n	8004368 <_scanf_float+0x3a0>
 80043d2:	4630      	mov	r0, r6
 80043d4:	4639      	mov	r1, r7
 80043d6:	f7fc fc0f 	bl	8000bf8 <__aeabi_d2f>
 80043da:	e7f7      	b.n	80043cc <_scanf_float+0x404>
 80043dc:	2500      	movs	r5, #0
 80043de:	e634      	b.n	800404a <_scanf_float+0x82>
 80043e0:	08007f70 	.word	0x08007f70
 80043e4:	08008388 	.word	0x08008388

080043e8 <nanf>:
 80043e8:	4800      	ldr	r0, [pc, #0]	; (80043ec <nanf+0x4>)
 80043ea:	4770      	bx	lr
 80043ec:	7fc00000 	.word	0x7fc00000

080043f0 <siprintf>:
 80043f0:	b40e      	push	{r1, r2, r3}
 80043f2:	b500      	push	{lr}
 80043f4:	b09c      	sub	sp, #112	; 0x70
 80043f6:	ab1d      	add	r3, sp, #116	; 0x74
 80043f8:	9002      	str	r0, [sp, #8]
 80043fa:	9006      	str	r0, [sp, #24]
 80043fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004400:	4809      	ldr	r0, [pc, #36]	; (8004428 <siprintf+0x38>)
 8004402:	9107      	str	r1, [sp, #28]
 8004404:	9104      	str	r1, [sp, #16]
 8004406:	4909      	ldr	r1, [pc, #36]	; (800442c <siprintf+0x3c>)
 8004408:	f853 2b04 	ldr.w	r2, [r3], #4
 800440c:	9105      	str	r1, [sp, #20]
 800440e:	6800      	ldr	r0, [r0, #0]
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	a902      	add	r1, sp, #8
 8004414:	f002 fe84 	bl	8007120 <_svfiprintf_r>
 8004418:	9b02      	ldr	r3, [sp, #8]
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	b01c      	add	sp, #112	; 0x70
 8004420:	f85d eb04 	ldr.w	lr, [sp], #4
 8004424:	b003      	add	sp, #12
 8004426:	4770      	bx	lr
 8004428:	20000040 	.word	0x20000040
 800442c:	ffff0208 	.word	0xffff0208

08004430 <sulp>:
 8004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	460f      	mov	r7, r1
 8004436:	4690      	mov	r8, r2
 8004438:	f002 fc18 	bl	8006c6c <__ulp>
 800443c:	4604      	mov	r4, r0
 800443e:	460d      	mov	r5, r1
 8004440:	f1b8 0f00 	cmp.w	r8, #0
 8004444:	d011      	beq.n	800446a <sulp+0x3a>
 8004446:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800444a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800444e:	2b00      	cmp	r3, #0
 8004450:	dd0b      	ble.n	800446a <sulp+0x3a>
 8004452:	051b      	lsls	r3, r3, #20
 8004454:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004458:	2400      	movs	r4, #0
 800445a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800445e:	4622      	mov	r2, r4
 8004460:	462b      	mov	r3, r5
 8004462:	f7fc f8d1 	bl	8000608 <__aeabi_dmul>
 8004466:	4604      	mov	r4, r0
 8004468:	460d      	mov	r5, r1
 800446a:	4620      	mov	r0, r4
 800446c:	4629      	mov	r1, r5
 800446e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004472:	0000      	movs	r0, r0
 8004474:	0000      	movs	r0, r0
	...

08004478 <_strtod_l>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	b0a1      	sub	sp, #132	; 0x84
 800447e:	469b      	mov	fp, r3
 8004480:	2300      	movs	r3, #0
 8004482:	931c      	str	r3, [sp, #112]	; 0x70
 8004484:	4ba1      	ldr	r3, [pc, #644]	; (800470c <_strtod_l+0x294>)
 8004486:	9217      	str	r2, [sp, #92]	; 0x5c
 8004488:	681f      	ldr	r7, [r3, #0]
 800448a:	4682      	mov	sl, r0
 800448c:	4638      	mov	r0, r7
 800448e:	460e      	mov	r6, r1
 8004490:	f7fb fea6 	bl	80001e0 <strlen>
 8004494:	f04f 0800 	mov.w	r8, #0
 8004498:	4604      	mov	r4, r0
 800449a:	f04f 0900 	mov.w	r9, #0
 800449e:	961b      	str	r6, [sp, #108]	; 0x6c
 80044a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044a2:	781a      	ldrb	r2, [r3, #0]
 80044a4:	2a2b      	cmp	r2, #43	; 0x2b
 80044a6:	d04c      	beq.n	8004542 <_strtod_l+0xca>
 80044a8:	d83a      	bhi.n	8004520 <_strtod_l+0xa8>
 80044aa:	2a0d      	cmp	r2, #13
 80044ac:	d833      	bhi.n	8004516 <_strtod_l+0x9e>
 80044ae:	2a08      	cmp	r2, #8
 80044b0:	d833      	bhi.n	800451a <_strtod_l+0xa2>
 80044b2:	2a00      	cmp	r2, #0
 80044b4:	d03d      	beq.n	8004532 <_strtod_l+0xba>
 80044b6:	2300      	movs	r3, #0
 80044b8:	930c      	str	r3, [sp, #48]	; 0x30
 80044ba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80044bc:	782b      	ldrb	r3, [r5, #0]
 80044be:	2b30      	cmp	r3, #48	; 0x30
 80044c0:	f040 80af 	bne.w	8004622 <_strtod_l+0x1aa>
 80044c4:	786b      	ldrb	r3, [r5, #1]
 80044c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80044ca:	2b58      	cmp	r3, #88	; 0x58
 80044cc:	d16c      	bne.n	80045a8 <_strtod_l+0x130>
 80044ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	ab1c      	add	r3, sp, #112	; 0x70
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	4a8e      	ldr	r2, [pc, #568]	; (8004710 <_strtod_l+0x298>)
 80044d8:	f8cd b008 	str.w	fp, [sp, #8]
 80044dc:	ab1d      	add	r3, sp, #116	; 0x74
 80044de:	a91b      	add	r1, sp, #108	; 0x6c
 80044e0:	4650      	mov	r0, sl
 80044e2:	f001 fd2f 	bl	8005f44 <__gethex>
 80044e6:	f010 0607 	ands.w	r6, r0, #7
 80044ea:	4604      	mov	r4, r0
 80044ec:	d005      	beq.n	80044fa <_strtod_l+0x82>
 80044ee:	2e06      	cmp	r6, #6
 80044f0:	d129      	bne.n	8004546 <_strtod_l+0xce>
 80044f2:	3501      	adds	r5, #1
 80044f4:	2300      	movs	r3, #0
 80044f6:	951b      	str	r5, [sp, #108]	; 0x6c
 80044f8:	930c      	str	r3, [sp, #48]	; 0x30
 80044fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f040 8596 	bne.w	800502e <_strtod_l+0xbb6>
 8004502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004504:	b1d3      	cbz	r3, 800453c <_strtod_l+0xc4>
 8004506:	4642      	mov	r2, r8
 8004508:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	b021      	add	sp, #132	; 0x84
 8004512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004516:	2a20      	cmp	r2, #32
 8004518:	d1cd      	bne.n	80044b6 <_strtod_l+0x3e>
 800451a:	3301      	adds	r3, #1
 800451c:	931b      	str	r3, [sp, #108]	; 0x6c
 800451e:	e7bf      	b.n	80044a0 <_strtod_l+0x28>
 8004520:	2a2d      	cmp	r2, #45	; 0x2d
 8004522:	d1c8      	bne.n	80044b6 <_strtod_l+0x3e>
 8004524:	2201      	movs	r2, #1
 8004526:	920c      	str	r2, [sp, #48]	; 0x30
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	921b      	str	r2, [sp, #108]	; 0x6c
 800452c:	785b      	ldrb	r3, [r3, #1]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1c3      	bne.n	80044ba <_strtod_l+0x42>
 8004532:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004534:	961b      	str	r6, [sp, #108]	; 0x6c
 8004536:	2b00      	cmp	r3, #0
 8004538:	f040 8577 	bne.w	800502a <_strtod_l+0xbb2>
 800453c:	4642      	mov	r2, r8
 800453e:	464b      	mov	r3, r9
 8004540:	e7e4      	b.n	800450c <_strtod_l+0x94>
 8004542:	2200      	movs	r2, #0
 8004544:	e7ef      	b.n	8004526 <_strtod_l+0xae>
 8004546:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004548:	b13a      	cbz	r2, 800455a <_strtod_l+0xe2>
 800454a:	2135      	movs	r1, #53	; 0x35
 800454c:	a81e      	add	r0, sp, #120	; 0x78
 800454e:	f002 fc91 	bl	8006e74 <__copybits>
 8004552:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004554:	4650      	mov	r0, sl
 8004556:	f002 f85d 	bl	8006614 <_Bfree>
 800455a:	3e01      	subs	r6, #1
 800455c:	2e05      	cmp	r6, #5
 800455e:	d807      	bhi.n	8004570 <_strtod_l+0xf8>
 8004560:	e8df f006 	tbb	[pc, r6]
 8004564:	1d180b0e 	.word	0x1d180b0e
 8004568:	030e      	.short	0x030e
 800456a:	f04f 0900 	mov.w	r9, #0
 800456e:	46c8      	mov	r8, r9
 8004570:	0721      	lsls	r1, r4, #28
 8004572:	d5c2      	bpl.n	80044fa <_strtod_l+0x82>
 8004574:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004578:	e7bf      	b.n	80044fa <_strtod_l+0x82>
 800457a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800457e:	e7f7      	b.n	8004570 <_strtod_l+0xf8>
 8004580:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8004584:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004586:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800458a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800458e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004592:	e7ed      	b.n	8004570 <_strtod_l+0xf8>
 8004594:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004714 <_strtod_l+0x29c>
 8004598:	f04f 0800 	mov.w	r8, #0
 800459c:	e7e8      	b.n	8004570 <_strtod_l+0xf8>
 800459e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80045a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80045a6:	e7e3      	b.n	8004570 <_strtod_l+0xf8>
 80045a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	921b      	str	r2, [sp, #108]	; 0x6c
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	2b30      	cmp	r3, #48	; 0x30
 80045b2:	d0f9      	beq.n	80045a8 <_strtod_l+0x130>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0a0      	beq.n	80044fa <_strtod_l+0x82>
 80045b8:	2301      	movs	r3, #1
 80045ba:	9307      	str	r3, [sp, #28]
 80045bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045be:	9308      	str	r3, [sp, #32]
 80045c0:	2300      	movs	r3, #0
 80045c2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80045c6:	469b      	mov	fp, r3
 80045c8:	220a      	movs	r2, #10
 80045ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80045cc:	7805      	ldrb	r5, [r0, #0]
 80045ce:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80045d2:	b2d9      	uxtb	r1, r3
 80045d4:	2909      	cmp	r1, #9
 80045d6:	d926      	bls.n	8004626 <_strtod_l+0x1ae>
 80045d8:	4622      	mov	r2, r4
 80045da:	4639      	mov	r1, r7
 80045dc:	f002 feb6 	bl	800734c <strncmp>
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d032      	beq.n	800464a <_strtod_l+0x1d2>
 80045e4:	2000      	movs	r0, #0
 80045e6:	462b      	mov	r3, r5
 80045e8:	465c      	mov	r4, fp
 80045ea:	9004      	str	r0, [sp, #16]
 80045ec:	4602      	mov	r2, r0
 80045ee:	2b65      	cmp	r3, #101	; 0x65
 80045f0:	d001      	beq.n	80045f6 <_strtod_l+0x17e>
 80045f2:	2b45      	cmp	r3, #69	; 0x45
 80045f4:	d113      	bne.n	800461e <_strtod_l+0x1a6>
 80045f6:	b91c      	cbnz	r4, 8004600 <_strtod_l+0x188>
 80045f8:	9b07      	ldr	r3, [sp, #28]
 80045fa:	4303      	orrs	r3, r0
 80045fc:	d099      	beq.n	8004532 <_strtod_l+0xba>
 80045fe:	2400      	movs	r4, #0
 8004600:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004602:	1c73      	adds	r3, r6, #1
 8004604:	931b      	str	r3, [sp, #108]	; 0x6c
 8004606:	7873      	ldrb	r3, [r6, #1]
 8004608:	2b2b      	cmp	r3, #43	; 0x2b
 800460a:	d078      	beq.n	80046fe <_strtod_l+0x286>
 800460c:	2b2d      	cmp	r3, #45	; 0x2d
 800460e:	d07b      	beq.n	8004708 <_strtod_l+0x290>
 8004610:	2700      	movs	r7, #0
 8004612:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004616:	2909      	cmp	r1, #9
 8004618:	f240 8082 	bls.w	8004720 <_strtod_l+0x2a8>
 800461c:	961b      	str	r6, [sp, #108]	; 0x6c
 800461e:	2500      	movs	r5, #0
 8004620:	e09e      	b.n	8004760 <_strtod_l+0x2e8>
 8004622:	2300      	movs	r3, #0
 8004624:	e7c9      	b.n	80045ba <_strtod_l+0x142>
 8004626:	f1bb 0f08 	cmp.w	fp, #8
 800462a:	bfd5      	itete	le
 800462c:	9906      	ldrle	r1, [sp, #24]
 800462e:	9905      	ldrgt	r1, [sp, #20]
 8004630:	fb02 3301 	mlale	r3, r2, r1, r3
 8004634:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004638:	f100 0001 	add.w	r0, r0, #1
 800463c:	bfd4      	ite	le
 800463e:	9306      	strle	r3, [sp, #24]
 8004640:	9305      	strgt	r3, [sp, #20]
 8004642:	f10b 0b01 	add.w	fp, fp, #1
 8004646:	901b      	str	r0, [sp, #108]	; 0x6c
 8004648:	e7bf      	b.n	80045ca <_strtod_l+0x152>
 800464a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800464c:	191a      	adds	r2, r3, r4
 800464e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004650:	5d1b      	ldrb	r3, [r3, r4]
 8004652:	f1bb 0f00 	cmp.w	fp, #0
 8004656:	d036      	beq.n	80046c6 <_strtod_l+0x24e>
 8004658:	9004      	str	r0, [sp, #16]
 800465a:	465c      	mov	r4, fp
 800465c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004660:	2a09      	cmp	r2, #9
 8004662:	d912      	bls.n	800468a <_strtod_l+0x212>
 8004664:	2201      	movs	r2, #1
 8004666:	e7c2      	b.n	80045ee <_strtod_l+0x176>
 8004668:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	921b      	str	r2, [sp, #108]	; 0x6c
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	3001      	adds	r0, #1
 8004672:	2b30      	cmp	r3, #48	; 0x30
 8004674:	d0f8      	beq.n	8004668 <_strtod_l+0x1f0>
 8004676:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800467a:	2a08      	cmp	r2, #8
 800467c:	f200 84dc 	bhi.w	8005038 <_strtod_l+0xbc0>
 8004680:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004682:	9004      	str	r0, [sp, #16]
 8004684:	2000      	movs	r0, #0
 8004686:	9208      	str	r2, [sp, #32]
 8004688:	4604      	mov	r4, r0
 800468a:	3b30      	subs	r3, #48	; 0x30
 800468c:	f100 0201 	add.w	r2, r0, #1
 8004690:	d013      	beq.n	80046ba <_strtod_l+0x242>
 8004692:	9904      	ldr	r1, [sp, #16]
 8004694:	4411      	add	r1, r2
 8004696:	9104      	str	r1, [sp, #16]
 8004698:	4622      	mov	r2, r4
 800469a:	1905      	adds	r5, r0, r4
 800469c:	210a      	movs	r1, #10
 800469e:	42aa      	cmp	r2, r5
 80046a0:	d113      	bne.n	80046ca <_strtod_l+0x252>
 80046a2:	1822      	adds	r2, r4, r0
 80046a4:	2a08      	cmp	r2, #8
 80046a6:	f104 0401 	add.w	r4, r4, #1
 80046aa:	4404      	add	r4, r0
 80046ac:	dc1b      	bgt.n	80046e6 <_strtod_l+0x26e>
 80046ae:	9906      	ldr	r1, [sp, #24]
 80046b0:	220a      	movs	r2, #10
 80046b2:	fb02 3301 	mla	r3, r2, r1, r3
 80046b6:	9306      	str	r3, [sp, #24]
 80046b8:	2200      	movs	r2, #0
 80046ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046bc:	1c59      	adds	r1, r3, #1
 80046be:	911b      	str	r1, [sp, #108]	; 0x6c
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	4610      	mov	r0, r2
 80046c4:	e7ca      	b.n	800465c <_strtod_l+0x1e4>
 80046c6:	4658      	mov	r0, fp
 80046c8:	e7d3      	b.n	8004672 <_strtod_l+0x1fa>
 80046ca:	2a08      	cmp	r2, #8
 80046cc:	dc04      	bgt.n	80046d8 <_strtod_l+0x260>
 80046ce:	9f06      	ldr	r7, [sp, #24]
 80046d0:	434f      	muls	r7, r1
 80046d2:	9706      	str	r7, [sp, #24]
 80046d4:	3201      	adds	r2, #1
 80046d6:	e7e2      	b.n	800469e <_strtod_l+0x226>
 80046d8:	1c57      	adds	r7, r2, #1
 80046da:	2f10      	cmp	r7, #16
 80046dc:	bfde      	ittt	le
 80046de:	9f05      	ldrle	r7, [sp, #20]
 80046e0:	434f      	mulle	r7, r1
 80046e2:	9705      	strle	r7, [sp, #20]
 80046e4:	e7f6      	b.n	80046d4 <_strtod_l+0x25c>
 80046e6:	2c10      	cmp	r4, #16
 80046e8:	bfdf      	itttt	le
 80046ea:	9905      	ldrle	r1, [sp, #20]
 80046ec:	220a      	movle	r2, #10
 80046ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80046f2:	9305      	strle	r3, [sp, #20]
 80046f4:	e7e0      	b.n	80046b8 <_strtod_l+0x240>
 80046f6:	2300      	movs	r3, #0
 80046f8:	9304      	str	r3, [sp, #16]
 80046fa:	2201      	movs	r2, #1
 80046fc:	e77c      	b.n	80045f8 <_strtod_l+0x180>
 80046fe:	2700      	movs	r7, #0
 8004700:	1cb3      	adds	r3, r6, #2
 8004702:	931b      	str	r3, [sp, #108]	; 0x6c
 8004704:	78b3      	ldrb	r3, [r6, #2]
 8004706:	e784      	b.n	8004612 <_strtod_l+0x19a>
 8004708:	2701      	movs	r7, #1
 800470a:	e7f9      	b.n	8004700 <_strtod_l+0x288>
 800470c:	080081c8 	.word	0x080081c8
 8004710:	08007f78 	.word	0x08007f78
 8004714:	7ff00000 	.word	0x7ff00000
 8004718:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	911b      	str	r1, [sp, #108]	; 0x6c
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	2b30      	cmp	r3, #48	; 0x30
 8004722:	d0f9      	beq.n	8004718 <_strtod_l+0x2a0>
 8004724:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8004728:	2908      	cmp	r1, #8
 800472a:	f63f af78 	bhi.w	800461e <_strtod_l+0x1a6>
 800472e:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8004732:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004734:	9309      	str	r3, [sp, #36]	; 0x24
 8004736:	f04f 0e0a 	mov.w	lr, #10
 800473a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800473c:	1c59      	adds	r1, r3, #1
 800473e:	911b      	str	r1, [sp, #108]	; 0x6c
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8004746:	2d09      	cmp	r5, #9
 8004748:	d935      	bls.n	80047b6 <_strtod_l+0x33e>
 800474a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800474c:	1b49      	subs	r1, r1, r5
 800474e:	2908      	cmp	r1, #8
 8004750:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004754:	dc02      	bgt.n	800475c <_strtod_l+0x2e4>
 8004756:	4565      	cmp	r5, ip
 8004758:	bfa8      	it	ge
 800475a:	4665      	movge	r5, ip
 800475c:	b107      	cbz	r7, 8004760 <_strtod_l+0x2e8>
 800475e:	426d      	negs	r5, r5
 8004760:	2c00      	cmp	r4, #0
 8004762:	d14c      	bne.n	80047fe <_strtod_l+0x386>
 8004764:	9907      	ldr	r1, [sp, #28]
 8004766:	4301      	orrs	r1, r0
 8004768:	f47f aec7 	bne.w	80044fa <_strtod_l+0x82>
 800476c:	2a00      	cmp	r2, #0
 800476e:	f47f aee0 	bne.w	8004532 <_strtod_l+0xba>
 8004772:	2b69      	cmp	r3, #105	; 0x69
 8004774:	d026      	beq.n	80047c4 <_strtod_l+0x34c>
 8004776:	dc23      	bgt.n	80047c0 <_strtod_l+0x348>
 8004778:	2b49      	cmp	r3, #73	; 0x49
 800477a:	d023      	beq.n	80047c4 <_strtod_l+0x34c>
 800477c:	2b4e      	cmp	r3, #78	; 0x4e
 800477e:	f47f aed8 	bne.w	8004532 <_strtod_l+0xba>
 8004782:	499c      	ldr	r1, [pc, #624]	; (80049f4 <_strtod_l+0x57c>)
 8004784:	a81b      	add	r0, sp, #108	; 0x6c
 8004786:	f001 fe29 	bl	80063dc <__match>
 800478a:	2800      	cmp	r0, #0
 800478c:	f43f aed1 	beq.w	8004532 <_strtod_l+0xba>
 8004790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b28      	cmp	r3, #40	; 0x28
 8004796:	d12c      	bne.n	80047f2 <_strtod_l+0x37a>
 8004798:	4997      	ldr	r1, [pc, #604]	; (80049f8 <_strtod_l+0x580>)
 800479a:	aa1e      	add	r2, sp, #120	; 0x78
 800479c:	a81b      	add	r0, sp, #108	; 0x6c
 800479e:	f001 fe31 	bl	8006404 <__hexnan>
 80047a2:	2805      	cmp	r0, #5
 80047a4:	d125      	bne.n	80047f2 <_strtod_l+0x37a>
 80047a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047a8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80047ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80047b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80047b4:	e6a1      	b.n	80044fa <_strtod_l+0x82>
 80047b6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80047ba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80047be:	e7bc      	b.n	800473a <_strtod_l+0x2c2>
 80047c0:	2b6e      	cmp	r3, #110	; 0x6e
 80047c2:	e7dc      	b.n	800477e <_strtod_l+0x306>
 80047c4:	498d      	ldr	r1, [pc, #564]	; (80049fc <_strtod_l+0x584>)
 80047c6:	a81b      	add	r0, sp, #108	; 0x6c
 80047c8:	f001 fe08 	bl	80063dc <__match>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	f43f aeb0 	beq.w	8004532 <_strtod_l+0xba>
 80047d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047d4:	498a      	ldr	r1, [pc, #552]	; (8004a00 <_strtod_l+0x588>)
 80047d6:	3b01      	subs	r3, #1
 80047d8:	a81b      	add	r0, sp, #108	; 0x6c
 80047da:	931b      	str	r3, [sp, #108]	; 0x6c
 80047dc:	f001 fdfe 	bl	80063dc <__match>
 80047e0:	b910      	cbnz	r0, 80047e8 <_strtod_l+0x370>
 80047e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047e4:	3301      	adds	r3, #1
 80047e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80047e8:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8004a10 <_strtod_l+0x598>
 80047ec:	f04f 0800 	mov.w	r8, #0
 80047f0:	e683      	b.n	80044fa <_strtod_l+0x82>
 80047f2:	4884      	ldr	r0, [pc, #528]	; (8004a04 <_strtod_l+0x58c>)
 80047f4:	f002 fd94 	bl	8007320 <nan>
 80047f8:	4680      	mov	r8, r0
 80047fa:	4689      	mov	r9, r1
 80047fc:	e67d      	b.n	80044fa <_strtod_l+0x82>
 80047fe:	9b04      	ldr	r3, [sp, #16]
 8004800:	9806      	ldr	r0, [sp, #24]
 8004802:	1aeb      	subs	r3, r5, r3
 8004804:	f1bb 0f00 	cmp.w	fp, #0
 8004808:	bf08      	it	eq
 800480a:	46a3      	moveq	fp, r4
 800480c:	2c10      	cmp	r4, #16
 800480e:	9307      	str	r3, [sp, #28]
 8004810:	4626      	mov	r6, r4
 8004812:	bfa8      	it	ge
 8004814:	2610      	movge	r6, #16
 8004816:	f7fb fe7d 	bl	8000514 <__aeabi_ui2d>
 800481a:	2c09      	cmp	r4, #9
 800481c:	4680      	mov	r8, r0
 800481e:	4689      	mov	r9, r1
 8004820:	dd13      	ble.n	800484a <_strtod_l+0x3d2>
 8004822:	4b79      	ldr	r3, [pc, #484]	; (8004a08 <_strtod_l+0x590>)
 8004824:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004828:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800482c:	f7fb feec 	bl	8000608 <__aeabi_dmul>
 8004830:	4680      	mov	r8, r0
 8004832:	9805      	ldr	r0, [sp, #20]
 8004834:	4689      	mov	r9, r1
 8004836:	f7fb fe6d 	bl	8000514 <__aeabi_ui2d>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4640      	mov	r0, r8
 8004840:	4649      	mov	r1, r9
 8004842:	f7fb fd2b 	bl	800029c <__adddf3>
 8004846:	4680      	mov	r8, r0
 8004848:	4689      	mov	r9, r1
 800484a:	2c0f      	cmp	r4, #15
 800484c:	dc36      	bgt.n	80048bc <_strtod_l+0x444>
 800484e:	9b07      	ldr	r3, [sp, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f43f ae52 	beq.w	80044fa <_strtod_l+0x82>
 8004856:	dd22      	ble.n	800489e <_strtod_l+0x426>
 8004858:	2b16      	cmp	r3, #22
 800485a:	dc09      	bgt.n	8004870 <_strtod_l+0x3f8>
 800485c:	4c6a      	ldr	r4, [pc, #424]	; (8004a08 <_strtod_l+0x590>)
 800485e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8004862:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004866:	4642      	mov	r2, r8
 8004868:	464b      	mov	r3, r9
 800486a:	f7fb fecd 	bl	8000608 <__aeabi_dmul>
 800486e:	e7c3      	b.n	80047f8 <_strtod_l+0x380>
 8004870:	9a07      	ldr	r2, [sp, #28]
 8004872:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004876:	4293      	cmp	r3, r2
 8004878:	db20      	blt.n	80048bc <_strtod_l+0x444>
 800487a:	4d63      	ldr	r5, [pc, #396]	; (8004a08 <_strtod_l+0x590>)
 800487c:	f1c4 040f 	rsb	r4, r4, #15
 8004880:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800488c:	f7fb febc 	bl	8000608 <__aeabi_dmul>
 8004890:	9b07      	ldr	r3, [sp, #28]
 8004892:	1b1c      	subs	r4, r3, r4
 8004894:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800489c:	e7e5      	b.n	800486a <_strtod_l+0x3f2>
 800489e:	9b07      	ldr	r3, [sp, #28]
 80048a0:	3316      	adds	r3, #22
 80048a2:	db0b      	blt.n	80048bc <_strtod_l+0x444>
 80048a4:	9b04      	ldr	r3, [sp, #16]
 80048a6:	4a58      	ldr	r2, [pc, #352]	; (8004a08 <_strtod_l+0x590>)
 80048a8:	1b5d      	subs	r5, r3, r5
 80048aa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80048ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048b2:	4640      	mov	r0, r8
 80048b4:	4649      	mov	r1, r9
 80048b6:	f7fb ffd1 	bl	800085c <__aeabi_ddiv>
 80048ba:	e79d      	b.n	80047f8 <_strtod_l+0x380>
 80048bc:	9b07      	ldr	r3, [sp, #28]
 80048be:	1ba6      	subs	r6, r4, r6
 80048c0:	441e      	add	r6, r3
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	dd71      	ble.n	80049aa <_strtod_l+0x532>
 80048c6:	f016 030f 	ands.w	r3, r6, #15
 80048ca:	d00a      	beq.n	80048e2 <_strtod_l+0x46a>
 80048cc:	494e      	ldr	r1, [pc, #312]	; (8004a08 <_strtod_l+0x590>)
 80048ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80048d2:	4642      	mov	r2, r8
 80048d4:	464b      	mov	r3, r9
 80048d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048da:	f7fb fe95 	bl	8000608 <__aeabi_dmul>
 80048de:	4680      	mov	r8, r0
 80048e0:	4689      	mov	r9, r1
 80048e2:	f036 060f 	bics.w	r6, r6, #15
 80048e6:	d050      	beq.n	800498a <_strtod_l+0x512>
 80048e8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80048ec:	dd27      	ble.n	800493e <_strtod_l+0x4c6>
 80048ee:	f04f 0b00 	mov.w	fp, #0
 80048f2:	f8cd b010 	str.w	fp, [sp, #16]
 80048f6:	f8cd b020 	str.w	fp, [sp, #32]
 80048fa:	f8cd b018 	str.w	fp, [sp, #24]
 80048fe:	2322      	movs	r3, #34	; 0x22
 8004900:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8004a10 <_strtod_l+0x598>
 8004904:	f8ca 3000 	str.w	r3, [sl]
 8004908:	f04f 0800 	mov.w	r8, #0
 800490c:	9b08      	ldr	r3, [sp, #32]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f43f adf3 	beq.w	80044fa <_strtod_l+0x82>
 8004914:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004916:	4650      	mov	r0, sl
 8004918:	f001 fe7c 	bl	8006614 <_Bfree>
 800491c:	9906      	ldr	r1, [sp, #24]
 800491e:	4650      	mov	r0, sl
 8004920:	f001 fe78 	bl	8006614 <_Bfree>
 8004924:	9904      	ldr	r1, [sp, #16]
 8004926:	4650      	mov	r0, sl
 8004928:	f001 fe74 	bl	8006614 <_Bfree>
 800492c:	9908      	ldr	r1, [sp, #32]
 800492e:	4650      	mov	r0, sl
 8004930:	f001 fe70 	bl	8006614 <_Bfree>
 8004934:	4659      	mov	r1, fp
 8004936:	4650      	mov	r0, sl
 8004938:	f001 fe6c 	bl	8006614 <_Bfree>
 800493c:	e5dd      	b.n	80044fa <_strtod_l+0x82>
 800493e:	2300      	movs	r3, #0
 8004940:	1136      	asrs	r6, r6, #4
 8004942:	4640      	mov	r0, r8
 8004944:	4649      	mov	r1, r9
 8004946:	461f      	mov	r7, r3
 8004948:	2e01      	cmp	r6, #1
 800494a:	dc21      	bgt.n	8004990 <_strtod_l+0x518>
 800494c:	b10b      	cbz	r3, 8004952 <_strtod_l+0x4da>
 800494e:	4680      	mov	r8, r0
 8004950:	4689      	mov	r9, r1
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <_strtod_l+0x594>)
 8004954:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004958:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800495c:	4642      	mov	r2, r8
 800495e:	464b      	mov	r3, r9
 8004960:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004964:	f7fb fe50 	bl	8000608 <__aeabi_dmul>
 8004968:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <_strtod_l+0x598>)
 800496a:	460a      	mov	r2, r1
 800496c:	400b      	ands	r3, r1
 800496e:	4929      	ldr	r1, [pc, #164]	; (8004a14 <_strtod_l+0x59c>)
 8004970:	428b      	cmp	r3, r1
 8004972:	4680      	mov	r8, r0
 8004974:	d8bb      	bhi.n	80048ee <_strtod_l+0x476>
 8004976:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800497a:	428b      	cmp	r3, r1
 800497c:	bf86      	itte	hi
 800497e:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 8004a18 <_strtod_l+0x5a0>
 8004982:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004986:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800498a:	2300      	movs	r3, #0
 800498c:	9305      	str	r3, [sp, #20]
 800498e:	e07e      	b.n	8004a8e <_strtod_l+0x616>
 8004990:	07f2      	lsls	r2, r6, #31
 8004992:	d507      	bpl.n	80049a4 <_strtod_l+0x52c>
 8004994:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <_strtod_l+0x594>)
 8004996:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f7fb fe33 	bl	8000608 <__aeabi_dmul>
 80049a2:	2301      	movs	r3, #1
 80049a4:	3701      	adds	r7, #1
 80049a6:	1076      	asrs	r6, r6, #1
 80049a8:	e7ce      	b.n	8004948 <_strtod_l+0x4d0>
 80049aa:	d0ee      	beq.n	800498a <_strtod_l+0x512>
 80049ac:	4276      	negs	r6, r6
 80049ae:	f016 020f 	ands.w	r2, r6, #15
 80049b2:	d00a      	beq.n	80049ca <_strtod_l+0x552>
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <_strtod_l+0x590>)
 80049b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049ba:	4640      	mov	r0, r8
 80049bc:	4649      	mov	r1, r9
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f7fb ff4b 	bl	800085c <__aeabi_ddiv>
 80049c6:	4680      	mov	r8, r0
 80049c8:	4689      	mov	r9, r1
 80049ca:	1136      	asrs	r6, r6, #4
 80049cc:	d0dd      	beq.n	800498a <_strtod_l+0x512>
 80049ce:	2e1f      	cmp	r6, #31
 80049d0:	dd24      	ble.n	8004a1c <_strtod_l+0x5a4>
 80049d2:	f04f 0b00 	mov.w	fp, #0
 80049d6:	f8cd b010 	str.w	fp, [sp, #16]
 80049da:	f8cd b020 	str.w	fp, [sp, #32]
 80049de:	f8cd b018 	str.w	fp, [sp, #24]
 80049e2:	2322      	movs	r3, #34	; 0x22
 80049e4:	f04f 0800 	mov.w	r8, #0
 80049e8:	f04f 0900 	mov.w	r9, #0
 80049ec:	f8ca 3000 	str.w	r3, [sl]
 80049f0:	e78c      	b.n	800490c <_strtod_l+0x494>
 80049f2:	bf00      	nop
 80049f4:	08007f49 	.word	0x08007f49
 80049f8:	08007f8c 	.word	0x08007f8c
 80049fc:	08007f41 	.word	0x08007f41
 8004a00:	080080cc 	.word	0x080080cc
 8004a04:	08008388 	.word	0x08008388
 8004a08:	08008268 	.word	0x08008268
 8004a0c:	08008240 	.word	0x08008240
 8004a10:	7ff00000 	.word	0x7ff00000
 8004a14:	7ca00000 	.word	0x7ca00000
 8004a18:	7fefffff 	.word	0x7fefffff
 8004a1c:	f016 0310 	ands.w	r3, r6, #16
 8004a20:	bf18      	it	ne
 8004a22:	236a      	movne	r3, #106	; 0x6a
 8004a24:	4fb3      	ldr	r7, [pc, #716]	; (8004cf4 <_strtod_l+0x87c>)
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	4640      	mov	r0, r8
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	07f2      	lsls	r2, r6, #31
 8004a30:	d504      	bpl.n	8004a3c <_strtod_l+0x5c4>
 8004a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a36:	f7fb fde7 	bl	8000608 <__aeabi_dmul>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	1076      	asrs	r6, r6, #1
 8004a3e:	f107 0708 	add.w	r7, r7, #8
 8004a42:	d1f4      	bne.n	8004a2e <_strtod_l+0x5b6>
 8004a44:	b10b      	cbz	r3, 8004a4a <_strtod_l+0x5d2>
 8004a46:	4680      	mov	r8, r0
 8004a48:	4689      	mov	r9, r1
 8004a4a:	9b05      	ldr	r3, [sp, #20]
 8004a4c:	b1bb      	cbz	r3, 8004a7e <_strtod_l+0x606>
 8004a4e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004a52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	4649      	mov	r1, r9
 8004a5a:	dd10      	ble.n	8004a7e <_strtod_l+0x606>
 8004a5c:	2b1f      	cmp	r3, #31
 8004a5e:	f340 8128 	ble.w	8004cb2 <_strtod_l+0x83a>
 8004a62:	2b34      	cmp	r3, #52	; 0x34
 8004a64:	bfde      	ittt	le
 8004a66:	3b20      	suble	r3, #32
 8004a68:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004a6c:	fa02 f303 	lslle.w	r3, r2, r3
 8004a70:	f04f 0800 	mov.w	r8, #0
 8004a74:	bfcc      	ite	gt
 8004a76:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004a7a:	ea03 0901 	andle.w	r9, r3, r1
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2300      	movs	r3, #0
 8004a82:	4640      	mov	r0, r8
 8004a84:	4649      	mov	r1, r9
 8004a86:	f7fc f827 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d1a1      	bne.n	80049d2 <_strtod_l+0x55a>
 8004a8e:	9b06      	ldr	r3, [sp, #24]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	9908      	ldr	r1, [sp, #32]
 8004a94:	4623      	mov	r3, r4
 8004a96:	465a      	mov	r2, fp
 8004a98:	4650      	mov	r0, sl
 8004a9a:	f001 fe27 	bl	80066ec <__s2b>
 8004a9e:	9008      	str	r0, [sp, #32]
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f43f af24 	beq.w	80048ee <_strtod_l+0x476>
 8004aa6:	9b04      	ldr	r3, [sp, #16]
 8004aa8:	1b5d      	subs	r5, r3, r5
 8004aaa:	9b07      	ldr	r3, [sp, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bfb4      	ite	lt
 8004ab0:	462b      	movlt	r3, r5
 8004ab2:	2300      	movge	r3, #0
 8004ab4:	930e      	str	r3, [sp, #56]	; 0x38
 8004ab6:	9b07      	ldr	r3, [sp, #28]
 8004ab8:	f04f 0b00 	mov.w	fp, #0
 8004abc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ac0:	9316      	str	r3, [sp, #88]	; 0x58
 8004ac2:	f8cd b010 	str.w	fp, [sp, #16]
 8004ac6:	9b08      	ldr	r3, [sp, #32]
 8004ac8:	4650      	mov	r0, sl
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	f001 fd62 	bl	8006594 <_Balloc>
 8004ad0:	9006      	str	r0, [sp, #24]
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	f43f af13 	beq.w	80048fe <_strtod_l+0x486>
 8004ad8:	9b08      	ldr	r3, [sp, #32]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	3202      	adds	r2, #2
 8004ade:	f103 010c 	add.w	r1, r3, #12
 8004ae2:	0092      	lsls	r2, r2, #2
 8004ae4:	300c      	adds	r0, #12
 8004ae6:	f001 fd47 	bl	8006578 <memcpy>
 8004aea:	ab1e      	add	r3, sp, #120	; 0x78
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	ab1d      	add	r3, sp, #116	; 0x74
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	4642      	mov	r2, r8
 8004af4:	464b      	mov	r3, r9
 8004af6:	4650      	mov	r0, sl
 8004af8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004afc:	f002 f930 	bl	8006d60 <__d2b>
 8004b00:	901c      	str	r0, [sp, #112]	; 0x70
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f43f aefb 	beq.w	80048fe <_strtod_l+0x486>
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4650      	mov	r0, sl
 8004b0c:	f001 fe86 	bl	800681c <__i2b>
 8004b10:	9004      	str	r0, [sp, #16]
 8004b12:	4603      	mov	r3, r0
 8004b14:	2800      	cmp	r0, #0
 8004b16:	f43f aef2 	beq.w	80048fe <_strtod_l+0x486>
 8004b1a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004b1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004b1e:	2d00      	cmp	r5, #0
 8004b20:	bfab      	itete	ge
 8004b22:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004b24:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004b26:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004b28:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004b2a:	bfac      	ite	ge
 8004b2c:	18ee      	addge	r6, r5, r3
 8004b2e:	1b5c      	sublt	r4, r3, r5
 8004b30:	9b05      	ldr	r3, [sp, #20]
 8004b32:	1aed      	subs	r5, r5, r3
 8004b34:	4415      	add	r5, r2
 8004b36:	4b70      	ldr	r3, [pc, #448]	; (8004cf8 <_strtod_l+0x880>)
 8004b38:	3d01      	subs	r5, #1
 8004b3a:	429d      	cmp	r5, r3
 8004b3c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004b40:	f280 80c9 	bge.w	8004cd6 <_strtod_l+0x85e>
 8004b44:	1b5b      	subs	r3, r3, r5
 8004b46:	2b1f      	cmp	r3, #31
 8004b48:	eba2 0203 	sub.w	r2, r2, r3
 8004b4c:	f04f 0701 	mov.w	r7, #1
 8004b50:	f300 80b6 	bgt.w	8004cc0 <_strtod_l+0x848>
 8004b54:	fa07 f303 	lsl.w	r3, r7, r3
 8004b58:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b5a:	2500      	movs	r5, #0
 8004b5c:	18b7      	adds	r7, r6, r2
 8004b5e:	9b05      	ldr	r3, [sp, #20]
 8004b60:	42be      	cmp	r6, r7
 8004b62:	4414      	add	r4, r2
 8004b64:	441c      	add	r4, r3
 8004b66:	4633      	mov	r3, r6
 8004b68:	bfa8      	it	ge
 8004b6a:	463b      	movge	r3, r7
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	bfa8      	it	ge
 8004b70:	4623      	movge	r3, r4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bfc2      	ittt	gt
 8004b76:	1aff      	subgt	r7, r7, r3
 8004b78:	1ae4      	subgt	r4, r4, r3
 8004b7a:	1af6      	subgt	r6, r6, r3
 8004b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	dd17      	ble.n	8004bb2 <_strtod_l+0x73a>
 8004b82:	9904      	ldr	r1, [sp, #16]
 8004b84:	461a      	mov	r2, r3
 8004b86:	4650      	mov	r0, sl
 8004b88:	f001 ff04 	bl	8006994 <__pow5mult>
 8004b8c:	9004      	str	r0, [sp, #16]
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f43f aeb5 	beq.w	80048fe <_strtod_l+0x486>
 8004b94:	4601      	mov	r1, r0
 8004b96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b98:	4650      	mov	r0, sl
 8004b9a:	f001 fe55 	bl	8006848 <__multiply>
 8004b9e:	9009      	str	r0, [sp, #36]	; 0x24
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	f43f aeac 	beq.w	80048fe <_strtod_l+0x486>
 8004ba6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ba8:	4650      	mov	r0, sl
 8004baa:	f001 fd33 	bl	8006614 <_Bfree>
 8004bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb0:	931c      	str	r3, [sp, #112]	; 0x70
 8004bb2:	2f00      	cmp	r7, #0
 8004bb4:	f300 8093 	bgt.w	8004cde <_strtod_l+0x866>
 8004bb8:	9b07      	ldr	r3, [sp, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	dd08      	ble.n	8004bd0 <_strtod_l+0x758>
 8004bbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004bc0:	9906      	ldr	r1, [sp, #24]
 8004bc2:	4650      	mov	r0, sl
 8004bc4:	f001 fee6 	bl	8006994 <__pow5mult>
 8004bc8:	9006      	str	r0, [sp, #24]
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	f43f ae97 	beq.w	80048fe <_strtod_l+0x486>
 8004bd0:	2c00      	cmp	r4, #0
 8004bd2:	dd08      	ble.n	8004be6 <_strtod_l+0x76e>
 8004bd4:	9906      	ldr	r1, [sp, #24]
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	4650      	mov	r0, sl
 8004bda:	f001 ff35 	bl	8006a48 <__lshift>
 8004bde:	9006      	str	r0, [sp, #24]
 8004be0:	2800      	cmp	r0, #0
 8004be2:	f43f ae8c 	beq.w	80048fe <_strtod_l+0x486>
 8004be6:	2e00      	cmp	r6, #0
 8004be8:	dd08      	ble.n	8004bfc <_strtod_l+0x784>
 8004bea:	9904      	ldr	r1, [sp, #16]
 8004bec:	4632      	mov	r2, r6
 8004bee:	4650      	mov	r0, sl
 8004bf0:	f001 ff2a 	bl	8006a48 <__lshift>
 8004bf4:	9004      	str	r0, [sp, #16]
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f43f ae81 	beq.w	80048fe <_strtod_l+0x486>
 8004bfc:	9a06      	ldr	r2, [sp, #24]
 8004bfe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c00:	4650      	mov	r0, sl
 8004c02:	f001 ffa9 	bl	8006b58 <__mdiff>
 8004c06:	4683      	mov	fp, r0
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	f43f ae78 	beq.w	80048fe <_strtod_l+0x486>
 8004c0e:	2400      	movs	r4, #0
 8004c10:	68c3      	ldr	r3, [r0, #12]
 8004c12:	9904      	ldr	r1, [sp, #16]
 8004c14:	60c4      	str	r4, [r0, #12]
 8004c16:	930d      	str	r3, [sp, #52]	; 0x34
 8004c18:	f001 ff82 	bl	8006b20 <__mcmp>
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	da71      	bge.n	8004d04 <_strtod_l+0x88c>
 8004c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c22:	ea53 0308 	orrs.w	r3, r3, r8
 8004c26:	f040 8097 	bne.w	8004d58 <_strtod_l+0x8e0>
 8004c2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 8092 	bne.w	8004d58 <_strtod_l+0x8e0>
 8004c34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c38:	0d1b      	lsrs	r3, r3, #20
 8004c3a:	051b      	lsls	r3, r3, #20
 8004c3c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004c40:	f240 808a 	bls.w	8004d58 <_strtod_l+0x8e0>
 8004c44:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004c48:	b923      	cbnz	r3, 8004c54 <_strtod_l+0x7dc>
 8004c4a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	f340 8082 	ble.w	8004d58 <_strtod_l+0x8e0>
 8004c54:	4659      	mov	r1, fp
 8004c56:	2201      	movs	r2, #1
 8004c58:	4650      	mov	r0, sl
 8004c5a:	f001 fef5 	bl	8006a48 <__lshift>
 8004c5e:	9904      	ldr	r1, [sp, #16]
 8004c60:	4683      	mov	fp, r0
 8004c62:	f001 ff5d 	bl	8006b20 <__mcmp>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	dd76      	ble.n	8004d58 <_strtod_l+0x8e0>
 8004c6a:	9905      	ldr	r1, [sp, #20]
 8004c6c:	4a23      	ldr	r2, [pc, #140]	; (8004cfc <_strtod_l+0x884>)
 8004c6e:	464b      	mov	r3, r9
 8004c70:	2900      	cmp	r1, #0
 8004c72:	f000 8092 	beq.w	8004d9a <_strtod_l+0x922>
 8004c76:	ea02 0109 	and.w	r1, r2, r9
 8004c7a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004c7e:	f300 808c 	bgt.w	8004d9a <_strtod_l+0x922>
 8004c82:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004c86:	f77f aeac 	ble.w	80049e2 <_strtod_l+0x56a>
 8004c8a:	4a1d      	ldr	r2, [pc, #116]	; (8004d00 <_strtod_l+0x888>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004c92:	4640      	mov	r0, r8
 8004c94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004c98:	4649      	mov	r1, r9
 8004c9a:	f7fb fcb5 	bl	8000608 <__aeabi_dmul>
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4303      	orrs	r3, r0
 8004ca2:	bf08      	it	eq
 8004ca4:	2322      	moveq	r3, #34	; 0x22
 8004ca6:	4680      	mov	r8, r0
 8004ca8:	4689      	mov	r9, r1
 8004caa:	bf08      	it	eq
 8004cac:	f8ca 3000 	streq.w	r3, [sl]
 8004cb0:	e630      	b.n	8004914 <_strtod_l+0x49c>
 8004cb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	ea03 0808 	and.w	r8, r3, r8
 8004cbe:	e6de      	b.n	8004a7e <_strtod_l+0x606>
 8004cc0:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004cc4:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004cc8:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004ccc:	35e2      	adds	r5, #226	; 0xe2
 8004cce:	fa07 f505 	lsl.w	r5, r7, r5
 8004cd2:	970f      	str	r7, [sp, #60]	; 0x3c
 8004cd4:	e742      	b.n	8004b5c <_strtod_l+0x6e4>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	2500      	movs	r5, #0
 8004cda:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cdc:	e73e      	b.n	8004b5c <_strtod_l+0x6e4>
 8004cde:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ce0:	463a      	mov	r2, r7
 8004ce2:	4650      	mov	r0, sl
 8004ce4:	f001 feb0 	bl	8006a48 <__lshift>
 8004ce8:	901c      	str	r0, [sp, #112]	; 0x70
 8004cea:	2800      	cmp	r0, #0
 8004cec:	f47f af64 	bne.w	8004bb8 <_strtod_l+0x740>
 8004cf0:	e605      	b.n	80048fe <_strtod_l+0x486>
 8004cf2:	bf00      	nop
 8004cf4:	08007fa0 	.word	0x08007fa0
 8004cf8:	fffffc02 	.word	0xfffffc02
 8004cfc:	7ff00000 	.word	0x7ff00000
 8004d00:	39500000 	.word	0x39500000
 8004d04:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004d08:	d166      	bne.n	8004dd8 <_strtod_l+0x960>
 8004d0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d10:	b35a      	cbz	r2, 8004d6a <_strtod_l+0x8f2>
 8004d12:	4a9d      	ldr	r2, [pc, #628]	; (8004f88 <_strtod_l+0xb10>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d12c      	bne.n	8004d72 <_strtod_l+0x8fa>
 8004d18:	9b05      	ldr	r3, [sp, #20]
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	b303      	cbz	r3, 8004d60 <_strtod_l+0x8e8>
 8004d1e:	4a9b      	ldr	r2, [pc, #620]	; (8004f8c <_strtod_l+0xb14>)
 8004d20:	464b      	mov	r3, r9
 8004d22:	401a      	ands	r2, r3
 8004d24:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d2c:	d81b      	bhi.n	8004d66 <_strtod_l+0x8ee>
 8004d2e:	0d12      	lsrs	r2, r2, #20
 8004d30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	4298      	cmp	r0, r3
 8004d3a:	d11a      	bne.n	8004d72 <_strtod_l+0x8fa>
 8004d3c:	4b94      	ldr	r3, [pc, #592]	; (8004f90 <_strtod_l+0xb18>)
 8004d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d102      	bne.n	8004d4a <_strtod_l+0x8d2>
 8004d44:	3001      	adds	r0, #1
 8004d46:	f43f adda 	beq.w	80048fe <_strtod_l+0x486>
 8004d4a:	4b90      	ldr	r3, [pc, #576]	; (8004f8c <_strtod_l+0xb14>)
 8004d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d4e:	401a      	ands	r2, r3
 8004d50:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004d54:	f04f 0800 	mov.w	r8, #0
 8004d58:	9b05      	ldr	r3, [sp, #20]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d195      	bne.n	8004c8a <_strtod_l+0x812>
 8004d5e:	e5d9      	b.n	8004914 <_strtod_l+0x49c>
 8004d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d64:	e7e8      	b.n	8004d38 <_strtod_l+0x8c0>
 8004d66:	460b      	mov	r3, r1
 8004d68:	e7e6      	b.n	8004d38 <_strtod_l+0x8c0>
 8004d6a:	ea53 0308 	orrs.w	r3, r3, r8
 8004d6e:	f43f af7c 	beq.w	8004c6a <_strtod_l+0x7f2>
 8004d72:	b1e5      	cbz	r5, 8004dae <_strtod_l+0x936>
 8004d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d76:	421d      	tst	r5, r3
 8004d78:	d0ee      	beq.n	8004d58 <_strtod_l+0x8e0>
 8004d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d7c:	9a05      	ldr	r2, [sp, #20]
 8004d7e:	4640      	mov	r0, r8
 8004d80:	4649      	mov	r1, r9
 8004d82:	b1c3      	cbz	r3, 8004db6 <_strtod_l+0x93e>
 8004d84:	f7ff fb54 	bl	8004430 <sulp>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d90:	f7fb fa84 	bl	800029c <__adddf3>
 8004d94:	4680      	mov	r8, r0
 8004d96:	4689      	mov	r9, r1
 8004d98:	e7de      	b.n	8004d58 <_strtod_l+0x8e0>
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004da0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004da4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004da8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004dac:	e7d4      	b.n	8004d58 <_strtod_l+0x8e0>
 8004dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004db0:	ea13 0f08 	tst.w	r3, r8
 8004db4:	e7e0      	b.n	8004d78 <_strtod_l+0x900>
 8004db6:	f7ff fb3b 	bl	8004430 <sulp>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dc2:	f7fb fa69 	bl	8000298 <__aeabi_dsub>
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4680      	mov	r8, r0
 8004dcc:	4689      	mov	r9, r1
 8004dce:	f7fb fe83 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d0c0      	beq.n	8004d58 <_strtod_l+0x8e0>
 8004dd6:	e604      	b.n	80049e2 <_strtod_l+0x56a>
 8004dd8:	9904      	ldr	r1, [sp, #16]
 8004dda:	4658      	mov	r0, fp
 8004ddc:	f002 f81c 	bl	8006e18 <__ratio>
 8004de0:	2200      	movs	r2, #0
 8004de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de6:	4606      	mov	r6, r0
 8004de8:	460f      	mov	r7, r1
 8004dea:	f7fb fe89 	bl	8000b00 <__aeabi_dcmple>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d075      	beq.n	8004ede <_strtod_l+0xa66>
 8004df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d047      	beq.n	8004e88 <_strtod_l+0xa10>
 8004df8:	4f66      	ldr	r7, [pc, #408]	; (8004f94 <_strtod_l+0xb1c>)
 8004dfa:	2600      	movs	r6, #0
 8004dfc:	4d65      	ldr	r5, [pc, #404]	; (8004f94 <_strtod_l+0xb1c>)
 8004dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e04:	0d1b      	lsrs	r3, r3, #20
 8004e06:	051b      	lsls	r3, r3, #20
 8004e08:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e0c:	4b62      	ldr	r3, [pc, #392]	; (8004f98 <_strtod_l+0xb20>)
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	f040 80ca 	bne.w	8004fa8 <_strtod_l+0xb30>
 8004e14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e18:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004e22:	4640      	mov	r0, r8
 8004e24:	4649      	mov	r1, r9
 8004e26:	f001 ff21 	bl	8006c6c <__ulp>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4630      	mov	r0, r6
 8004e30:	4639      	mov	r1, r7
 8004e32:	f7fb fbe9 	bl	8000608 <__aeabi_dmul>
 8004e36:	4642      	mov	r2, r8
 8004e38:	464b      	mov	r3, r9
 8004e3a:	f7fb fa2f 	bl	800029c <__adddf3>
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4952      	ldr	r1, [pc, #328]	; (8004f8c <_strtod_l+0xb14>)
 8004e42:	4a56      	ldr	r2, [pc, #344]	; (8004f9c <_strtod_l+0xb24>)
 8004e44:	4019      	ands	r1, r3
 8004e46:	4291      	cmp	r1, r2
 8004e48:	4680      	mov	r8, r0
 8004e4a:	d95e      	bls.n	8004f0a <_strtod_l+0xa92>
 8004e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e4e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d103      	bne.n	8004e5e <_strtod_l+0x9e6>
 8004e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f43f ad50 	beq.w	80048fe <_strtod_l+0x486>
 8004e5e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8004f90 <_strtod_l+0xb18>
 8004e62:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004e66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e68:	4650      	mov	r0, sl
 8004e6a:	f001 fbd3 	bl	8006614 <_Bfree>
 8004e6e:	9906      	ldr	r1, [sp, #24]
 8004e70:	4650      	mov	r0, sl
 8004e72:	f001 fbcf 	bl	8006614 <_Bfree>
 8004e76:	9904      	ldr	r1, [sp, #16]
 8004e78:	4650      	mov	r0, sl
 8004e7a:	f001 fbcb 	bl	8006614 <_Bfree>
 8004e7e:	4659      	mov	r1, fp
 8004e80:	4650      	mov	r0, sl
 8004e82:	f001 fbc7 	bl	8006614 <_Bfree>
 8004e86:	e61e      	b.n	8004ac6 <_strtod_l+0x64e>
 8004e88:	f1b8 0f00 	cmp.w	r8, #0
 8004e8c:	d119      	bne.n	8004ec2 <_strtod_l+0xa4a>
 8004e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e94:	b9e3      	cbnz	r3, 8004ed0 <_strtod_l+0xa58>
 8004e96:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <_strtod_l+0xb1c>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	4639      	mov	r1, r7
 8004e9e:	f7fb fe25 	bl	8000aec <__aeabi_dcmplt>
 8004ea2:	b9c8      	cbnz	r0, 8004ed8 <_strtod_l+0xa60>
 8004ea4:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <_strtod_l+0xb28>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	4639      	mov	r1, r7
 8004eac:	f7fb fbac 	bl	8000608 <__aeabi_dmul>
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	460d      	mov	r5, r1
 8004eb4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004eb8:	9418      	str	r4, [sp, #96]	; 0x60
 8004eba:	9319      	str	r3, [sp, #100]	; 0x64
 8004ebc:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004ec0:	e79d      	b.n	8004dfe <_strtod_l+0x986>
 8004ec2:	f1b8 0f01 	cmp.w	r8, #1
 8004ec6:	d103      	bne.n	8004ed0 <_strtod_l+0xa58>
 8004ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f43f ad89 	beq.w	80049e2 <_strtod_l+0x56a>
 8004ed0:	4f34      	ldr	r7, [pc, #208]	; (8004fa4 <_strtod_l+0xb2c>)
 8004ed2:	2600      	movs	r6, #0
 8004ed4:	2400      	movs	r4, #0
 8004ed6:	e791      	b.n	8004dfc <_strtod_l+0x984>
 8004ed8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004eda:	4d31      	ldr	r5, [pc, #196]	; (8004fa0 <_strtod_l+0xb28>)
 8004edc:	e7ea      	b.n	8004eb4 <_strtod_l+0xa3c>
 8004ede:	4b30      	ldr	r3, [pc, #192]	; (8004fa0 <_strtod_l+0xb28>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	f7fb fb8f 	bl	8000608 <__aeabi_dmul>
 8004eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eec:	4604      	mov	r4, r0
 8004eee:	460d      	mov	r5, r1
 8004ef0:	b933      	cbnz	r3, 8004f00 <_strtod_l+0xa88>
 8004ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ef6:	9010      	str	r0, [sp, #64]	; 0x40
 8004ef8:	9311      	str	r3, [sp, #68]	; 0x44
 8004efa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004efe:	e77e      	b.n	8004dfe <_strtod_l+0x986>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004f08:	e7f7      	b.n	8004efa <_strtod_l+0xa82>
 8004f0a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004f0e:	9b05      	ldr	r3, [sp, #20]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1a8      	bne.n	8004e66 <_strtod_l+0x9ee>
 8004f14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f1a:	0d1b      	lsrs	r3, r3, #20
 8004f1c:	051b      	lsls	r3, r3, #20
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d1a1      	bne.n	8004e66 <_strtod_l+0x9ee>
 8004f22:	4620      	mov	r0, r4
 8004f24:	4629      	mov	r1, r5
 8004f26:	f7fb fecf 	bl	8000cc8 <__aeabi_d2lz>
 8004f2a:	f7fb fb3f 	bl	80005ac <__aeabi_l2d>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4620      	mov	r0, r4
 8004f34:	4629      	mov	r1, r5
 8004f36:	f7fb f9af 	bl	8000298 <__aeabi_dsub>
 8004f3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f40:	ea43 0308 	orr.w	r3, r3, r8
 8004f44:	4313      	orrs	r3, r2
 8004f46:	4604      	mov	r4, r0
 8004f48:	460d      	mov	r5, r1
 8004f4a:	d068      	beq.n	800501e <_strtod_l+0xba6>
 8004f4c:	a30a      	add	r3, pc, #40	; (adr r3, 8004f78 <_strtod_l+0xb00>)
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f7fb fdcb 	bl	8000aec <__aeabi_dcmplt>
 8004f56:	2800      	cmp	r0, #0
 8004f58:	f47f acdc 	bne.w	8004914 <_strtod_l+0x49c>
 8004f5c:	a308      	add	r3, pc, #32	; (adr r3, 8004f80 <_strtod_l+0xb08>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	4620      	mov	r0, r4
 8004f64:	4629      	mov	r1, r5
 8004f66:	f7fb fddf 	bl	8000b28 <__aeabi_dcmpgt>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f43f af7b 	beq.w	8004e66 <_strtod_l+0x9ee>
 8004f70:	e4d0      	b.n	8004914 <_strtod_l+0x49c>
 8004f72:	bf00      	nop
 8004f74:	f3af 8000 	nop.w
 8004f78:	94a03595 	.word	0x94a03595
 8004f7c:	3fdfffff 	.word	0x3fdfffff
 8004f80:	35afe535 	.word	0x35afe535
 8004f84:	3fe00000 	.word	0x3fe00000
 8004f88:	000fffff 	.word	0x000fffff
 8004f8c:	7ff00000 	.word	0x7ff00000
 8004f90:	7fefffff 	.word	0x7fefffff
 8004f94:	3ff00000 	.word	0x3ff00000
 8004f98:	7fe00000 	.word	0x7fe00000
 8004f9c:	7c9fffff 	.word	0x7c9fffff
 8004fa0:	3fe00000 	.word	0x3fe00000
 8004fa4:	bff00000 	.word	0xbff00000
 8004fa8:	9b05      	ldr	r3, [sp, #20]
 8004faa:	b313      	cbz	r3, 8004ff2 <_strtod_l+0xb7a>
 8004fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004fb2:	d81e      	bhi.n	8004ff2 <_strtod_l+0xb7a>
 8004fb4:	a326      	add	r3, pc, #152	; (adr r3, 8005050 <_strtod_l+0xbd8>)
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	4620      	mov	r0, r4
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f7fb fd9f 	bl	8000b00 <__aeabi_dcmple>
 8004fc2:	b190      	cbz	r0, 8004fea <_strtod_l+0xb72>
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7fb fdf6 	bl	8000bb8 <__aeabi_d2uiz>
 8004fcc:	2801      	cmp	r0, #1
 8004fce:	bf38      	it	cc
 8004fd0:	2001      	movcc	r0, #1
 8004fd2:	f7fb fa9f 	bl	8000514 <__aeabi_ui2d>
 8004fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fd8:	4604      	mov	r4, r0
 8004fda:	460d      	mov	r5, r1
 8004fdc:	b9d3      	cbnz	r3, 8005014 <_strtod_l+0xb9c>
 8004fde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fe2:	9012      	str	r0, [sp, #72]	; 0x48
 8004fe4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004fe6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004fea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004ff0:	1a9f      	subs	r7, r3, r2
 8004ff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ff6:	f001 fe39 	bl	8006c6c <__ulp>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4630      	mov	r0, r6
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fb01 	bl	8000608 <__aeabi_dmul>
 8005006:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800500a:	f7fb f947 	bl	800029c <__adddf3>
 800500e:	4680      	mov	r8, r0
 8005010:	4689      	mov	r9, r1
 8005012:	e77c      	b.n	8004f0e <_strtod_l+0xa96>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800501c:	e7e3      	b.n	8004fe6 <_strtod_l+0xb6e>
 800501e:	a30e      	add	r3, pc, #56	; (adr r3, 8005058 <_strtod_l+0xbe0>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f7fb fd62 	bl	8000aec <__aeabi_dcmplt>
 8005028:	e79f      	b.n	8004f6a <_strtod_l+0xaf2>
 800502a:	2300      	movs	r3, #0
 800502c:	930c      	str	r3, [sp, #48]	; 0x30
 800502e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005030:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	f7ff ba65 	b.w	8004502 <_strtod_l+0x8a>
 8005038:	2b65      	cmp	r3, #101	; 0x65
 800503a:	f43f ab5c 	beq.w	80046f6 <_strtod_l+0x27e>
 800503e:	2b45      	cmp	r3, #69	; 0x45
 8005040:	f43f ab59 	beq.w	80046f6 <_strtod_l+0x27e>
 8005044:	2201      	movs	r2, #1
 8005046:	f7ff bb8d 	b.w	8004764 <_strtod_l+0x2ec>
 800504a:	bf00      	nop
 800504c:	f3af 8000 	nop.w
 8005050:	ffc00000 	.word	0xffc00000
 8005054:	41dfffff 	.word	0x41dfffff
 8005058:	94a03595 	.word	0x94a03595
 800505c:	3fcfffff 	.word	0x3fcfffff

08005060 <_strtod_r>:
 8005060:	4b01      	ldr	r3, [pc, #4]	; (8005068 <_strtod_r+0x8>)
 8005062:	f7ff ba09 	b.w	8004478 <_strtod_l>
 8005066:	bf00      	nop
 8005068:	200000a8 	.word	0x200000a8

0800506c <_strtol_l.isra.0>:
 800506c:	2b01      	cmp	r3, #1
 800506e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005072:	4686      	mov	lr, r0
 8005074:	d001      	beq.n	800507a <_strtol_l.isra.0+0xe>
 8005076:	2b24      	cmp	r3, #36	; 0x24
 8005078:	d906      	bls.n	8005088 <_strtol_l.isra.0+0x1c>
 800507a:	f7fe fb17 	bl	80036ac <__errno>
 800507e:	2316      	movs	r3, #22
 8005080:	6003      	str	r3, [r0, #0]
 8005082:	2000      	movs	r0, #0
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	4e3a      	ldr	r6, [pc, #232]	; (8005174 <_strtol_l.isra.0+0x108>)
 800508a:	468c      	mov	ip, r1
 800508c:	4660      	mov	r0, ip
 800508e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005092:	5da5      	ldrb	r5, [r4, r6]
 8005094:	f015 0508 	ands.w	r5, r5, #8
 8005098:	d1f8      	bne.n	800508c <_strtol_l.isra.0+0x20>
 800509a:	2c2d      	cmp	r4, #45	; 0x2d
 800509c:	d133      	bne.n	8005106 <_strtol_l.isra.0+0x9a>
 800509e:	f89c 4000 	ldrb.w	r4, [ip]
 80050a2:	f04f 0801 	mov.w	r8, #1
 80050a6:	f100 0c02 	add.w	ip, r0, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d05d      	beq.n	800516a <_strtol_l.isra.0+0xfe>
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d10c      	bne.n	80050cc <_strtol_l.isra.0+0x60>
 80050b2:	2c30      	cmp	r4, #48	; 0x30
 80050b4:	d10a      	bne.n	80050cc <_strtol_l.isra.0+0x60>
 80050b6:	f89c 0000 	ldrb.w	r0, [ip]
 80050ba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80050be:	2858      	cmp	r0, #88	; 0x58
 80050c0:	d14e      	bne.n	8005160 <_strtol_l.isra.0+0xf4>
 80050c2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80050c6:	2310      	movs	r3, #16
 80050c8:	f10c 0c02 	add.w	ip, ip, #2
 80050cc:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80050d0:	3f01      	subs	r7, #1
 80050d2:	2500      	movs	r5, #0
 80050d4:	fbb7 f9f3 	udiv	r9, r7, r3
 80050d8:	4628      	mov	r0, r5
 80050da:	fb03 7a19 	mls	sl, r3, r9, r7
 80050de:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80050e2:	2e09      	cmp	r6, #9
 80050e4:	d818      	bhi.n	8005118 <_strtol_l.isra.0+0xac>
 80050e6:	4634      	mov	r4, r6
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	dd24      	ble.n	8005136 <_strtol_l.isra.0+0xca>
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	db1f      	blt.n	8005130 <_strtol_l.isra.0+0xc4>
 80050f0:	4581      	cmp	r9, r0
 80050f2:	d31d      	bcc.n	8005130 <_strtol_l.isra.0+0xc4>
 80050f4:	d101      	bne.n	80050fa <_strtol_l.isra.0+0x8e>
 80050f6:	45a2      	cmp	sl, r4
 80050f8:	db1a      	blt.n	8005130 <_strtol_l.isra.0+0xc4>
 80050fa:	fb00 4003 	mla	r0, r0, r3, r4
 80050fe:	2501      	movs	r5, #1
 8005100:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005104:	e7eb      	b.n	80050de <_strtol_l.isra.0+0x72>
 8005106:	2c2b      	cmp	r4, #43	; 0x2b
 8005108:	bf08      	it	eq
 800510a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800510e:	46a8      	mov	r8, r5
 8005110:	bf08      	it	eq
 8005112:	f100 0c02 	addeq.w	ip, r0, #2
 8005116:	e7c8      	b.n	80050aa <_strtol_l.isra.0+0x3e>
 8005118:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800511c:	2e19      	cmp	r6, #25
 800511e:	d801      	bhi.n	8005124 <_strtol_l.isra.0+0xb8>
 8005120:	3c37      	subs	r4, #55	; 0x37
 8005122:	e7e1      	b.n	80050e8 <_strtol_l.isra.0+0x7c>
 8005124:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005128:	2e19      	cmp	r6, #25
 800512a:	d804      	bhi.n	8005136 <_strtol_l.isra.0+0xca>
 800512c:	3c57      	subs	r4, #87	; 0x57
 800512e:	e7db      	b.n	80050e8 <_strtol_l.isra.0+0x7c>
 8005130:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005134:	e7e4      	b.n	8005100 <_strtol_l.isra.0+0x94>
 8005136:	2d00      	cmp	r5, #0
 8005138:	da08      	bge.n	800514c <_strtol_l.isra.0+0xe0>
 800513a:	2322      	movs	r3, #34	; 0x22
 800513c:	f8ce 3000 	str.w	r3, [lr]
 8005140:	4638      	mov	r0, r7
 8005142:	2a00      	cmp	r2, #0
 8005144:	d09e      	beq.n	8005084 <_strtol_l.isra.0+0x18>
 8005146:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800514a:	e007      	b.n	800515c <_strtol_l.isra.0+0xf0>
 800514c:	f1b8 0f00 	cmp.w	r8, #0
 8005150:	d000      	beq.n	8005154 <_strtol_l.isra.0+0xe8>
 8005152:	4240      	negs	r0, r0
 8005154:	2a00      	cmp	r2, #0
 8005156:	d095      	beq.n	8005084 <_strtol_l.isra.0+0x18>
 8005158:	2d00      	cmp	r5, #0
 800515a:	d1f4      	bne.n	8005146 <_strtol_l.isra.0+0xda>
 800515c:	6011      	str	r1, [r2, #0]
 800515e:	e791      	b.n	8005084 <_strtol_l.isra.0+0x18>
 8005160:	2430      	movs	r4, #48	; 0x30
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1b2      	bne.n	80050cc <_strtol_l.isra.0+0x60>
 8005166:	2308      	movs	r3, #8
 8005168:	e7b0      	b.n	80050cc <_strtol_l.isra.0+0x60>
 800516a:	2c30      	cmp	r4, #48	; 0x30
 800516c:	d0a3      	beq.n	80050b6 <_strtol_l.isra.0+0x4a>
 800516e:	230a      	movs	r3, #10
 8005170:	e7ac      	b.n	80050cc <_strtol_l.isra.0+0x60>
 8005172:	bf00      	nop
 8005174:	08007fc9 	.word	0x08007fc9

08005178 <_strtol_r>:
 8005178:	f7ff bf78 	b.w	800506c <_strtol_l.isra.0>

0800517c <quorem>:
 800517c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005180:	6903      	ldr	r3, [r0, #16]
 8005182:	690c      	ldr	r4, [r1, #16]
 8005184:	42a3      	cmp	r3, r4
 8005186:	4607      	mov	r7, r0
 8005188:	f2c0 8081 	blt.w	800528e <quorem+0x112>
 800518c:	3c01      	subs	r4, #1
 800518e:	f101 0814 	add.w	r8, r1, #20
 8005192:	f100 0514 	add.w	r5, r0, #20
 8005196:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051a4:	3301      	adds	r3, #1
 80051a6:	429a      	cmp	r2, r3
 80051a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80051b4:	d331      	bcc.n	800521a <quorem+0x9e>
 80051b6:	f04f 0e00 	mov.w	lr, #0
 80051ba:	4640      	mov	r0, r8
 80051bc:	46ac      	mov	ip, r5
 80051be:	46f2      	mov	sl, lr
 80051c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80051c4:	b293      	uxth	r3, r2
 80051c6:	fb06 e303 	mla	r3, r6, r3, lr
 80051ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	ebaa 0303 	sub.w	r3, sl, r3
 80051d4:	0c12      	lsrs	r2, r2, #16
 80051d6:	f8dc a000 	ldr.w	sl, [ip]
 80051da:	fb06 e202 	mla	r2, r6, r2, lr
 80051de:	fa13 f38a 	uxtah	r3, r3, sl
 80051e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051e6:	fa1f fa82 	uxth.w	sl, r2
 80051ea:	f8dc 2000 	ldr.w	r2, [ip]
 80051ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80051f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051fc:	4581      	cmp	r9, r0
 80051fe:	f84c 3b04 	str.w	r3, [ip], #4
 8005202:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005206:	d2db      	bcs.n	80051c0 <quorem+0x44>
 8005208:	f855 300b 	ldr.w	r3, [r5, fp]
 800520c:	b92b      	cbnz	r3, 800521a <quorem+0x9e>
 800520e:	9b01      	ldr	r3, [sp, #4]
 8005210:	3b04      	subs	r3, #4
 8005212:	429d      	cmp	r5, r3
 8005214:	461a      	mov	r2, r3
 8005216:	d32e      	bcc.n	8005276 <quorem+0xfa>
 8005218:	613c      	str	r4, [r7, #16]
 800521a:	4638      	mov	r0, r7
 800521c:	f001 fc80 	bl	8006b20 <__mcmp>
 8005220:	2800      	cmp	r0, #0
 8005222:	db24      	blt.n	800526e <quorem+0xf2>
 8005224:	3601      	adds	r6, #1
 8005226:	4628      	mov	r0, r5
 8005228:	f04f 0c00 	mov.w	ip, #0
 800522c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005230:	f8d0 e000 	ldr.w	lr, [r0]
 8005234:	b293      	uxth	r3, r2
 8005236:	ebac 0303 	sub.w	r3, ip, r3
 800523a:	0c12      	lsrs	r2, r2, #16
 800523c:	fa13 f38e 	uxtah	r3, r3, lr
 8005240:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005248:	b29b      	uxth	r3, r3
 800524a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800524e:	45c1      	cmp	r9, r8
 8005250:	f840 3b04 	str.w	r3, [r0], #4
 8005254:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005258:	d2e8      	bcs.n	800522c <quorem+0xb0>
 800525a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800525e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005262:	b922      	cbnz	r2, 800526e <quorem+0xf2>
 8005264:	3b04      	subs	r3, #4
 8005266:	429d      	cmp	r5, r3
 8005268:	461a      	mov	r2, r3
 800526a:	d30a      	bcc.n	8005282 <quorem+0x106>
 800526c:	613c      	str	r4, [r7, #16]
 800526e:	4630      	mov	r0, r6
 8005270:	b003      	add	sp, #12
 8005272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	3b04      	subs	r3, #4
 800527a:	2a00      	cmp	r2, #0
 800527c:	d1cc      	bne.n	8005218 <quorem+0x9c>
 800527e:	3c01      	subs	r4, #1
 8005280:	e7c7      	b.n	8005212 <quorem+0x96>
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	3b04      	subs	r3, #4
 8005286:	2a00      	cmp	r2, #0
 8005288:	d1f0      	bne.n	800526c <quorem+0xf0>
 800528a:	3c01      	subs	r4, #1
 800528c:	e7eb      	b.n	8005266 <quorem+0xea>
 800528e:	2000      	movs	r0, #0
 8005290:	e7ee      	b.n	8005270 <quorem+0xf4>
 8005292:	0000      	movs	r0, r0
 8005294:	0000      	movs	r0, r0
	...

08005298 <_dtoa_r>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800529e:	b099      	sub	sp, #100	; 0x64
 80052a0:	4616      	mov	r6, r2
 80052a2:	461f      	mov	r7, r3
 80052a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052a8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80052ac:	4605      	mov	r5, r0
 80052ae:	b974      	cbnz	r4, 80052ce <_dtoa_r+0x36>
 80052b0:	2010      	movs	r0, #16
 80052b2:	f001 f947 	bl	8006544 <malloc>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6268      	str	r0, [r5, #36]	; 0x24
 80052ba:	b920      	cbnz	r0, 80052c6 <_dtoa_r+0x2e>
 80052bc:	4ba8      	ldr	r3, [pc, #672]	; (8005560 <_dtoa_r+0x2c8>)
 80052be:	21ea      	movs	r1, #234	; 0xea
 80052c0:	48a8      	ldr	r0, [pc, #672]	; (8005564 <_dtoa_r+0x2cc>)
 80052c2:	f002 f863 	bl	800738c <__assert_func>
 80052c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052ca:	6004      	str	r4, [r0, #0]
 80052cc:	60c4      	str	r4, [r0, #12]
 80052ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052d0:	6819      	ldr	r1, [r3, #0]
 80052d2:	b151      	cbz	r1, 80052ea <_dtoa_r+0x52>
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	604a      	str	r2, [r1, #4]
 80052d8:	2301      	movs	r3, #1
 80052da:	4093      	lsls	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
 80052de:	4628      	mov	r0, r5
 80052e0:	f001 f998 	bl	8006614 <_Bfree>
 80052e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	1e3b      	subs	r3, r7, #0
 80052ec:	bfb9      	ittee	lt
 80052ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	9305      	strlt	r3, [sp, #20]
 80052f4:	2300      	movge	r3, #0
 80052f6:	f8c8 3000 	strge.w	r3, [r8]
 80052fa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80052fe:	4b9a      	ldr	r3, [pc, #616]	; (8005568 <_dtoa_r+0x2d0>)
 8005300:	bfbc      	itt	lt
 8005302:	2201      	movlt	r2, #1
 8005304:	f8c8 2000 	strlt.w	r2, [r8]
 8005308:	ea33 0309 	bics.w	r3, r3, r9
 800530c:	d119      	bne.n	8005342 <_dtoa_r+0xaa>
 800530e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005310:	f242 730f 	movw	r3, #9999	; 0x270f
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800531a:	4333      	orrs	r3, r6
 800531c:	f000 8581 	beq.w	8005e22 <_dtoa_r+0xb8a>
 8005320:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005322:	b953      	cbnz	r3, 800533a <_dtoa_r+0xa2>
 8005324:	4b91      	ldr	r3, [pc, #580]	; (800556c <_dtoa_r+0x2d4>)
 8005326:	e022      	b.n	800536e <_dtoa_r+0xd6>
 8005328:	4b91      	ldr	r3, [pc, #580]	; (8005570 <_dtoa_r+0x2d8>)
 800532a:	9308      	str	r3, [sp, #32]
 800532c:	3308      	adds	r3, #8
 800532e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	9808      	ldr	r0, [sp, #32]
 8005334:	b019      	add	sp, #100	; 0x64
 8005336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533a:	4b8c      	ldr	r3, [pc, #560]	; (800556c <_dtoa_r+0x2d4>)
 800533c:	9308      	str	r3, [sp, #32]
 800533e:	3303      	adds	r3, #3
 8005340:	e7f5      	b.n	800532e <_dtoa_r+0x96>
 8005342:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005346:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800534a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800534e:	2200      	movs	r2, #0
 8005350:	2300      	movs	r3, #0
 8005352:	f7fb fbc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005356:	4680      	mov	r8, r0
 8005358:	b158      	cbz	r0, 8005372 <_dtoa_r+0xda>
 800535a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800535c:	2301      	movs	r3, #1
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 855a 	beq.w	8005e1c <_dtoa_r+0xb84>
 8005368:	4882      	ldr	r0, [pc, #520]	; (8005574 <_dtoa_r+0x2dc>)
 800536a:	6018      	str	r0, [r3, #0]
 800536c:	1e43      	subs	r3, r0, #1
 800536e:	9308      	str	r3, [sp, #32]
 8005370:	e7df      	b.n	8005332 <_dtoa_r+0x9a>
 8005372:	ab16      	add	r3, sp, #88	; 0x58
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	ab17      	add	r3, sp, #92	; 0x5c
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4628      	mov	r0, r5
 800537c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005380:	f001 fcee 	bl	8006d60 <__d2b>
 8005384:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005388:	4682      	mov	sl, r0
 800538a:	2c00      	cmp	r4, #0
 800538c:	d07e      	beq.n	800548c <_dtoa_r+0x1f4>
 800538e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005390:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800539c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80053a0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80053a4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80053a8:	4b73      	ldr	r3, [pc, #460]	; (8005578 <_dtoa_r+0x2e0>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	f7fa ff74 	bl	8000298 <__aeabi_dsub>
 80053b0:	a365      	add	r3, pc, #404	; (adr r3, 8005548 <_dtoa_r+0x2b0>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fb f927 	bl	8000608 <__aeabi_dmul>
 80053ba:	a365      	add	r3, pc, #404	; (adr r3, 8005550 <_dtoa_r+0x2b8>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f7fa ff6c 	bl	800029c <__adddf3>
 80053c4:	4606      	mov	r6, r0
 80053c6:	4620      	mov	r0, r4
 80053c8:	460f      	mov	r7, r1
 80053ca:	f7fb f8b3 	bl	8000534 <__aeabi_i2d>
 80053ce:	a362      	add	r3, pc, #392	; (adr r3, 8005558 <_dtoa_r+0x2c0>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f7fb f918 	bl	8000608 <__aeabi_dmul>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fa ff5c 	bl	800029c <__adddf3>
 80053e4:	4606      	mov	r6, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	f7fb fbbe 	bl	8000b68 <__aeabi_d2iz>
 80053ec:	2200      	movs	r2, #0
 80053ee:	4681      	mov	r9, r0
 80053f0:	2300      	movs	r3, #0
 80053f2:	4630      	mov	r0, r6
 80053f4:	4639      	mov	r1, r7
 80053f6:	f7fb fb79 	bl	8000aec <__aeabi_dcmplt>
 80053fa:	b148      	cbz	r0, 8005410 <_dtoa_r+0x178>
 80053fc:	4648      	mov	r0, r9
 80053fe:	f7fb f899 	bl	8000534 <__aeabi_i2d>
 8005402:	4632      	mov	r2, r6
 8005404:	463b      	mov	r3, r7
 8005406:	f7fb fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 800540a:	b908      	cbnz	r0, 8005410 <_dtoa_r+0x178>
 800540c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005410:	f1b9 0f16 	cmp.w	r9, #22
 8005414:	d857      	bhi.n	80054c6 <_dtoa_r+0x22e>
 8005416:	4b59      	ldr	r3, [pc, #356]	; (800557c <_dtoa_r+0x2e4>)
 8005418:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005424:	f7fb fb62 	bl	8000aec <__aeabi_dcmplt>
 8005428:	2800      	cmp	r0, #0
 800542a:	d04e      	beq.n	80054ca <_dtoa_r+0x232>
 800542c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005430:	2300      	movs	r3, #0
 8005432:	930f      	str	r3, [sp, #60]	; 0x3c
 8005434:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005436:	1b1c      	subs	r4, r3, r4
 8005438:	1e63      	subs	r3, r4, #1
 800543a:	9309      	str	r3, [sp, #36]	; 0x24
 800543c:	bf45      	ittet	mi
 800543e:	f1c4 0301 	rsbmi	r3, r4, #1
 8005442:	9306      	strmi	r3, [sp, #24]
 8005444:	2300      	movpl	r3, #0
 8005446:	2300      	movmi	r3, #0
 8005448:	bf4c      	ite	mi
 800544a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800544c:	9306      	strpl	r3, [sp, #24]
 800544e:	f1b9 0f00 	cmp.w	r9, #0
 8005452:	db3c      	blt.n	80054ce <_dtoa_r+0x236>
 8005454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005456:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800545a:	444b      	add	r3, r9
 800545c:	9309      	str	r3, [sp, #36]	; 0x24
 800545e:	2300      	movs	r3, #0
 8005460:	930a      	str	r3, [sp, #40]	; 0x28
 8005462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005464:	2b09      	cmp	r3, #9
 8005466:	f200 808d 	bhi.w	8005584 <_dtoa_r+0x2ec>
 800546a:	2b05      	cmp	r3, #5
 800546c:	bfc4      	itt	gt
 800546e:	3b04      	subgt	r3, #4
 8005470:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005472:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005474:	f1a3 0302 	sub.w	r3, r3, #2
 8005478:	bfcc      	ite	gt
 800547a:	2400      	movgt	r4, #0
 800547c:	2401      	movle	r4, #1
 800547e:	2b03      	cmp	r3, #3
 8005480:	f200 808c 	bhi.w	800559c <_dtoa_r+0x304>
 8005484:	e8df f003 	tbb	[pc, r3]
 8005488:	5b4d4f2d 	.word	0x5b4d4f2d
 800548c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005490:	441c      	add	r4, r3
 8005492:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005496:	2b20      	cmp	r3, #32
 8005498:	bfc3      	ittte	gt
 800549a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800549e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80054a2:	fa09 f303 	lslgt.w	r3, r9, r3
 80054a6:	f1c3 0320 	rsble	r3, r3, #32
 80054aa:	bfc6      	itte	gt
 80054ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054b0:	4318      	orrgt	r0, r3
 80054b2:	fa06 f003 	lslle.w	r0, r6, r3
 80054b6:	f7fb f82d 	bl	8000514 <__aeabi_ui2d>
 80054ba:	2301      	movs	r3, #1
 80054bc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80054c0:	3c01      	subs	r4, #1
 80054c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80054c4:	e770      	b.n	80053a8 <_dtoa_r+0x110>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e7b3      	b.n	8005432 <_dtoa_r+0x19a>
 80054ca:	900f      	str	r0, [sp, #60]	; 0x3c
 80054cc:	e7b2      	b.n	8005434 <_dtoa_r+0x19c>
 80054ce:	9b06      	ldr	r3, [sp, #24]
 80054d0:	eba3 0309 	sub.w	r3, r3, r9
 80054d4:	9306      	str	r3, [sp, #24]
 80054d6:	f1c9 0300 	rsb	r3, r9, #0
 80054da:	930a      	str	r3, [sp, #40]	; 0x28
 80054dc:	2300      	movs	r3, #0
 80054de:	930e      	str	r3, [sp, #56]	; 0x38
 80054e0:	e7bf      	b.n	8005462 <_dtoa_r+0x1ca>
 80054e2:	2300      	movs	r3, #0
 80054e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	dc5a      	bgt.n	80055a2 <_dtoa_r+0x30a>
 80054ec:	f04f 0b01 	mov.w	fp, #1
 80054f0:	f8cd b008 	str.w	fp, [sp, #8]
 80054f4:	465b      	mov	r3, fp
 80054f6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80054fa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80054fc:	2200      	movs	r2, #0
 80054fe:	6042      	str	r2, [r0, #4]
 8005500:	2204      	movs	r2, #4
 8005502:	f102 0614 	add.w	r6, r2, #20
 8005506:	429e      	cmp	r6, r3
 8005508:	6841      	ldr	r1, [r0, #4]
 800550a:	d950      	bls.n	80055ae <_dtoa_r+0x316>
 800550c:	4628      	mov	r0, r5
 800550e:	f001 f841 	bl	8006594 <_Balloc>
 8005512:	9008      	str	r0, [sp, #32]
 8005514:	2800      	cmp	r0, #0
 8005516:	d14e      	bne.n	80055b6 <_dtoa_r+0x31e>
 8005518:	4b19      	ldr	r3, [pc, #100]	; (8005580 <_dtoa_r+0x2e8>)
 800551a:	4602      	mov	r2, r0
 800551c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005520:	e6ce      	b.n	80052c0 <_dtoa_r+0x28>
 8005522:	2301      	movs	r3, #1
 8005524:	e7de      	b.n	80054e4 <_dtoa_r+0x24c>
 8005526:	2300      	movs	r3, #0
 8005528:	930b      	str	r3, [sp, #44]	; 0x2c
 800552a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800552c:	eb09 0b03 	add.w	fp, r9, r3
 8005530:	f10b 0301 	add.w	r3, fp, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	9302      	str	r3, [sp, #8]
 8005538:	bfb8      	it	lt
 800553a:	2301      	movlt	r3, #1
 800553c:	e7dd      	b.n	80054fa <_dtoa_r+0x262>
 800553e:	2301      	movs	r3, #1
 8005540:	e7f2      	b.n	8005528 <_dtoa_r+0x290>
 8005542:	bf00      	nop
 8005544:	f3af 8000 	nop.w
 8005548:	636f4361 	.word	0x636f4361
 800554c:	3fd287a7 	.word	0x3fd287a7
 8005550:	8b60c8b3 	.word	0x8b60c8b3
 8005554:	3fc68a28 	.word	0x3fc68a28
 8005558:	509f79fb 	.word	0x509f79fb
 800555c:	3fd34413 	.word	0x3fd34413
 8005560:	080080d6 	.word	0x080080d6
 8005564:	080080ed 	.word	0x080080ed
 8005568:	7ff00000 	.word	0x7ff00000
 800556c:	080080d2 	.word	0x080080d2
 8005570:	080080c9 	.word	0x080080c9
 8005574:	08007f4d 	.word	0x08007f4d
 8005578:	3ff80000 	.word	0x3ff80000
 800557c:	08008268 	.word	0x08008268
 8005580:	0800814c 	.word	0x0800814c
 8005584:	2401      	movs	r4, #1
 8005586:	2300      	movs	r3, #0
 8005588:	9322      	str	r3, [sp, #136]	; 0x88
 800558a:	940b      	str	r4, [sp, #44]	; 0x2c
 800558c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005590:	2200      	movs	r2, #0
 8005592:	f8cd b008 	str.w	fp, [sp, #8]
 8005596:	2312      	movs	r3, #18
 8005598:	9223      	str	r2, [sp, #140]	; 0x8c
 800559a:	e7ae      	b.n	80054fa <_dtoa_r+0x262>
 800559c:	2301      	movs	r3, #1
 800559e:	930b      	str	r3, [sp, #44]	; 0x2c
 80055a0:	e7f4      	b.n	800558c <_dtoa_r+0x2f4>
 80055a2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80055a6:	f8cd b008 	str.w	fp, [sp, #8]
 80055aa:	465b      	mov	r3, fp
 80055ac:	e7a5      	b.n	80054fa <_dtoa_r+0x262>
 80055ae:	3101      	adds	r1, #1
 80055b0:	6041      	str	r1, [r0, #4]
 80055b2:	0052      	lsls	r2, r2, #1
 80055b4:	e7a5      	b.n	8005502 <_dtoa_r+0x26a>
 80055b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055b8:	9a08      	ldr	r2, [sp, #32]
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	9b02      	ldr	r3, [sp, #8]
 80055be:	2b0e      	cmp	r3, #14
 80055c0:	f200 80a8 	bhi.w	8005714 <_dtoa_r+0x47c>
 80055c4:	2c00      	cmp	r4, #0
 80055c6:	f000 80a5 	beq.w	8005714 <_dtoa_r+0x47c>
 80055ca:	f1b9 0f00 	cmp.w	r9, #0
 80055ce:	dd34      	ble.n	800563a <_dtoa_r+0x3a2>
 80055d0:	4a9a      	ldr	r2, [pc, #616]	; (800583c <_dtoa_r+0x5a4>)
 80055d2:	f009 030f 	and.w	r3, r9, #15
 80055d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055de:	f419 7f80 	tst.w	r9, #256	; 0x100
 80055e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80055e6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80055ea:	d016      	beq.n	800561a <_dtoa_r+0x382>
 80055ec:	4b94      	ldr	r3, [pc, #592]	; (8005840 <_dtoa_r+0x5a8>)
 80055ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055f6:	f7fb f931 	bl	800085c <__aeabi_ddiv>
 80055fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055fe:	f004 040f 	and.w	r4, r4, #15
 8005602:	2703      	movs	r7, #3
 8005604:	4e8e      	ldr	r6, [pc, #568]	; (8005840 <_dtoa_r+0x5a8>)
 8005606:	b954      	cbnz	r4, 800561e <_dtoa_r+0x386>
 8005608:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800560c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005610:	f7fb f924 	bl	800085c <__aeabi_ddiv>
 8005614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005618:	e029      	b.n	800566e <_dtoa_r+0x3d6>
 800561a:	2702      	movs	r7, #2
 800561c:	e7f2      	b.n	8005604 <_dtoa_r+0x36c>
 800561e:	07e1      	lsls	r1, r4, #31
 8005620:	d508      	bpl.n	8005634 <_dtoa_r+0x39c>
 8005622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005626:	e9d6 2300 	ldrd	r2, r3, [r6]
 800562a:	f7fa ffed 	bl	8000608 <__aeabi_dmul>
 800562e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005632:	3701      	adds	r7, #1
 8005634:	1064      	asrs	r4, r4, #1
 8005636:	3608      	adds	r6, #8
 8005638:	e7e5      	b.n	8005606 <_dtoa_r+0x36e>
 800563a:	f000 80a5 	beq.w	8005788 <_dtoa_r+0x4f0>
 800563e:	f1c9 0400 	rsb	r4, r9, #0
 8005642:	4b7e      	ldr	r3, [pc, #504]	; (800583c <_dtoa_r+0x5a4>)
 8005644:	4e7e      	ldr	r6, [pc, #504]	; (8005840 <_dtoa_r+0x5a8>)
 8005646:	f004 020f 	and.w	r2, r4, #15
 800564a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005656:	f7fa ffd7 	bl	8000608 <__aeabi_dmul>
 800565a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800565e:	1124      	asrs	r4, r4, #4
 8005660:	2300      	movs	r3, #0
 8005662:	2702      	movs	r7, #2
 8005664:	2c00      	cmp	r4, #0
 8005666:	f040 8084 	bne.w	8005772 <_dtoa_r+0x4da>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d2      	bne.n	8005614 <_dtoa_r+0x37c>
 800566e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 808b 	beq.w	800578c <_dtoa_r+0x4f4>
 8005676:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800567a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800567e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005682:	4b70      	ldr	r3, [pc, #448]	; (8005844 <_dtoa_r+0x5ac>)
 8005684:	2200      	movs	r2, #0
 8005686:	f7fb fa31 	bl	8000aec <__aeabi_dcmplt>
 800568a:	2800      	cmp	r0, #0
 800568c:	d07e      	beq.n	800578c <_dtoa_r+0x4f4>
 800568e:	9b02      	ldr	r3, [sp, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d07b      	beq.n	800578c <_dtoa_r+0x4f4>
 8005694:	f1bb 0f00 	cmp.w	fp, #0
 8005698:	dd38      	ble.n	800570c <_dtoa_r+0x474>
 800569a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800569e:	4b6a      	ldr	r3, [pc, #424]	; (8005848 <_dtoa_r+0x5b0>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	f7fa ffb1 	bl	8000608 <__aeabi_dmul>
 80056a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056aa:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80056ae:	3701      	adds	r7, #1
 80056b0:	465c      	mov	r4, fp
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7fa ff3e 	bl	8000534 <__aeabi_i2d>
 80056b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056bc:	f7fa ffa4 	bl	8000608 <__aeabi_dmul>
 80056c0:	4b62      	ldr	r3, [pc, #392]	; (800584c <_dtoa_r+0x5b4>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	f7fa fdea 	bl	800029c <__adddf3>
 80056c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80056cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056d0:	9611      	str	r6, [sp, #68]	; 0x44
 80056d2:	2c00      	cmp	r4, #0
 80056d4:	d15d      	bne.n	8005792 <_dtoa_r+0x4fa>
 80056d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056da:	4b5d      	ldr	r3, [pc, #372]	; (8005850 <_dtoa_r+0x5b8>)
 80056dc:	2200      	movs	r2, #0
 80056de:	f7fa fddb 	bl	8000298 <__aeabi_dsub>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056ec:	4633      	mov	r3, r6
 80056ee:	f7fb fa1b 	bl	8000b28 <__aeabi_dcmpgt>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f040 829e 	bne.w	8005c34 <_dtoa_r+0x99c>
 80056f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005702:	f7fb f9f3 	bl	8000aec <__aeabi_dcmplt>
 8005706:	2800      	cmp	r0, #0
 8005708:	f040 8292 	bne.w	8005c30 <_dtoa_r+0x998>
 800570c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005710:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005716:	2b00      	cmp	r3, #0
 8005718:	f2c0 8153 	blt.w	80059c2 <_dtoa_r+0x72a>
 800571c:	f1b9 0f0e 	cmp.w	r9, #14
 8005720:	f300 814f 	bgt.w	80059c2 <_dtoa_r+0x72a>
 8005724:	4b45      	ldr	r3, [pc, #276]	; (800583c <_dtoa_r+0x5a4>)
 8005726:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800572a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800572e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005734:	2b00      	cmp	r3, #0
 8005736:	f280 80db 	bge.w	80058f0 <_dtoa_r+0x658>
 800573a:	9b02      	ldr	r3, [sp, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f300 80d7 	bgt.w	80058f0 <_dtoa_r+0x658>
 8005742:	f040 8274 	bne.w	8005c2e <_dtoa_r+0x996>
 8005746:	4b42      	ldr	r3, [pc, #264]	; (8005850 <_dtoa_r+0x5b8>)
 8005748:	2200      	movs	r2, #0
 800574a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800574e:	f7fa ff5b 	bl	8000608 <__aeabi_dmul>
 8005752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005756:	f7fb f9dd 	bl	8000b14 <__aeabi_dcmpge>
 800575a:	9c02      	ldr	r4, [sp, #8]
 800575c:	4626      	mov	r6, r4
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 824a 	bne.w	8005bf8 <_dtoa_r+0x960>
 8005764:	9f08      	ldr	r7, [sp, #32]
 8005766:	2331      	movs	r3, #49	; 0x31
 8005768:	f807 3b01 	strb.w	r3, [r7], #1
 800576c:	f109 0901 	add.w	r9, r9, #1
 8005770:	e246      	b.n	8005c00 <_dtoa_r+0x968>
 8005772:	07e2      	lsls	r2, r4, #31
 8005774:	d505      	bpl.n	8005782 <_dtoa_r+0x4ea>
 8005776:	e9d6 2300 	ldrd	r2, r3, [r6]
 800577a:	f7fa ff45 	bl	8000608 <__aeabi_dmul>
 800577e:	3701      	adds	r7, #1
 8005780:	2301      	movs	r3, #1
 8005782:	1064      	asrs	r4, r4, #1
 8005784:	3608      	adds	r6, #8
 8005786:	e76d      	b.n	8005664 <_dtoa_r+0x3cc>
 8005788:	2702      	movs	r7, #2
 800578a:	e770      	b.n	800566e <_dtoa_r+0x3d6>
 800578c:	9c02      	ldr	r4, [sp, #8]
 800578e:	46c8      	mov	r8, r9
 8005790:	e78f      	b.n	80056b2 <_dtoa_r+0x41a>
 8005792:	9908      	ldr	r1, [sp, #32]
 8005794:	4b29      	ldr	r3, [pc, #164]	; (800583c <_dtoa_r+0x5a4>)
 8005796:	4421      	add	r1, r4
 8005798:	9112      	str	r1, [sp, #72]	; 0x48
 800579a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800579c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80057a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057a8:	2900      	cmp	r1, #0
 80057aa:	d055      	beq.n	8005858 <_dtoa_r+0x5c0>
 80057ac:	4929      	ldr	r1, [pc, #164]	; (8005854 <_dtoa_r+0x5bc>)
 80057ae:	2000      	movs	r0, #0
 80057b0:	f7fb f854 	bl	800085c <__aeabi_ddiv>
 80057b4:	463b      	mov	r3, r7
 80057b6:	4632      	mov	r2, r6
 80057b8:	f7fa fd6e 	bl	8000298 <__aeabi_dsub>
 80057bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057c0:	9f08      	ldr	r7, [sp, #32]
 80057c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c6:	f7fb f9cf 	bl	8000b68 <__aeabi_d2iz>
 80057ca:	4604      	mov	r4, r0
 80057cc:	f7fa feb2 	bl	8000534 <__aeabi_i2d>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d8:	f7fa fd5e 	bl	8000298 <__aeabi_dsub>
 80057dc:	3430      	adds	r4, #48	; 0x30
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057e6:	f807 4b01 	strb.w	r4, [r7], #1
 80057ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057ee:	f7fb f97d 	bl	8000aec <__aeabi_dcmplt>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d174      	bne.n	80058e0 <_dtoa_r+0x648>
 80057f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057fa:	4912      	ldr	r1, [pc, #72]	; (8005844 <_dtoa_r+0x5ac>)
 80057fc:	2000      	movs	r0, #0
 80057fe:	f7fa fd4b 	bl	8000298 <__aeabi_dsub>
 8005802:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005806:	f7fb f971 	bl	8000aec <__aeabi_dcmplt>
 800580a:	2800      	cmp	r0, #0
 800580c:	f040 80b6 	bne.w	800597c <_dtoa_r+0x6e4>
 8005810:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005812:	429f      	cmp	r7, r3
 8005814:	f43f af7a 	beq.w	800570c <_dtoa_r+0x474>
 8005818:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800581c:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <_dtoa_r+0x5b0>)
 800581e:	2200      	movs	r2, #0
 8005820:	f7fa fef2 	bl	8000608 <__aeabi_dmul>
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <_dtoa_r+0x5b0>)
 8005826:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800582a:	2200      	movs	r2, #0
 800582c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005830:	f7fa feea 	bl	8000608 <__aeabi_dmul>
 8005834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005838:	e7c3      	b.n	80057c2 <_dtoa_r+0x52a>
 800583a:	bf00      	nop
 800583c:	08008268 	.word	0x08008268
 8005840:	08008240 	.word	0x08008240
 8005844:	3ff00000 	.word	0x3ff00000
 8005848:	40240000 	.word	0x40240000
 800584c:	401c0000 	.word	0x401c0000
 8005850:	40140000 	.word	0x40140000
 8005854:	3fe00000 	.word	0x3fe00000
 8005858:	4630      	mov	r0, r6
 800585a:	4639      	mov	r1, r7
 800585c:	f7fa fed4 	bl	8000608 <__aeabi_dmul>
 8005860:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005866:	9c08      	ldr	r4, [sp, #32]
 8005868:	9314      	str	r3, [sp, #80]	; 0x50
 800586a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800586e:	f7fb f97b 	bl	8000b68 <__aeabi_d2iz>
 8005872:	9015      	str	r0, [sp, #84]	; 0x54
 8005874:	f7fa fe5e 	bl	8000534 <__aeabi_i2d>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005880:	f7fa fd0a 	bl	8000298 <__aeabi_dsub>
 8005884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005886:	3330      	adds	r3, #48	; 0x30
 8005888:	f804 3b01 	strb.w	r3, [r4], #1
 800588c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800588e:	429c      	cmp	r4, r3
 8005890:	4606      	mov	r6, r0
 8005892:	460f      	mov	r7, r1
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	d124      	bne.n	80058e4 <_dtoa_r+0x64c>
 800589a:	4bb2      	ldr	r3, [pc, #712]	; (8005b64 <_dtoa_r+0x8cc>)
 800589c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058a0:	f7fa fcfc 	bl	800029c <__adddf3>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4630      	mov	r0, r6
 80058aa:	4639      	mov	r1, r7
 80058ac:	f7fb f93c 	bl	8000b28 <__aeabi_dcmpgt>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d162      	bne.n	800597a <_dtoa_r+0x6e2>
 80058b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058b8:	49aa      	ldr	r1, [pc, #680]	; (8005b64 <_dtoa_r+0x8cc>)
 80058ba:	2000      	movs	r0, #0
 80058bc:	f7fa fcec 	bl	8000298 <__aeabi_dsub>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4630      	mov	r0, r6
 80058c6:	4639      	mov	r1, r7
 80058c8:	f7fb f910 	bl	8000aec <__aeabi_dcmplt>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	f43f af1d 	beq.w	800570c <_dtoa_r+0x474>
 80058d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80058d4:	1e7b      	subs	r3, r7, #1
 80058d6:	9314      	str	r3, [sp, #80]	; 0x50
 80058d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80058dc:	2b30      	cmp	r3, #48	; 0x30
 80058de:	d0f8      	beq.n	80058d2 <_dtoa_r+0x63a>
 80058e0:	46c1      	mov	r9, r8
 80058e2:	e03a      	b.n	800595a <_dtoa_r+0x6c2>
 80058e4:	4ba0      	ldr	r3, [pc, #640]	; (8005b68 <_dtoa_r+0x8d0>)
 80058e6:	f7fa fe8f 	bl	8000608 <__aeabi_dmul>
 80058ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058ee:	e7bc      	b.n	800586a <_dtoa_r+0x5d2>
 80058f0:	9f08      	ldr	r7, [sp, #32]
 80058f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058fa:	f7fa ffaf 	bl	800085c <__aeabi_ddiv>
 80058fe:	f7fb f933 	bl	8000b68 <__aeabi_d2iz>
 8005902:	4604      	mov	r4, r0
 8005904:	f7fa fe16 	bl	8000534 <__aeabi_i2d>
 8005908:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800590c:	f7fa fe7c 	bl	8000608 <__aeabi_dmul>
 8005910:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005914:	460b      	mov	r3, r1
 8005916:	4602      	mov	r2, r0
 8005918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800591c:	f7fa fcbc 	bl	8000298 <__aeabi_dsub>
 8005920:	f807 6b01 	strb.w	r6, [r7], #1
 8005924:	9e08      	ldr	r6, [sp, #32]
 8005926:	9b02      	ldr	r3, [sp, #8]
 8005928:	1bbe      	subs	r6, r7, r6
 800592a:	42b3      	cmp	r3, r6
 800592c:	d13a      	bne.n	80059a4 <_dtoa_r+0x70c>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	f7fa fcb3 	bl	800029c <__adddf3>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800593e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005942:	f7fb f8f1 	bl	8000b28 <__aeabi_dcmpgt>
 8005946:	bb58      	cbnz	r0, 80059a0 <_dtoa_r+0x708>
 8005948:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800594c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005950:	f7fb f8c2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005954:	b108      	cbz	r0, 800595a <_dtoa_r+0x6c2>
 8005956:	07e1      	lsls	r1, r4, #31
 8005958:	d422      	bmi.n	80059a0 <_dtoa_r+0x708>
 800595a:	4628      	mov	r0, r5
 800595c:	4651      	mov	r1, sl
 800595e:	f000 fe59 	bl	8006614 <_Bfree>
 8005962:	2300      	movs	r3, #0
 8005964:	703b      	strb	r3, [r7, #0]
 8005966:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005968:	f109 0001 	add.w	r0, r9, #1
 800596c:	6018      	str	r0, [r3, #0]
 800596e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005970:	2b00      	cmp	r3, #0
 8005972:	f43f acde 	beq.w	8005332 <_dtoa_r+0x9a>
 8005976:	601f      	str	r7, [r3, #0]
 8005978:	e4db      	b.n	8005332 <_dtoa_r+0x9a>
 800597a:	4627      	mov	r7, r4
 800597c:	463b      	mov	r3, r7
 800597e:	461f      	mov	r7, r3
 8005980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005984:	2a39      	cmp	r2, #57	; 0x39
 8005986:	d107      	bne.n	8005998 <_dtoa_r+0x700>
 8005988:	9a08      	ldr	r2, [sp, #32]
 800598a:	429a      	cmp	r2, r3
 800598c:	d1f7      	bne.n	800597e <_dtoa_r+0x6e6>
 800598e:	9908      	ldr	r1, [sp, #32]
 8005990:	2230      	movs	r2, #48	; 0x30
 8005992:	f108 0801 	add.w	r8, r8, #1
 8005996:	700a      	strb	r2, [r1, #0]
 8005998:	781a      	ldrb	r2, [r3, #0]
 800599a:	3201      	adds	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	e79f      	b.n	80058e0 <_dtoa_r+0x648>
 80059a0:	46c8      	mov	r8, r9
 80059a2:	e7eb      	b.n	800597c <_dtoa_r+0x6e4>
 80059a4:	4b70      	ldr	r3, [pc, #448]	; (8005b68 <_dtoa_r+0x8d0>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	f7fa fe2e 	bl	8000608 <__aeabi_dmul>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059b4:	2200      	movs	r2, #0
 80059b6:	2300      	movs	r3, #0
 80059b8:	f7fb f88e 	bl	8000ad8 <__aeabi_dcmpeq>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d098      	beq.n	80058f2 <_dtoa_r+0x65a>
 80059c0:	e7cb      	b.n	800595a <_dtoa_r+0x6c2>
 80059c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	f000 80d1 	beq.w	8005b6c <_dtoa_r+0x8d4>
 80059ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059cc:	2a01      	cmp	r2, #1
 80059ce:	f300 80af 	bgt.w	8005b30 <_dtoa_r+0x898>
 80059d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059d4:	2a00      	cmp	r2, #0
 80059d6:	f000 80a7 	beq.w	8005b28 <_dtoa_r+0x890>
 80059da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059e0:	9f06      	ldr	r7, [sp, #24]
 80059e2:	9a06      	ldr	r2, [sp, #24]
 80059e4:	441a      	add	r2, r3
 80059e6:	9206      	str	r2, [sp, #24]
 80059e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ea:	2101      	movs	r1, #1
 80059ec:	441a      	add	r2, r3
 80059ee:	4628      	mov	r0, r5
 80059f0:	9209      	str	r2, [sp, #36]	; 0x24
 80059f2:	f000 ff13 	bl	800681c <__i2b>
 80059f6:	4606      	mov	r6, r0
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	dd0c      	ble.n	8005a16 <_dtoa_r+0x77e>
 80059fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dd09      	ble.n	8005a16 <_dtoa_r+0x77e>
 8005a02:	42bb      	cmp	r3, r7
 8005a04:	9a06      	ldr	r2, [sp, #24]
 8005a06:	bfa8      	it	ge
 8005a08:	463b      	movge	r3, r7
 8005a0a:	1ad2      	subs	r2, r2, r3
 8005a0c:	9206      	str	r2, [sp, #24]
 8005a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a10:	1aff      	subs	r7, r7, r3
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a18:	b1f3      	cbz	r3, 8005a58 <_dtoa_r+0x7c0>
 8005a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a9 	beq.w	8005b74 <_dtoa_r+0x8dc>
 8005a22:	2c00      	cmp	r4, #0
 8005a24:	dd10      	ble.n	8005a48 <_dtoa_r+0x7b0>
 8005a26:	4631      	mov	r1, r6
 8005a28:	4622      	mov	r2, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 ffb2 	bl	8006994 <__pow5mult>
 8005a30:	4652      	mov	r2, sl
 8005a32:	4601      	mov	r1, r0
 8005a34:	4606      	mov	r6, r0
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 ff06 	bl	8006848 <__multiply>
 8005a3c:	4651      	mov	r1, sl
 8005a3e:	4680      	mov	r8, r0
 8005a40:	4628      	mov	r0, r5
 8005a42:	f000 fde7 	bl	8006614 <_Bfree>
 8005a46:	46c2      	mov	sl, r8
 8005a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a4a:	1b1a      	subs	r2, r3, r4
 8005a4c:	d004      	beq.n	8005a58 <_dtoa_r+0x7c0>
 8005a4e:	4651      	mov	r1, sl
 8005a50:	4628      	mov	r0, r5
 8005a52:	f000 ff9f 	bl	8006994 <__pow5mult>
 8005a56:	4682      	mov	sl, r0
 8005a58:	2101      	movs	r1, #1
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f000 fede 	bl	800681c <__i2b>
 8005a60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	4604      	mov	r4, r0
 8005a66:	f340 8087 	ble.w	8005b78 <_dtoa_r+0x8e0>
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4601      	mov	r1, r0
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f000 ff90 	bl	8006994 <__pow5mult>
 8005a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	4604      	mov	r4, r0
 8005a7a:	f340 8080 	ble.w	8005b7e <_dtoa_r+0x8e6>
 8005a7e:	f04f 0800 	mov.w	r8, #0
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a88:	6918      	ldr	r0, [r3, #16]
 8005a8a:	f000 fe79 	bl	8006780 <__hi0bits>
 8005a8e:	f1c0 0020 	rsb	r0, r0, #32
 8005a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a94:	4418      	add	r0, r3
 8005a96:	f010 001f 	ands.w	r0, r0, #31
 8005a9a:	f000 8092 	beq.w	8005bc2 <_dtoa_r+0x92a>
 8005a9e:	f1c0 0320 	rsb	r3, r0, #32
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	f340 808a 	ble.w	8005bbc <_dtoa_r+0x924>
 8005aa8:	f1c0 001c 	rsb	r0, r0, #28
 8005aac:	9b06      	ldr	r3, [sp, #24]
 8005aae:	4403      	add	r3, r0
 8005ab0:	9306      	str	r3, [sp, #24]
 8005ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab4:	4403      	add	r3, r0
 8005ab6:	4407      	add	r7, r0
 8005ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aba:	9b06      	ldr	r3, [sp, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dd05      	ble.n	8005acc <_dtoa_r+0x834>
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f000 ffbf 	bl	8006a48 <__lshift>
 8005aca:	4682      	mov	sl, r0
 8005acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	dd05      	ble.n	8005ade <_dtoa_r+0x846>
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 ffb6 	bl	8006a48 <__lshift>
 8005adc:	4604      	mov	r4, r0
 8005ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d070      	beq.n	8005bc6 <_dtoa_r+0x92e>
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4650      	mov	r0, sl
 8005ae8:	f001 f81a 	bl	8006b20 <__mcmp>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	da6a      	bge.n	8005bc6 <_dtoa_r+0x92e>
 8005af0:	2300      	movs	r3, #0
 8005af2:	4651      	mov	r1, sl
 8005af4:	220a      	movs	r2, #10
 8005af6:	4628      	mov	r0, r5
 8005af8:	f000 fdae 	bl	8006658 <__multadd>
 8005afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005afe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005b02:	4682      	mov	sl, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8193 	beq.w	8005e30 <_dtoa_r+0xb98>
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	220a      	movs	r2, #10
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 fda1 	bl	8006658 <__multadd>
 8005b16:	f1bb 0f00 	cmp.w	fp, #0
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	f300 8093 	bgt.w	8005c46 <_dtoa_r+0x9ae>
 8005b20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	dc57      	bgt.n	8005bd6 <_dtoa_r+0x93e>
 8005b26:	e08e      	b.n	8005c46 <_dtoa_r+0x9ae>
 8005b28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b2e:	e756      	b.n	80059de <_dtoa_r+0x746>
 8005b30:	9b02      	ldr	r3, [sp, #8]
 8005b32:	1e5c      	subs	r4, r3, #1
 8005b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	bfbf      	itttt	lt
 8005b3a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b3c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b3e:	1ae2      	sublt	r2, r4, r3
 8005b40:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005b42:	bfb6      	itet	lt
 8005b44:	189b      	addlt	r3, r3, r2
 8005b46:	1b1c      	subge	r4, r3, r4
 8005b48:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005b4a:	9b02      	ldr	r3, [sp, #8]
 8005b4c:	bfb8      	it	lt
 8005b4e:	2400      	movlt	r4, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bfb9      	ittee	lt
 8005b54:	9b06      	ldrlt	r3, [sp, #24]
 8005b56:	9a02      	ldrlt	r2, [sp, #8]
 8005b58:	9f06      	ldrge	r7, [sp, #24]
 8005b5a:	9b02      	ldrge	r3, [sp, #8]
 8005b5c:	bfbc      	itt	lt
 8005b5e:	1a9f      	sublt	r7, r3, r2
 8005b60:	2300      	movlt	r3, #0
 8005b62:	e73e      	b.n	80059e2 <_dtoa_r+0x74a>
 8005b64:	3fe00000 	.word	0x3fe00000
 8005b68:	40240000 	.word	0x40240000
 8005b6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b6e:	9f06      	ldr	r7, [sp, #24]
 8005b70:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b72:	e741      	b.n	80059f8 <_dtoa_r+0x760>
 8005b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b76:	e76a      	b.n	8005a4e <_dtoa_r+0x7b6>
 8005b78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	dc19      	bgt.n	8005bb2 <_dtoa_r+0x91a>
 8005b7e:	9b04      	ldr	r3, [sp, #16]
 8005b80:	b9bb      	cbnz	r3, 8005bb2 <_dtoa_r+0x91a>
 8005b82:	9b05      	ldr	r3, [sp, #20]
 8005b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b88:	b99b      	cbnz	r3, 8005bb2 <_dtoa_r+0x91a>
 8005b8a:	9b05      	ldr	r3, [sp, #20]
 8005b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b90:	0d1b      	lsrs	r3, r3, #20
 8005b92:	051b      	lsls	r3, r3, #20
 8005b94:	b183      	cbz	r3, 8005bb8 <_dtoa_r+0x920>
 8005b96:	9b06      	ldr	r3, [sp, #24]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	9306      	str	r3, [sp, #24]
 8005b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba2:	f04f 0801 	mov.w	r8, #1
 8005ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f47f af6a 	bne.w	8005a82 <_dtoa_r+0x7ea>
 8005bae:	2001      	movs	r0, #1
 8005bb0:	e76f      	b.n	8005a92 <_dtoa_r+0x7fa>
 8005bb2:	f04f 0800 	mov.w	r8, #0
 8005bb6:	e7f6      	b.n	8005ba6 <_dtoa_r+0x90e>
 8005bb8:	4698      	mov	r8, r3
 8005bba:	e7f4      	b.n	8005ba6 <_dtoa_r+0x90e>
 8005bbc:	f43f af7d 	beq.w	8005aba <_dtoa_r+0x822>
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	301c      	adds	r0, #28
 8005bc4:	e772      	b.n	8005aac <_dtoa_r+0x814>
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	dc36      	bgt.n	8005c3a <_dtoa_r+0x9a2>
 8005bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	dd33      	ble.n	8005c3a <_dtoa_r+0x9a2>
 8005bd2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005bd6:	f1bb 0f00 	cmp.w	fp, #0
 8005bda:	d10d      	bne.n	8005bf8 <_dtoa_r+0x960>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	465b      	mov	r3, fp
 8005be0:	2205      	movs	r2, #5
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 fd38 	bl	8006658 <__multadd>
 8005be8:	4601      	mov	r1, r0
 8005bea:	4604      	mov	r4, r0
 8005bec:	4650      	mov	r0, sl
 8005bee:	f000 ff97 	bl	8006b20 <__mcmp>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f73f adb6 	bgt.w	8005764 <_dtoa_r+0x4cc>
 8005bf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bfa:	9f08      	ldr	r7, [sp, #32]
 8005bfc:	ea6f 0903 	mvn.w	r9, r3
 8005c00:	f04f 0800 	mov.w	r8, #0
 8005c04:	4621      	mov	r1, r4
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 fd04 	bl	8006614 <_Bfree>
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	f43f aea4 	beq.w	800595a <_dtoa_r+0x6c2>
 8005c12:	f1b8 0f00 	cmp.w	r8, #0
 8005c16:	d005      	beq.n	8005c24 <_dtoa_r+0x98c>
 8005c18:	45b0      	cmp	r8, r6
 8005c1a:	d003      	beq.n	8005c24 <_dtoa_r+0x98c>
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 fcf8 	bl	8006614 <_Bfree>
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 fcf4 	bl	8006614 <_Bfree>
 8005c2c:	e695      	b.n	800595a <_dtoa_r+0x6c2>
 8005c2e:	2400      	movs	r4, #0
 8005c30:	4626      	mov	r6, r4
 8005c32:	e7e1      	b.n	8005bf8 <_dtoa_r+0x960>
 8005c34:	46c1      	mov	r9, r8
 8005c36:	4626      	mov	r6, r4
 8005c38:	e594      	b.n	8005764 <_dtoa_r+0x4cc>
 8005c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c3c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 80fc 	beq.w	8005e3e <_dtoa_r+0xba6>
 8005c46:	2f00      	cmp	r7, #0
 8005c48:	dd05      	ble.n	8005c56 <_dtoa_r+0x9be>
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	463a      	mov	r2, r7
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 fefa 	bl	8006a48 <__lshift>
 8005c54:	4606      	mov	r6, r0
 8005c56:	f1b8 0f00 	cmp.w	r8, #0
 8005c5a:	d05c      	beq.n	8005d16 <_dtoa_r+0xa7e>
 8005c5c:	6871      	ldr	r1, [r6, #4]
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 fc98 	bl	8006594 <_Balloc>
 8005c64:	4607      	mov	r7, r0
 8005c66:	b928      	cbnz	r0, 8005c74 <_dtoa_r+0x9dc>
 8005c68:	4b7f      	ldr	r3, [pc, #508]	; (8005e68 <_dtoa_r+0xbd0>)
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c70:	f7ff bb26 	b.w	80052c0 <_dtoa_r+0x28>
 8005c74:	6932      	ldr	r2, [r6, #16]
 8005c76:	3202      	adds	r2, #2
 8005c78:	0092      	lsls	r2, r2, #2
 8005c7a:	f106 010c 	add.w	r1, r6, #12
 8005c7e:	300c      	adds	r0, #12
 8005c80:	f000 fc7a 	bl	8006578 <memcpy>
 8005c84:	2201      	movs	r2, #1
 8005c86:	4639      	mov	r1, r7
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 fedd 	bl	8006a48 <__lshift>
 8005c8e:	9b08      	ldr	r3, [sp, #32]
 8005c90:	3301      	adds	r3, #1
 8005c92:	9302      	str	r3, [sp, #8]
 8005c94:	9b08      	ldr	r3, [sp, #32]
 8005c96:	445b      	add	r3, fp
 8005c98:	930a      	str	r3, [sp, #40]	; 0x28
 8005c9a:	9b04      	ldr	r3, [sp, #16]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	46b0      	mov	r8, r6
 8005ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	9b02      	ldr	r3, [sp, #8]
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4650      	mov	r0, sl
 8005cac:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005cb0:	f7ff fa64 	bl	800517c <quorem>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	3330      	adds	r3, #48	; 0x30
 8005cb8:	9004      	str	r0, [sp, #16]
 8005cba:	4641      	mov	r1, r8
 8005cbc:	4650      	mov	r0, sl
 8005cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cc0:	f000 ff2e 	bl	8006b20 <__mcmp>
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	9006      	str	r0, [sp, #24]
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 ff44 	bl	8006b58 <__mdiff>
 8005cd0:	68c2      	ldr	r2, [r0, #12]
 8005cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	bb02      	cbnz	r2, 8005d1a <_dtoa_r+0xa82>
 8005cd8:	4601      	mov	r1, r0
 8005cda:	4650      	mov	r0, sl
 8005cdc:	f000 ff20 	bl	8006b20 <__mcmp>
 8005ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005cec:	f000 fc92 	bl	8006614 <_Bfree>
 8005cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cf4:	9f02      	ldr	r7, [sp, #8]
 8005cf6:	ea43 0102 	orr.w	r1, r3, r2
 8005cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d00:	d10d      	bne.n	8005d1e <_dtoa_r+0xa86>
 8005d02:	2b39      	cmp	r3, #57	; 0x39
 8005d04:	d027      	beq.n	8005d56 <_dtoa_r+0xabe>
 8005d06:	9a06      	ldr	r2, [sp, #24]
 8005d08:	2a00      	cmp	r2, #0
 8005d0a:	dd01      	ble.n	8005d10 <_dtoa_r+0xa78>
 8005d0c:	9b04      	ldr	r3, [sp, #16]
 8005d0e:	3331      	adds	r3, #49	; 0x31
 8005d10:	f88b 3000 	strb.w	r3, [fp]
 8005d14:	e776      	b.n	8005c04 <_dtoa_r+0x96c>
 8005d16:	4630      	mov	r0, r6
 8005d18:	e7b9      	b.n	8005c8e <_dtoa_r+0x9f6>
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	e7e2      	b.n	8005ce4 <_dtoa_r+0xa4c>
 8005d1e:	9906      	ldr	r1, [sp, #24]
 8005d20:	2900      	cmp	r1, #0
 8005d22:	db04      	blt.n	8005d2e <_dtoa_r+0xa96>
 8005d24:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005d26:	4301      	orrs	r1, r0
 8005d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d2a:	4301      	orrs	r1, r0
 8005d2c:	d120      	bne.n	8005d70 <_dtoa_r+0xad8>
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	ddee      	ble.n	8005d10 <_dtoa_r+0xa78>
 8005d32:	4651      	mov	r1, sl
 8005d34:	2201      	movs	r2, #1
 8005d36:	4628      	mov	r0, r5
 8005d38:	9302      	str	r3, [sp, #8]
 8005d3a:	f000 fe85 	bl	8006a48 <__lshift>
 8005d3e:	4621      	mov	r1, r4
 8005d40:	4682      	mov	sl, r0
 8005d42:	f000 feed 	bl	8006b20 <__mcmp>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	9b02      	ldr	r3, [sp, #8]
 8005d4a:	dc02      	bgt.n	8005d52 <_dtoa_r+0xaba>
 8005d4c:	d1e0      	bne.n	8005d10 <_dtoa_r+0xa78>
 8005d4e:	07da      	lsls	r2, r3, #31
 8005d50:	d5de      	bpl.n	8005d10 <_dtoa_r+0xa78>
 8005d52:	2b39      	cmp	r3, #57	; 0x39
 8005d54:	d1da      	bne.n	8005d0c <_dtoa_r+0xa74>
 8005d56:	2339      	movs	r3, #57	; 0x39
 8005d58:	f88b 3000 	strb.w	r3, [fp]
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	461f      	mov	r7, r3
 8005d60:	3b01      	subs	r3, #1
 8005d62:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d66:	2a39      	cmp	r2, #57	; 0x39
 8005d68:	d050      	beq.n	8005e0c <_dtoa_r+0xb74>
 8005d6a:	3201      	adds	r2, #1
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e749      	b.n	8005c04 <_dtoa_r+0x96c>
 8005d70:	2a00      	cmp	r2, #0
 8005d72:	dd03      	ble.n	8005d7c <_dtoa_r+0xae4>
 8005d74:	2b39      	cmp	r3, #57	; 0x39
 8005d76:	d0ee      	beq.n	8005d56 <_dtoa_r+0xabe>
 8005d78:	3301      	adds	r3, #1
 8005d7a:	e7c9      	b.n	8005d10 <_dtoa_r+0xa78>
 8005d7c:	9a02      	ldr	r2, [sp, #8]
 8005d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d84:	428a      	cmp	r2, r1
 8005d86:	d02a      	beq.n	8005dde <_dtoa_r+0xb46>
 8005d88:	4651      	mov	r1, sl
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	220a      	movs	r2, #10
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 fc62 	bl	8006658 <__multadd>
 8005d94:	45b0      	cmp	r8, r6
 8005d96:	4682      	mov	sl, r0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	f04f 020a 	mov.w	r2, #10
 8005da0:	4641      	mov	r1, r8
 8005da2:	4628      	mov	r0, r5
 8005da4:	d107      	bne.n	8005db6 <_dtoa_r+0xb1e>
 8005da6:	f000 fc57 	bl	8006658 <__multadd>
 8005daa:	4680      	mov	r8, r0
 8005dac:	4606      	mov	r6, r0
 8005dae:	9b02      	ldr	r3, [sp, #8]
 8005db0:	3301      	adds	r3, #1
 8005db2:	9302      	str	r3, [sp, #8]
 8005db4:	e777      	b.n	8005ca6 <_dtoa_r+0xa0e>
 8005db6:	f000 fc4f 	bl	8006658 <__multadd>
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	220a      	movs	r2, #10
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 fc48 	bl	8006658 <__multadd>
 8005dc8:	4606      	mov	r6, r0
 8005dca:	e7f0      	b.n	8005dae <_dtoa_r+0xb16>
 8005dcc:	f1bb 0f00 	cmp.w	fp, #0
 8005dd0:	9a08      	ldr	r2, [sp, #32]
 8005dd2:	bfcc      	ite	gt
 8005dd4:	465f      	movgt	r7, fp
 8005dd6:	2701      	movle	r7, #1
 8005dd8:	4417      	add	r7, r2
 8005dda:	f04f 0800 	mov.w	r8, #0
 8005dde:	4651      	mov	r1, sl
 8005de0:	2201      	movs	r2, #1
 8005de2:	4628      	mov	r0, r5
 8005de4:	9302      	str	r3, [sp, #8]
 8005de6:	f000 fe2f 	bl	8006a48 <__lshift>
 8005dea:	4621      	mov	r1, r4
 8005dec:	4682      	mov	sl, r0
 8005dee:	f000 fe97 	bl	8006b20 <__mcmp>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	dcb2      	bgt.n	8005d5c <_dtoa_r+0xac4>
 8005df6:	d102      	bne.n	8005dfe <_dtoa_r+0xb66>
 8005df8:	9b02      	ldr	r3, [sp, #8]
 8005dfa:	07db      	lsls	r3, r3, #31
 8005dfc:	d4ae      	bmi.n	8005d5c <_dtoa_r+0xac4>
 8005dfe:	463b      	mov	r3, r7
 8005e00:	461f      	mov	r7, r3
 8005e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e06:	2a30      	cmp	r2, #48	; 0x30
 8005e08:	d0fa      	beq.n	8005e00 <_dtoa_r+0xb68>
 8005e0a:	e6fb      	b.n	8005c04 <_dtoa_r+0x96c>
 8005e0c:	9a08      	ldr	r2, [sp, #32]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d1a5      	bne.n	8005d5e <_dtoa_r+0xac6>
 8005e12:	2331      	movs	r3, #49	; 0x31
 8005e14:	f109 0901 	add.w	r9, r9, #1
 8005e18:	7013      	strb	r3, [r2, #0]
 8005e1a:	e6f3      	b.n	8005c04 <_dtoa_r+0x96c>
 8005e1c:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <_dtoa_r+0xbd4>)
 8005e1e:	f7ff baa6 	b.w	800536e <_dtoa_r+0xd6>
 8005e22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f47f aa7f 	bne.w	8005328 <_dtoa_r+0x90>
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <_dtoa_r+0xbd8>)
 8005e2c:	f7ff ba9f 	b.w	800536e <_dtoa_r+0xd6>
 8005e30:	f1bb 0f00 	cmp.w	fp, #0
 8005e34:	dc03      	bgt.n	8005e3e <_dtoa_r+0xba6>
 8005e36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	f73f aecc 	bgt.w	8005bd6 <_dtoa_r+0x93e>
 8005e3e:	9f08      	ldr	r7, [sp, #32]
 8005e40:	4621      	mov	r1, r4
 8005e42:	4650      	mov	r0, sl
 8005e44:	f7ff f99a 	bl	800517c <quorem>
 8005e48:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e4c:	f807 3b01 	strb.w	r3, [r7], #1
 8005e50:	9a08      	ldr	r2, [sp, #32]
 8005e52:	1aba      	subs	r2, r7, r2
 8005e54:	4593      	cmp	fp, r2
 8005e56:	ddb9      	ble.n	8005dcc <_dtoa_r+0xb34>
 8005e58:	4651      	mov	r1, sl
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	220a      	movs	r2, #10
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 fbfa 	bl	8006658 <__multadd>
 8005e64:	4682      	mov	sl, r0
 8005e66:	e7eb      	b.n	8005e40 <_dtoa_r+0xba8>
 8005e68:	0800814c 	.word	0x0800814c
 8005e6c:	08007f4c 	.word	0x08007f4c
 8005e70:	080080c9 	.word	0x080080c9

08005e74 <rshift>:
 8005e74:	6903      	ldr	r3, [r0, #16]
 8005e76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005e7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005e82:	f100 0414 	add.w	r4, r0, #20
 8005e86:	dd45      	ble.n	8005f14 <rshift+0xa0>
 8005e88:	f011 011f 	ands.w	r1, r1, #31
 8005e8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005e90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005e94:	d10c      	bne.n	8005eb0 <rshift+0x3c>
 8005e96:	f100 0710 	add.w	r7, r0, #16
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	42b1      	cmp	r1, r6
 8005e9e:	d334      	bcc.n	8005f0a <rshift+0x96>
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	1eea      	subs	r2, r5, #3
 8005ea6:	4296      	cmp	r6, r2
 8005ea8:	bf38      	it	cc
 8005eaa:	2300      	movcc	r3, #0
 8005eac:	4423      	add	r3, r4
 8005eae:	e015      	b.n	8005edc <rshift+0x68>
 8005eb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005eb4:	f1c1 0820 	rsb	r8, r1, #32
 8005eb8:	40cf      	lsrs	r7, r1
 8005eba:	f105 0e04 	add.w	lr, r5, #4
 8005ebe:	46a1      	mov	r9, r4
 8005ec0:	4576      	cmp	r6, lr
 8005ec2:	46f4      	mov	ip, lr
 8005ec4:	d815      	bhi.n	8005ef2 <rshift+0x7e>
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	009a      	lsls	r2, r3, #2
 8005eca:	3a04      	subs	r2, #4
 8005ecc:	3501      	adds	r5, #1
 8005ece:	42ae      	cmp	r6, r5
 8005ed0:	bf38      	it	cc
 8005ed2:	2200      	movcc	r2, #0
 8005ed4:	18a3      	adds	r3, r4, r2
 8005ed6:	50a7      	str	r7, [r4, r2]
 8005ed8:	b107      	cbz	r7, 8005edc <rshift+0x68>
 8005eda:	3304      	adds	r3, #4
 8005edc:	1b1a      	subs	r2, r3, r4
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005ee4:	bf08      	it	eq
 8005ee6:	2300      	moveq	r3, #0
 8005ee8:	6102      	str	r2, [r0, #16]
 8005eea:	bf08      	it	eq
 8005eec:	6143      	streq	r3, [r0, #20]
 8005eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ef2:	f8dc c000 	ldr.w	ip, [ip]
 8005ef6:	fa0c fc08 	lsl.w	ip, ip, r8
 8005efa:	ea4c 0707 	orr.w	r7, ip, r7
 8005efe:	f849 7b04 	str.w	r7, [r9], #4
 8005f02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005f06:	40cf      	lsrs	r7, r1
 8005f08:	e7da      	b.n	8005ec0 <rshift+0x4c>
 8005f0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8005f0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8005f12:	e7c3      	b.n	8005e9c <rshift+0x28>
 8005f14:	4623      	mov	r3, r4
 8005f16:	e7e1      	b.n	8005edc <rshift+0x68>

08005f18 <__hexdig_fun>:
 8005f18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005f1c:	2b09      	cmp	r3, #9
 8005f1e:	d802      	bhi.n	8005f26 <__hexdig_fun+0xe>
 8005f20:	3820      	subs	r0, #32
 8005f22:	b2c0      	uxtb	r0, r0
 8005f24:	4770      	bx	lr
 8005f26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	d801      	bhi.n	8005f32 <__hexdig_fun+0x1a>
 8005f2e:	3847      	subs	r0, #71	; 0x47
 8005f30:	e7f7      	b.n	8005f22 <__hexdig_fun+0xa>
 8005f32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	d801      	bhi.n	8005f3e <__hexdig_fun+0x26>
 8005f3a:	3827      	subs	r0, #39	; 0x27
 8005f3c:	e7f1      	b.n	8005f22 <__hexdig_fun+0xa>
 8005f3e:	2000      	movs	r0, #0
 8005f40:	4770      	bx	lr
	...

08005f44 <__gethex>:
 8005f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	b08b      	sub	sp, #44	; 0x2c
 8005f4a:	468b      	mov	fp, r1
 8005f4c:	9306      	str	r3, [sp, #24]
 8005f4e:	4bb9      	ldr	r3, [pc, #740]	; (8006234 <__gethex+0x2f0>)
 8005f50:	9002      	str	r0, [sp, #8]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	9303      	str	r3, [sp, #12]
 8005f56:	4618      	mov	r0, r3
 8005f58:	4690      	mov	r8, r2
 8005f5a:	f7fa f941 	bl	80001e0 <strlen>
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	f8db 2000 	ldr.w	r2, [fp]
 8005f64:	4403      	add	r3, r0
 8005f66:	4682      	mov	sl, r0
 8005f68:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005f6c:	9307      	str	r3, [sp, #28]
 8005f6e:	1c93      	adds	r3, r2, #2
 8005f70:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005f74:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005f78:	32fe      	adds	r2, #254	; 0xfe
 8005f7a:	18d1      	adds	r1, r2, r3
 8005f7c:	461f      	mov	r7, r3
 8005f7e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f82:	9101      	str	r1, [sp, #4]
 8005f84:	2830      	cmp	r0, #48	; 0x30
 8005f86:	d0f8      	beq.n	8005f7a <__gethex+0x36>
 8005f88:	f7ff ffc6 	bl	8005f18 <__hexdig_fun>
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d13a      	bne.n	8006008 <__gethex+0xc4>
 8005f92:	9903      	ldr	r1, [sp, #12]
 8005f94:	4652      	mov	r2, sl
 8005f96:	4638      	mov	r0, r7
 8005f98:	f001 f9d8 	bl	800734c <strncmp>
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d166      	bne.n	8006070 <__gethex+0x12c>
 8005fa2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005fa6:	eb07 060a 	add.w	r6, r7, sl
 8005faa:	f7ff ffb5 	bl	8005f18 <__hexdig_fun>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d060      	beq.n	8006074 <__gethex+0x130>
 8005fb2:	4633      	mov	r3, r6
 8005fb4:	7818      	ldrb	r0, [r3, #0]
 8005fb6:	2830      	cmp	r0, #48	; 0x30
 8005fb8:	461f      	mov	r7, r3
 8005fba:	f103 0301 	add.w	r3, r3, #1
 8005fbe:	d0f9      	beq.n	8005fb4 <__gethex+0x70>
 8005fc0:	f7ff ffaa 	bl	8005f18 <__hexdig_fun>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	fab0 f480 	clz	r4, r0
 8005fca:	0964      	lsrs	r4, r4, #5
 8005fcc:	4635      	mov	r5, r6
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	463a      	mov	r2, r7
 8005fd2:	4616      	mov	r6, r2
 8005fd4:	3201      	adds	r2, #1
 8005fd6:	7830      	ldrb	r0, [r6, #0]
 8005fd8:	f7ff ff9e 	bl	8005f18 <__hexdig_fun>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d1f8      	bne.n	8005fd2 <__gethex+0x8e>
 8005fe0:	9903      	ldr	r1, [sp, #12]
 8005fe2:	4652      	mov	r2, sl
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f001 f9b1 	bl	800734c <strncmp>
 8005fea:	b980      	cbnz	r0, 800600e <__gethex+0xca>
 8005fec:	b94d      	cbnz	r5, 8006002 <__gethex+0xbe>
 8005fee:	eb06 050a 	add.w	r5, r6, sl
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4616      	mov	r6, r2
 8005ff6:	3201      	adds	r2, #1
 8005ff8:	7830      	ldrb	r0, [r6, #0]
 8005ffa:	f7ff ff8d 	bl	8005f18 <__hexdig_fun>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d1f8      	bne.n	8005ff4 <__gethex+0xb0>
 8006002:	1bad      	subs	r5, r5, r6
 8006004:	00ad      	lsls	r5, r5, #2
 8006006:	e004      	b.n	8006012 <__gethex+0xce>
 8006008:	2400      	movs	r4, #0
 800600a:	4625      	mov	r5, r4
 800600c:	e7e0      	b.n	8005fd0 <__gethex+0x8c>
 800600e:	2d00      	cmp	r5, #0
 8006010:	d1f7      	bne.n	8006002 <__gethex+0xbe>
 8006012:	7833      	ldrb	r3, [r6, #0]
 8006014:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006018:	2b50      	cmp	r3, #80	; 0x50
 800601a:	d139      	bne.n	8006090 <__gethex+0x14c>
 800601c:	7873      	ldrb	r3, [r6, #1]
 800601e:	2b2b      	cmp	r3, #43	; 0x2b
 8006020:	d02a      	beq.n	8006078 <__gethex+0x134>
 8006022:	2b2d      	cmp	r3, #45	; 0x2d
 8006024:	d02c      	beq.n	8006080 <__gethex+0x13c>
 8006026:	1c71      	adds	r1, r6, #1
 8006028:	f04f 0900 	mov.w	r9, #0
 800602c:	7808      	ldrb	r0, [r1, #0]
 800602e:	f7ff ff73 	bl	8005f18 <__hexdig_fun>
 8006032:	1e43      	subs	r3, r0, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b18      	cmp	r3, #24
 8006038:	d82a      	bhi.n	8006090 <__gethex+0x14c>
 800603a:	f1a0 0210 	sub.w	r2, r0, #16
 800603e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006042:	f7ff ff69 	bl	8005f18 <__hexdig_fun>
 8006046:	1e43      	subs	r3, r0, #1
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b18      	cmp	r3, #24
 800604c:	d91b      	bls.n	8006086 <__gethex+0x142>
 800604e:	f1b9 0f00 	cmp.w	r9, #0
 8006052:	d000      	beq.n	8006056 <__gethex+0x112>
 8006054:	4252      	negs	r2, r2
 8006056:	4415      	add	r5, r2
 8006058:	f8cb 1000 	str.w	r1, [fp]
 800605c:	b1d4      	cbz	r4, 8006094 <__gethex+0x150>
 800605e:	9b01      	ldr	r3, [sp, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	bf14      	ite	ne
 8006064:	2700      	movne	r7, #0
 8006066:	2706      	moveq	r7, #6
 8006068:	4638      	mov	r0, r7
 800606a:	b00b      	add	sp, #44	; 0x2c
 800606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006070:	463e      	mov	r6, r7
 8006072:	4625      	mov	r5, r4
 8006074:	2401      	movs	r4, #1
 8006076:	e7cc      	b.n	8006012 <__gethex+0xce>
 8006078:	f04f 0900 	mov.w	r9, #0
 800607c:	1cb1      	adds	r1, r6, #2
 800607e:	e7d5      	b.n	800602c <__gethex+0xe8>
 8006080:	f04f 0901 	mov.w	r9, #1
 8006084:	e7fa      	b.n	800607c <__gethex+0x138>
 8006086:	230a      	movs	r3, #10
 8006088:	fb03 0202 	mla	r2, r3, r2, r0
 800608c:	3a10      	subs	r2, #16
 800608e:	e7d6      	b.n	800603e <__gethex+0xfa>
 8006090:	4631      	mov	r1, r6
 8006092:	e7e1      	b.n	8006058 <__gethex+0x114>
 8006094:	1bf3      	subs	r3, r6, r7
 8006096:	3b01      	subs	r3, #1
 8006098:	4621      	mov	r1, r4
 800609a:	2b07      	cmp	r3, #7
 800609c:	dc0a      	bgt.n	80060b4 <__gethex+0x170>
 800609e:	9802      	ldr	r0, [sp, #8]
 80060a0:	f000 fa78 	bl	8006594 <_Balloc>
 80060a4:	4604      	mov	r4, r0
 80060a6:	b940      	cbnz	r0, 80060ba <__gethex+0x176>
 80060a8:	4b63      	ldr	r3, [pc, #396]	; (8006238 <__gethex+0x2f4>)
 80060aa:	4602      	mov	r2, r0
 80060ac:	21de      	movs	r1, #222	; 0xde
 80060ae:	4863      	ldr	r0, [pc, #396]	; (800623c <__gethex+0x2f8>)
 80060b0:	f001 f96c 	bl	800738c <__assert_func>
 80060b4:	3101      	adds	r1, #1
 80060b6:	105b      	asrs	r3, r3, #1
 80060b8:	e7ef      	b.n	800609a <__gethex+0x156>
 80060ba:	f100 0914 	add.w	r9, r0, #20
 80060be:	f04f 0b00 	mov.w	fp, #0
 80060c2:	f1ca 0301 	rsb	r3, sl, #1
 80060c6:	f8cd 9010 	str.w	r9, [sp, #16]
 80060ca:	f8cd b004 	str.w	fp, [sp, #4]
 80060ce:	9308      	str	r3, [sp, #32]
 80060d0:	42b7      	cmp	r7, r6
 80060d2:	d33f      	bcc.n	8006154 <__gethex+0x210>
 80060d4:	9f04      	ldr	r7, [sp, #16]
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	f847 3b04 	str.w	r3, [r7], #4
 80060dc:	eba7 0709 	sub.w	r7, r7, r9
 80060e0:	10bf      	asrs	r7, r7, #2
 80060e2:	6127      	str	r7, [r4, #16]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fb4b 	bl	8006780 <__hi0bits>
 80060ea:	017f      	lsls	r7, r7, #5
 80060ec:	f8d8 6000 	ldr.w	r6, [r8]
 80060f0:	1a3f      	subs	r7, r7, r0
 80060f2:	42b7      	cmp	r7, r6
 80060f4:	dd62      	ble.n	80061bc <__gethex+0x278>
 80060f6:	1bbf      	subs	r7, r7, r6
 80060f8:	4639      	mov	r1, r7
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 fedd 	bl	8006eba <__any_on>
 8006100:	4682      	mov	sl, r0
 8006102:	b1a8      	cbz	r0, 8006130 <__gethex+0x1ec>
 8006104:	1e7b      	subs	r3, r7, #1
 8006106:	1159      	asrs	r1, r3, #5
 8006108:	f003 021f 	and.w	r2, r3, #31
 800610c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006110:	f04f 0a01 	mov.w	sl, #1
 8006114:	fa0a f202 	lsl.w	r2, sl, r2
 8006118:	420a      	tst	r2, r1
 800611a:	d009      	beq.n	8006130 <__gethex+0x1ec>
 800611c:	4553      	cmp	r3, sl
 800611e:	dd05      	ble.n	800612c <__gethex+0x1e8>
 8006120:	1eb9      	subs	r1, r7, #2
 8006122:	4620      	mov	r0, r4
 8006124:	f000 fec9 	bl	8006eba <__any_on>
 8006128:	2800      	cmp	r0, #0
 800612a:	d144      	bne.n	80061b6 <__gethex+0x272>
 800612c:	f04f 0a02 	mov.w	sl, #2
 8006130:	4639      	mov	r1, r7
 8006132:	4620      	mov	r0, r4
 8006134:	f7ff fe9e 	bl	8005e74 <rshift>
 8006138:	443d      	add	r5, r7
 800613a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800613e:	42ab      	cmp	r3, r5
 8006140:	da4a      	bge.n	80061d8 <__gethex+0x294>
 8006142:	9802      	ldr	r0, [sp, #8]
 8006144:	4621      	mov	r1, r4
 8006146:	f000 fa65 	bl	8006614 <_Bfree>
 800614a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800614c:	2300      	movs	r3, #0
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	27a3      	movs	r7, #163	; 0xa3
 8006152:	e789      	b.n	8006068 <__gethex+0x124>
 8006154:	1e73      	subs	r3, r6, #1
 8006156:	9a07      	ldr	r2, [sp, #28]
 8006158:	9305      	str	r3, [sp, #20]
 800615a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800615e:	4293      	cmp	r3, r2
 8006160:	d019      	beq.n	8006196 <__gethex+0x252>
 8006162:	f1bb 0f20 	cmp.w	fp, #32
 8006166:	d107      	bne.n	8006178 <__gethex+0x234>
 8006168:	9b04      	ldr	r3, [sp, #16]
 800616a:	9a01      	ldr	r2, [sp, #4]
 800616c:	f843 2b04 	str.w	r2, [r3], #4
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	2300      	movs	r3, #0
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	469b      	mov	fp, r3
 8006178:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800617c:	f7ff fecc 	bl	8005f18 <__hexdig_fun>
 8006180:	9b01      	ldr	r3, [sp, #4]
 8006182:	f000 000f 	and.w	r0, r0, #15
 8006186:	fa00 f00b 	lsl.w	r0, r0, fp
 800618a:	4303      	orrs	r3, r0
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	f10b 0b04 	add.w	fp, fp, #4
 8006192:	9b05      	ldr	r3, [sp, #20]
 8006194:	e00d      	b.n	80061b2 <__gethex+0x26e>
 8006196:	9b05      	ldr	r3, [sp, #20]
 8006198:	9a08      	ldr	r2, [sp, #32]
 800619a:	4413      	add	r3, r2
 800619c:	42bb      	cmp	r3, r7
 800619e:	d3e0      	bcc.n	8006162 <__gethex+0x21e>
 80061a0:	4618      	mov	r0, r3
 80061a2:	9903      	ldr	r1, [sp, #12]
 80061a4:	9309      	str	r3, [sp, #36]	; 0x24
 80061a6:	4652      	mov	r2, sl
 80061a8:	f001 f8d0 	bl	800734c <strncmp>
 80061ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d1d7      	bne.n	8006162 <__gethex+0x21e>
 80061b2:	461e      	mov	r6, r3
 80061b4:	e78c      	b.n	80060d0 <__gethex+0x18c>
 80061b6:	f04f 0a03 	mov.w	sl, #3
 80061ba:	e7b9      	b.n	8006130 <__gethex+0x1ec>
 80061bc:	da09      	bge.n	80061d2 <__gethex+0x28e>
 80061be:	1bf7      	subs	r7, r6, r7
 80061c0:	4621      	mov	r1, r4
 80061c2:	9802      	ldr	r0, [sp, #8]
 80061c4:	463a      	mov	r2, r7
 80061c6:	f000 fc3f 	bl	8006a48 <__lshift>
 80061ca:	1bed      	subs	r5, r5, r7
 80061cc:	4604      	mov	r4, r0
 80061ce:	f100 0914 	add.w	r9, r0, #20
 80061d2:	f04f 0a00 	mov.w	sl, #0
 80061d6:	e7b0      	b.n	800613a <__gethex+0x1f6>
 80061d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80061dc:	42a8      	cmp	r0, r5
 80061de:	dd70      	ble.n	80062c2 <__gethex+0x37e>
 80061e0:	1b45      	subs	r5, r0, r5
 80061e2:	42ae      	cmp	r6, r5
 80061e4:	dc34      	bgt.n	8006250 <__gethex+0x30c>
 80061e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d028      	beq.n	8006240 <__gethex+0x2fc>
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d02a      	beq.n	8006248 <__gethex+0x304>
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d115      	bne.n	8006222 <__gethex+0x2de>
 80061f6:	42ae      	cmp	r6, r5
 80061f8:	d113      	bne.n	8006222 <__gethex+0x2de>
 80061fa:	2e01      	cmp	r6, #1
 80061fc:	d10b      	bne.n	8006216 <__gethex+0x2d2>
 80061fe:	9a06      	ldr	r2, [sp, #24]
 8006200:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	2301      	movs	r3, #1
 8006208:	6123      	str	r3, [r4, #16]
 800620a:	f8c9 3000 	str.w	r3, [r9]
 800620e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006210:	2762      	movs	r7, #98	; 0x62
 8006212:	601c      	str	r4, [r3, #0]
 8006214:	e728      	b.n	8006068 <__gethex+0x124>
 8006216:	1e71      	subs	r1, r6, #1
 8006218:	4620      	mov	r0, r4
 800621a:	f000 fe4e 	bl	8006eba <__any_on>
 800621e:	2800      	cmp	r0, #0
 8006220:	d1ed      	bne.n	80061fe <__gethex+0x2ba>
 8006222:	9802      	ldr	r0, [sp, #8]
 8006224:	4621      	mov	r1, r4
 8006226:	f000 f9f5 	bl	8006614 <_Bfree>
 800622a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800622c:	2300      	movs	r3, #0
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	2750      	movs	r7, #80	; 0x50
 8006232:	e719      	b.n	8006068 <__gethex+0x124>
 8006234:	080081c8 	.word	0x080081c8
 8006238:	0800814c 	.word	0x0800814c
 800623c:	0800815d 	.word	0x0800815d
 8006240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1ed      	bne.n	8006222 <__gethex+0x2de>
 8006246:	e7da      	b.n	80061fe <__gethex+0x2ba>
 8006248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1d7      	bne.n	80061fe <__gethex+0x2ba>
 800624e:	e7e8      	b.n	8006222 <__gethex+0x2de>
 8006250:	1e6f      	subs	r7, r5, #1
 8006252:	f1ba 0f00 	cmp.w	sl, #0
 8006256:	d131      	bne.n	80062bc <__gethex+0x378>
 8006258:	b127      	cbz	r7, 8006264 <__gethex+0x320>
 800625a:	4639      	mov	r1, r7
 800625c:	4620      	mov	r0, r4
 800625e:	f000 fe2c 	bl	8006eba <__any_on>
 8006262:	4682      	mov	sl, r0
 8006264:	117b      	asrs	r3, r7, #5
 8006266:	2101      	movs	r1, #1
 8006268:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800626c:	f007 071f 	and.w	r7, r7, #31
 8006270:	fa01 f707 	lsl.w	r7, r1, r7
 8006274:	421f      	tst	r7, r3
 8006276:	4629      	mov	r1, r5
 8006278:	4620      	mov	r0, r4
 800627a:	bf18      	it	ne
 800627c:	f04a 0a02 	orrne.w	sl, sl, #2
 8006280:	1b76      	subs	r6, r6, r5
 8006282:	f7ff fdf7 	bl	8005e74 <rshift>
 8006286:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800628a:	2702      	movs	r7, #2
 800628c:	f1ba 0f00 	cmp.w	sl, #0
 8006290:	d048      	beq.n	8006324 <__gethex+0x3e0>
 8006292:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d015      	beq.n	80062c6 <__gethex+0x382>
 800629a:	2b03      	cmp	r3, #3
 800629c:	d017      	beq.n	80062ce <__gethex+0x38a>
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d109      	bne.n	80062b6 <__gethex+0x372>
 80062a2:	f01a 0f02 	tst.w	sl, #2
 80062a6:	d006      	beq.n	80062b6 <__gethex+0x372>
 80062a8:	f8d9 0000 	ldr.w	r0, [r9]
 80062ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80062b0:	f01a 0f01 	tst.w	sl, #1
 80062b4:	d10e      	bne.n	80062d4 <__gethex+0x390>
 80062b6:	f047 0710 	orr.w	r7, r7, #16
 80062ba:	e033      	b.n	8006324 <__gethex+0x3e0>
 80062bc:	f04f 0a01 	mov.w	sl, #1
 80062c0:	e7d0      	b.n	8006264 <__gethex+0x320>
 80062c2:	2701      	movs	r7, #1
 80062c4:	e7e2      	b.n	800628c <__gethex+0x348>
 80062c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062c8:	f1c3 0301 	rsb	r3, r3, #1
 80062cc:	9315      	str	r3, [sp, #84]	; 0x54
 80062ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d0f0      	beq.n	80062b6 <__gethex+0x372>
 80062d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80062d8:	f104 0314 	add.w	r3, r4, #20
 80062dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80062e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80062e4:	f04f 0c00 	mov.w	ip, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80062ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80062f2:	d01c      	beq.n	800632e <__gethex+0x3ea>
 80062f4:	3201      	adds	r2, #1
 80062f6:	6002      	str	r2, [r0, #0]
 80062f8:	2f02      	cmp	r7, #2
 80062fa:	f104 0314 	add.w	r3, r4, #20
 80062fe:	d13d      	bne.n	800637c <__gethex+0x438>
 8006300:	f8d8 2000 	ldr.w	r2, [r8]
 8006304:	3a01      	subs	r2, #1
 8006306:	42b2      	cmp	r2, r6
 8006308:	d10a      	bne.n	8006320 <__gethex+0x3dc>
 800630a:	1171      	asrs	r1, r6, #5
 800630c:	2201      	movs	r2, #1
 800630e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006312:	f006 061f 	and.w	r6, r6, #31
 8006316:	fa02 f606 	lsl.w	r6, r2, r6
 800631a:	421e      	tst	r6, r3
 800631c:	bf18      	it	ne
 800631e:	4617      	movne	r7, r2
 8006320:	f047 0720 	orr.w	r7, r7, #32
 8006324:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006326:	601c      	str	r4, [r3, #0]
 8006328:	9b06      	ldr	r3, [sp, #24]
 800632a:	601d      	str	r5, [r3, #0]
 800632c:	e69c      	b.n	8006068 <__gethex+0x124>
 800632e:	4299      	cmp	r1, r3
 8006330:	f843 cc04 	str.w	ip, [r3, #-4]
 8006334:	d8d8      	bhi.n	80062e8 <__gethex+0x3a4>
 8006336:	68a3      	ldr	r3, [r4, #8]
 8006338:	459b      	cmp	fp, r3
 800633a:	db17      	blt.n	800636c <__gethex+0x428>
 800633c:	6861      	ldr	r1, [r4, #4]
 800633e:	9802      	ldr	r0, [sp, #8]
 8006340:	3101      	adds	r1, #1
 8006342:	f000 f927 	bl	8006594 <_Balloc>
 8006346:	4681      	mov	r9, r0
 8006348:	b918      	cbnz	r0, 8006352 <__gethex+0x40e>
 800634a:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <__gethex+0x470>)
 800634c:	4602      	mov	r2, r0
 800634e:	2184      	movs	r1, #132	; 0x84
 8006350:	e6ad      	b.n	80060ae <__gethex+0x16a>
 8006352:	6922      	ldr	r2, [r4, #16]
 8006354:	3202      	adds	r2, #2
 8006356:	f104 010c 	add.w	r1, r4, #12
 800635a:	0092      	lsls	r2, r2, #2
 800635c:	300c      	adds	r0, #12
 800635e:	f000 f90b 	bl	8006578 <memcpy>
 8006362:	4621      	mov	r1, r4
 8006364:	9802      	ldr	r0, [sp, #8]
 8006366:	f000 f955 	bl	8006614 <_Bfree>
 800636a:	464c      	mov	r4, r9
 800636c:	6923      	ldr	r3, [r4, #16]
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006374:	6122      	str	r2, [r4, #16]
 8006376:	2201      	movs	r2, #1
 8006378:	615a      	str	r2, [r3, #20]
 800637a:	e7bd      	b.n	80062f8 <__gethex+0x3b4>
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	455a      	cmp	r2, fp
 8006380:	dd0b      	ble.n	800639a <__gethex+0x456>
 8006382:	2101      	movs	r1, #1
 8006384:	4620      	mov	r0, r4
 8006386:	f7ff fd75 	bl	8005e74 <rshift>
 800638a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800638e:	3501      	adds	r5, #1
 8006390:	42ab      	cmp	r3, r5
 8006392:	f6ff aed6 	blt.w	8006142 <__gethex+0x1fe>
 8006396:	2701      	movs	r7, #1
 8006398:	e7c2      	b.n	8006320 <__gethex+0x3dc>
 800639a:	f016 061f 	ands.w	r6, r6, #31
 800639e:	d0fa      	beq.n	8006396 <__gethex+0x452>
 80063a0:	449a      	add	sl, r3
 80063a2:	f1c6 0620 	rsb	r6, r6, #32
 80063a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80063aa:	f000 f9e9 	bl	8006780 <__hi0bits>
 80063ae:	42b0      	cmp	r0, r6
 80063b0:	dbe7      	blt.n	8006382 <__gethex+0x43e>
 80063b2:	e7f0      	b.n	8006396 <__gethex+0x452>
 80063b4:	0800814c 	.word	0x0800814c

080063b8 <L_shift>:
 80063b8:	f1c2 0208 	rsb	r2, r2, #8
 80063bc:	0092      	lsls	r2, r2, #2
 80063be:	b570      	push	{r4, r5, r6, lr}
 80063c0:	f1c2 0620 	rsb	r6, r2, #32
 80063c4:	6843      	ldr	r3, [r0, #4]
 80063c6:	6804      	ldr	r4, [r0, #0]
 80063c8:	fa03 f506 	lsl.w	r5, r3, r6
 80063cc:	432c      	orrs	r4, r5
 80063ce:	40d3      	lsrs	r3, r2
 80063d0:	6004      	str	r4, [r0, #0]
 80063d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80063d6:	4288      	cmp	r0, r1
 80063d8:	d3f4      	bcc.n	80063c4 <L_shift+0xc>
 80063da:	bd70      	pop	{r4, r5, r6, pc}

080063dc <__match>:
 80063dc:	b530      	push	{r4, r5, lr}
 80063de:	6803      	ldr	r3, [r0, #0]
 80063e0:	3301      	adds	r3, #1
 80063e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e6:	b914      	cbnz	r4, 80063ee <__match+0x12>
 80063e8:	6003      	str	r3, [r0, #0]
 80063ea:	2001      	movs	r0, #1
 80063ec:	bd30      	pop	{r4, r5, pc}
 80063ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80063f6:	2d19      	cmp	r5, #25
 80063f8:	bf98      	it	ls
 80063fa:	3220      	addls	r2, #32
 80063fc:	42a2      	cmp	r2, r4
 80063fe:	d0f0      	beq.n	80063e2 <__match+0x6>
 8006400:	2000      	movs	r0, #0
 8006402:	e7f3      	b.n	80063ec <__match+0x10>

08006404 <__hexnan>:
 8006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	680b      	ldr	r3, [r1, #0]
 800640a:	6801      	ldr	r1, [r0, #0]
 800640c:	115e      	asrs	r6, r3, #5
 800640e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006412:	f013 031f 	ands.w	r3, r3, #31
 8006416:	b087      	sub	sp, #28
 8006418:	bf18      	it	ne
 800641a:	3604      	addne	r6, #4
 800641c:	2500      	movs	r5, #0
 800641e:	1f37      	subs	r7, r6, #4
 8006420:	4682      	mov	sl, r0
 8006422:	4690      	mov	r8, r2
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	f846 5c04 	str.w	r5, [r6, #-4]
 800642a:	46b9      	mov	r9, r7
 800642c:	463c      	mov	r4, r7
 800642e:	9502      	str	r5, [sp, #8]
 8006430:	46ab      	mov	fp, r5
 8006432:	784a      	ldrb	r2, [r1, #1]
 8006434:	1c4b      	adds	r3, r1, #1
 8006436:	9303      	str	r3, [sp, #12]
 8006438:	b342      	cbz	r2, 800648c <__hexnan+0x88>
 800643a:	4610      	mov	r0, r2
 800643c:	9105      	str	r1, [sp, #20]
 800643e:	9204      	str	r2, [sp, #16]
 8006440:	f7ff fd6a 	bl	8005f18 <__hexdig_fun>
 8006444:	2800      	cmp	r0, #0
 8006446:	d14f      	bne.n	80064e8 <__hexnan+0xe4>
 8006448:	9a04      	ldr	r2, [sp, #16]
 800644a:	9905      	ldr	r1, [sp, #20]
 800644c:	2a20      	cmp	r2, #32
 800644e:	d818      	bhi.n	8006482 <__hexnan+0x7e>
 8006450:	9b02      	ldr	r3, [sp, #8]
 8006452:	459b      	cmp	fp, r3
 8006454:	dd13      	ble.n	800647e <__hexnan+0x7a>
 8006456:	454c      	cmp	r4, r9
 8006458:	d206      	bcs.n	8006468 <__hexnan+0x64>
 800645a:	2d07      	cmp	r5, #7
 800645c:	dc04      	bgt.n	8006468 <__hexnan+0x64>
 800645e:	462a      	mov	r2, r5
 8006460:	4649      	mov	r1, r9
 8006462:	4620      	mov	r0, r4
 8006464:	f7ff ffa8 	bl	80063b8 <L_shift>
 8006468:	4544      	cmp	r4, r8
 800646a:	d950      	bls.n	800650e <__hexnan+0x10a>
 800646c:	2300      	movs	r3, #0
 800646e:	f1a4 0904 	sub.w	r9, r4, #4
 8006472:	f844 3c04 	str.w	r3, [r4, #-4]
 8006476:	f8cd b008 	str.w	fp, [sp, #8]
 800647a:	464c      	mov	r4, r9
 800647c:	461d      	mov	r5, r3
 800647e:	9903      	ldr	r1, [sp, #12]
 8006480:	e7d7      	b.n	8006432 <__hexnan+0x2e>
 8006482:	2a29      	cmp	r2, #41	; 0x29
 8006484:	d156      	bne.n	8006534 <__hexnan+0x130>
 8006486:	3102      	adds	r1, #2
 8006488:	f8ca 1000 	str.w	r1, [sl]
 800648c:	f1bb 0f00 	cmp.w	fp, #0
 8006490:	d050      	beq.n	8006534 <__hexnan+0x130>
 8006492:	454c      	cmp	r4, r9
 8006494:	d206      	bcs.n	80064a4 <__hexnan+0xa0>
 8006496:	2d07      	cmp	r5, #7
 8006498:	dc04      	bgt.n	80064a4 <__hexnan+0xa0>
 800649a:	462a      	mov	r2, r5
 800649c:	4649      	mov	r1, r9
 800649e:	4620      	mov	r0, r4
 80064a0:	f7ff ff8a 	bl	80063b8 <L_shift>
 80064a4:	4544      	cmp	r4, r8
 80064a6:	d934      	bls.n	8006512 <__hexnan+0x10e>
 80064a8:	f1a8 0204 	sub.w	r2, r8, #4
 80064ac:	4623      	mov	r3, r4
 80064ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80064b2:	f842 1f04 	str.w	r1, [r2, #4]!
 80064b6:	429f      	cmp	r7, r3
 80064b8:	d2f9      	bcs.n	80064ae <__hexnan+0xaa>
 80064ba:	1b3b      	subs	r3, r7, r4
 80064bc:	f023 0303 	bic.w	r3, r3, #3
 80064c0:	3304      	adds	r3, #4
 80064c2:	3401      	adds	r4, #1
 80064c4:	3e03      	subs	r6, #3
 80064c6:	42b4      	cmp	r4, r6
 80064c8:	bf88      	it	hi
 80064ca:	2304      	movhi	r3, #4
 80064cc:	4443      	add	r3, r8
 80064ce:	2200      	movs	r2, #0
 80064d0:	f843 2b04 	str.w	r2, [r3], #4
 80064d4:	429f      	cmp	r7, r3
 80064d6:	d2fb      	bcs.n	80064d0 <__hexnan+0xcc>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	b91b      	cbnz	r3, 80064e4 <__hexnan+0xe0>
 80064dc:	4547      	cmp	r7, r8
 80064de:	d127      	bne.n	8006530 <__hexnan+0x12c>
 80064e0:	2301      	movs	r3, #1
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	2005      	movs	r0, #5
 80064e6:	e026      	b.n	8006536 <__hexnan+0x132>
 80064e8:	3501      	adds	r5, #1
 80064ea:	2d08      	cmp	r5, #8
 80064ec:	f10b 0b01 	add.w	fp, fp, #1
 80064f0:	dd06      	ble.n	8006500 <__hexnan+0xfc>
 80064f2:	4544      	cmp	r4, r8
 80064f4:	d9c3      	bls.n	800647e <__hexnan+0x7a>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80064fc:	2501      	movs	r5, #1
 80064fe:	3c04      	subs	r4, #4
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	f000 000f 	and.w	r0, r0, #15
 8006506:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800650a:	6022      	str	r2, [r4, #0]
 800650c:	e7b7      	b.n	800647e <__hexnan+0x7a>
 800650e:	2508      	movs	r5, #8
 8006510:	e7b5      	b.n	800647e <__hexnan+0x7a>
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0df      	beq.n	80064d8 <__hexnan+0xd4>
 8006518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800651c:	f1c3 0320 	rsb	r3, r3, #32
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
 8006524:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006528:	401a      	ands	r2, r3
 800652a:	f846 2c04 	str.w	r2, [r6, #-4]
 800652e:	e7d3      	b.n	80064d8 <__hexnan+0xd4>
 8006530:	3f04      	subs	r7, #4
 8006532:	e7d1      	b.n	80064d8 <__hexnan+0xd4>
 8006534:	2004      	movs	r0, #4
 8006536:	b007      	add	sp, #28
 8006538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800653c <_localeconv_r>:
 800653c:	4800      	ldr	r0, [pc, #0]	; (8006540 <_localeconv_r+0x4>)
 800653e:	4770      	bx	lr
 8006540:	20000198 	.word	0x20000198

08006544 <malloc>:
 8006544:	4b02      	ldr	r3, [pc, #8]	; (8006550 <malloc+0xc>)
 8006546:	4601      	mov	r1, r0
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f000 bd33 	b.w	8006fb4 <_malloc_r>
 800654e:	bf00      	nop
 8006550:	20000040 	.word	0x20000040

08006554 <__ascii_mbtowc>:
 8006554:	b082      	sub	sp, #8
 8006556:	b901      	cbnz	r1, 800655a <__ascii_mbtowc+0x6>
 8006558:	a901      	add	r1, sp, #4
 800655a:	b142      	cbz	r2, 800656e <__ascii_mbtowc+0x1a>
 800655c:	b14b      	cbz	r3, 8006572 <__ascii_mbtowc+0x1e>
 800655e:	7813      	ldrb	r3, [r2, #0]
 8006560:	600b      	str	r3, [r1, #0]
 8006562:	7812      	ldrb	r2, [r2, #0]
 8006564:	1e10      	subs	r0, r2, #0
 8006566:	bf18      	it	ne
 8006568:	2001      	movne	r0, #1
 800656a:	b002      	add	sp, #8
 800656c:	4770      	bx	lr
 800656e:	4610      	mov	r0, r2
 8006570:	e7fb      	b.n	800656a <__ascii_mbtowc+0x16>
 8006572:	f06f 0001 	mvn.w	r0, #1
 8006576:	e7f8      	b.n	800656a <__ascii_mbtowc+0x16>

08006578 <memcpy>:
 8006578:	440a      	add	r2, r1
 800657a:	4291      	cmp	r1, r2
 800657c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006580:	d100      	bne.n	8006584 <memcpy+0xc>
 8006582:	4770      	bx	lr
 8006584:	b510      	push	{r4, lr}
 8006586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800658a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800658e:	4291      	cmp	r1, r2
 8006590:	d1f9      	bne.n	8006586 <memcpy+0xe>
 8006592:	bd10      	pop	{r4, pc}

08006594 <_Balloc>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006598:	4604      	mov	r4, r0
 800659a:	460d      	mov	r5, r1
 800659c:	b976      	cbnz	r6, 80065bc <_Balloc+0x28>
 800659e:	2010      	movs	r0, #16
 80065a0:	f7ff ffd0 	bl	8006544 <malloc>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6260      	str	r0, [r4, #36]	; 0x24
 80065a8:	b920      	cbnz	r0, 80065b4 <_Balloc+0x20>
 80065aa:	4b18      	ldr	r3, [pc, #96]	; (800660c <_Balloc+0x78>)
 80065ac:	4818      	ldr	r0, [pc, #96]	; (8006610 <_Balloc+0x7c>)
 80065ae:	2166      	movs	r1, #102	; 0x66
 80065b0:	f000 feec 	bl	800738c <__assert_func>
 80065b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065b8:	6006      	str	r6, [r0, #0]
 80065ba:	60c6      	str	r6, [r0, #12]
 80065bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065be:	68f3      	ldr	r3, [r6, #12]
 80065c0:	b183      	cbz	r3, 80065e4 <_Balloc+0x50>
 80065c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065ca:	b9b8      	cbnz	r0, 80065fc <_Balloc+0x68>
 80065cc:	2101      	movs	r1, #1
 80065ce:	fa01 f605 	lsl.w	r6, r1, r5
 80065d2:	1d72      	adds	r2, r6, #5
 80065d4:	0092      	lsls	r2, r2, #2
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 fc90 	bl	8006efc <_calloc_r>
 80065dc:	b160      	cbz	r0, 80065f8 <_Balloc+0x64>
 80065de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065e2:	e00e      	b.n	8006602 <_Balloc+0x6e>
 80065e4:	2221      	movs	r2, #33	; 0x21
 80065e6:	2104      	movs	r1, #4
 80065e8:	4620      	mov	r0, r4
 80065ea:	f000 fc87 	bl	8006efc <_calloc_r>
 80065ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f0:	60f0      	str	r0, [r6, #12]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e4      	bne.n	80065c2 <_Balloc+0x2e>
 80065f8:	2000      	movs	r0, #0
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	6802      	ldr	r2, [r0, #0]
 80065fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006602:	2300      	movs	r3, #0
 8006604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006608:	e7f7      	b.n	80065fa <_Balloc+0x66>
 800660a:	bf00      	nop
 800660c:	080080d6 	.word	0x080080d6
 8006610:	080081dc 	.word	0x080081dc

08006614 <_Bfree>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006618:	4605      	mov	r5, r0
 800661a:	460c      	mov	r4, r1
 800661c:	b976      	cbnz	r6, 800663c <_Bfree+0x28>
 800661e:	2010      	movs	r0, #16
 8006620:	f7ff ff90 	bl	8006544 <malloc>
 8006624:	4602      	mov	r2, r0
 8006626:	6268      	str	r0, [r5, #36]	; 0x24
 8006628:	b920      	cbnz	r0, 8006634 <_Bfree+0x20>
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <_Bfree+0x3c>)
 800662c:	4809      	ldr	r0, [pc, #36]	; (8006654 <_Bfree+0x40>)
 800662e:	218a      	movs	r1, #138	; 0x8a
 8006630:	f000 feac 	bl	800738c <__assert_func>
 8006634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006638:	6006      	str	r6, [r0, #0]
 800663a:	60c6      	str	r6, [r0, #12]
 800663c:	b13c      	cbz	r4, 800664e <_Bfree+0x3a>
 800663e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006640:	6862      	ldr	r2, [r4, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006648:	6021      	str	r1, [r4, #0]
 800664a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800664e:	bd70      	pop	{r4, r5, r6, pc}
 8006650:	080080d6 	.word	0x080080d6
 8006654:	080081dc 	.word	0x080081dc

08006658 <__multadd>:
 8006658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665c:	690e      	ldr	r6, [r1, #16]
 800665e:	4607      	mov	r7, r0
 8006660:	4698      	mov	r8, r3
 8006662:	460c      	mov	r4, r1
 8006664:	f101 0014 	add.w	r0, r1, #20
 8006668:	2300      	movs	r3, #0
 800666a:	6805      	ldr	r5, [r0, #0]
 800666c:	b2a9      	uxth	r1, r5
 800666e:	fb02 8101 	mla	r1, r2, r1, r8
 8006672:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006676:	0c2d      	lsrs	r5, r5, #16
 8006678:	fb02 c505 	mla	r5, r2, r5, ip
 800667c:	b289      	uxth	r1, r1
 800667e:	3301      	adds	r3, #1
 8006680:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006684:	429e      	cmp	r6, r3
 8006686:	f840 1b04 	str.w	r1, [r0], #4
 800668a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800668e:	dcec      	bgt.n	800666a <__multadd+0x12>
 8006690:	f1b8 0f00 	cmp.w	r8, #0
 8006694:	d022      	beq.n	80066dc <__multadd+0x84>
 8006696:	68a3      	ldr	r3, [r4, #8]
 8006698:	42b3      	cmp	r3, r6
 800669a:	dc19      	bgt.n	80066d0 <__multadd+0x78>
 800669c:	6861      	ldr	r1, [r4, #4]
 800669e:	4638      	mov	r0, r7
 80066a0:	3101      	adds	r1, #1
 80066a2:	f7ff ff77 	bl	8006594 <_Balloc>
 80066a6:	4605      	mov	r5, r0
 80066a8:	b928      	cbnz	r0, 80066b6 <__multadd+0x5e>
 80066aa:	4602      	mov	r2, r0
 80066ac:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <__multadd+0x8c>)
 80066ae:	480e      	ldr	r0, [pc, #56]	; (80066e8 <__multadd+0x90>)
 80066b0:	21b5      	movs	r1, #181	; 0xb5
 80066b2:	f000 fe6b 	bl	800738c <__assert_func>
 80066b6:	6922      	ldr	r2, [r4, #16]
 80066b8:	3202      	adds	r2, #2
 80066ba:	f104 010c 	add.w	r1, r4, #12
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	300c      	adds	r0, #12
 80066c2:	f7ff ff59 	bl	8006578 <memcpy>
 80066c6:	4621      	mov	r1, r4
 80066c8:	4638      	mov	r0, r7
 80066ca:	f7ff ffa3 	bl	8006614 <_Bfree>
 80066ce:	462c      	mov	r4, r5
 80066d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80066d4:	3601      	adds	r6, #1
 80066d6:	f8c3 8014 	str.w	r8, [r3, #20]
 80066da:	6126      	str	r6, [r4, #16]
 80066dc:	4620      	mov	r0, r4
 80066de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e2:	bf00      	nop
 80066e4:	0800814c 	.word	0x0800814c
 80066e8:	080081dc 	.word	0x080081dc

080066ec <__s2b>:
 80066ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f0:	460c      	mov	r4, r1
 80066f2:	4615      	mov	r5, r2
 80066f4:	461f      	mov	r7, r3
 80066f6:	2209      	movs	r2, #9
 80066f8:	3308      	adds	r3, #8
 80066fa:	4606      	mov	r6, r0
 80066fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006700:	2100      	movs	r1, #0
 8006702:	2201      	movs	r2, #1
 8006704:	429a      	cmp	r2, r3
 8006706:	db09      	blt.n	800671c <__s2b+0x30>
 8006708:	4630      	mov	r0, r6
 800670a:	f7ff ff43 	bl	8006594 <_Balloc>
 800670e:	b940      	cbnz	r0, 8006722 <__s2b+0x36>
 8006710:	4602      	mov	r2, r0
 8006712:	4b19      	ldr	r3, [pc, #100]	; (8006778 <__s2b+0x8c>)
 8006714:	4819      	ldr	r0, [pc, #100]	; (800677c <__s2b+0x90>)
 8006716:	21ce      	movs	r1, #206	; 0xce
 8006718:	f000 fe38 	bl	800738c <__assert_func>
 800671c:	0052      	lsls	r2, r2, #1
 800671e:	3101      	adds	r1, #1
 8006720:	e7f0      	b.n	8006704 <__s2b+0x18>
 8006722:	9b08      	ldr	r3, [sp, #32]
 8006724:	6143      	str	r3, [r0, #20]
 8006726:	2d09      	cmp	r5, #9
 8006728:	f04f 0301 	mov.w	r3, #1
 800672c:	6103      	str	r3, [r0, #16]
 800672e:	dd16      	ble.n	800675e <__s2b+0x72>
 8006730:	f104 0909 	add.w	r9, r4, #9
 8006734:	46c8      	mov	r8, r9
 8006736:	442c      	add	r4, r5
 8006738:	f818 3b01 	ldrb.w	r3, [r8], #1
 800673c:	4601      	mov	r1, r0
 800673e:	3b30      	subs	r3, #48	; 0x30
 8006740:	220a      	movs	r2, #10
 8006742:	4630      	mov	r0, r6
 8006744:	f7ff ff88 	bl	8006658 <__multadd>
 8006748:	45a0      	cmp	r8, r4
 800674a:	d1f5      	bne.n	8006738 <__s2b+0x4c>
 800674c:	f1a5 0408 	sub.w	r4, r5, #8
 8006750:	444c      	add	r4, r9
 8006752:	1b2d      	subs	r5, r5, r4
 8006754:	1963      	adds	r3, r4, r5
 8006756:	42bb      	cmp	r3, r7
 8006758:	db04      	blt.n	8006764 <__s2b+0x78>
 800675a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800675e:	340a      	adds	r4, #10
 8006760:	2509      	movs	r5, #9
 8006762:	e7f6      	b.n	8006752 <__s2b+0x66>
 8006764:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006768:	4601      	mov	r1, r0
 800676a:	3b30      	subs	r3, #48	; 0x30
 800676c:	220a      	movs	r2, #10
 800676e:	4630      	mov	r0, r6
 8006770:	f7ff ff72 	bl	8006658 <__multadd>
 8006774:	e7ee      	b.n	8006754 <__s2b+0x68>
 8006776:	bf00      	nop
 8006778:	0800814c 	.word	0x0800814c
 800677c:	080081dc 	.word	0x080081dc

08006780 <__hi0bits>:
 8006780:	0c02      	lsrs	r2, r0, #16
 8006782:	0412      	lsls	r2, r2, #16
 8006784:	4603      	mov	r3, r0
 8006786:	b9ca      	cbnz	r2, 80067bc <__hi0bits+0x3c>
 8006788:	0403      	lsls	r3, r0, #16
 800678a:	2010      	movs	r0, #16
 800678c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006790:	bf04      	itt	eq
 8006792:	021b      	lsleq	r3, r3, #8
 8006794:	3008      	addeq	r0, #8
 8006796:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800679a:	bf04      	itt	eq
 800679c:	011b      	lsleq	r3, r3, #4
 800679e:	3004      	addeq	r0, #4
 80067a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80067a4:	bf04      	itt	eq
 80067a6:	009b      	lsleq	r3, r3, #2
 80067a8:	3002      	addeq	r0, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	db05      	blt.n	80067ba <__hi0bits+0x3a>
 80067ae:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80067b2:	f100 0001 	add.w	r0, r0, #1
 80067b6:	bf08      	it	eq
 80067b8:	2020      	moveq	r0, #32
 80067ba:	4770      	bx	lr
 80067bc:	2000      	movs	r0, #0
 80067be:	e7e5      	b.n	800678c <__hi0bits+0xc>

080067c0 <__lo0bits>:
 80067c0:	6803      	ldr	r3, [r0, #0]
 80067c2:	4602      	mov	r2, r0
 80067c4:	f013 0007 	ands.w	r0, r3, #7
 80067c8:	d00b      	beq.n	80067e2 <__lo0bits+0x22>
 80067ca:	07d9      	lsls	r1, r3, #31
 80067cc:	d422      	bmi.n	8006814 <__lo0bits+0x54>
 80067ce:	0798      	lsls	r0, r3, #30
 80067d0:	bf49      	itett	mi
 80067d2:	085b      	lsrmi	r3, r3, #1
 80067d4:	089b      	lsrpl	r3, r3, #2
 80067d6:	2001      	movmi	r0, #1
 80067d8:	6013      	strmi	r3, [r2, #0]
 80067da:	bf5c      	itt	pl
 80067dc:	6013      	strpl	r3, [r2, #0]
 80067de:	2002      	movpl	r0, #2
 80067e0:	4770      	bx	lr
 80067e2:	b299      	uxth	r1, r3
 80067e4:	b909      	cbnz	r1, 80067ea <__lo0bits+0x2a>
 80067e6:	0c1b      	lsrs	r3, r3, #16
 80067e8:	2010      	movs	r0, #16
 80067ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80067ee:	bf04      	itt	eq
 80067f0:	0a1b      	lsreq	r3, r3, #8
 80067f2:	3008      	addeq	r0, #8
 80067f4:	0719      	lsls	r1, r3, #28
 80067f6:	bf04      	itt	eq
 80067f8:	091b      	lsreq	r3, r3, #4
 80067fa:	3004      	addeq	r0, #4
 80067fc:	0799      	lsls	r1, r3, #30
 80067fe:	bf04      	itt	eq
 8006800:	089b      	lsreq	r3, r3, #2
 8006802:	3002      	addeq	r0, #2
 8006804:	07d9      	lsls	r1, r3, #31
 8006806:	d403      	bmi.n	8006810 <__lo0bits+0x50>
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	f100 0001 	add.w	r0, r0, #1
 800680e:	d003      	beq.n	8006818 <__lo0bits+0x58>
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	4770      	bx	lr
 8006814:	2000      	movs	r0, #0
 8006816:	4770      	bx	lr
 8006818:	2020      	movs	r0, #32
 800681a:	4770      	bx	lr

0800681c <__i2b>:
 800681c:	b510      	push	{r4, lr}
 800681e:	460c      	mov	r4, r1
 8006820:	2101      	movs	r1, #1
 8006822:	f7ff feb7 	bl	8006594 <_Balloc>
 8006826:	4602      	mov	r2, r0
 8006828:	b928      	cbnz	r0, 8006836 <__i2b+0x1a>
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <__i2b+0x24>)
 800682c:	4805      	ldr	r0, [pc, #20]	; (8006844 <__i2b+0x28>)
 800682e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006832:	f000 fdab 	bl	800738c <__assert_func>
 8006836:	2301      	movs	r3, #1
 8006838:	6144      	str	r4, [r0, #20]
 800683a:	6103      	str	r3, [r0, #16]
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	0800814c 	.word	0x0800814c
 8006844:	080081dc 	.word	0x080081dc

08006848 <__multiply>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	4614      	mov	r4, r2
 800684e:	690a      	ldr	r2, [r1, #16]
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	429a      	cmp	r2, r3
 8006854:	bfb8      	it	lt
 8006856:	460b      	movlt	r3, r1
 8006858:	460d      	mov	r5, r1
 800685a:	bfbc      	itt	lt
 800685c:	4625      	movlt	r5, r4
 800685e:	461c      	movlt	r4, r3
 8006860:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006864:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006868:	68ab      	ldr	r3, [r5, #8]
 800686a:	6869      	ldr	r1, [r5, #4]
 800686c:	eb0a 0709 	add.w	r7, sl, r9
 8006870:	42bb      	cmp	r3, r7
 8006872:	b085      	sub	sp, #20
 8006874:	bfb8      	it	lt
 8006876:	3101      	addlt	r1, #1
 8006878:	f7ff fe8c 	bl	8006594 <_Balloc>
 800687c:	b930      	cbnz	r0, 800688c <__multiply+0x44>
 800687e:	4602      	mov	r2, r0
 8006880:	4b42      	ldr	r3, [pc, #264]	; (800698c <__multiply+0x144>)
 8006882:	4843      	ldr	r0, [pc, #268]	; (8006990 <__multiply+0x148>)
 8006884:	f240 115d 	movw	r1, #349	; 0x15d
 8006888:	f000 fd80 	bl	800738c <__assert_func>
 800688c:	f100 0614 	add.w	r6, r0, #20
 8006890:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006894:	4633      	mov	r3, r6
 8006896:	2200      	movs	r2, #0
 8006898:	4543      	cmp	r3, r8
 800689a:	d31e      	bcc.n	80068da <__multiply+0x92>
 800689c:	f105 0c14 	add.w	ip, r5, #20
 80068a0:	f104 0314 	add.w	r3, r4, #20
 80068a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80068a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80068ac:	9202      	str	r2, [sp, #8]
 80068ae:	ebac 0205 	sub.w	r2, ip, r5
 80068b2:	3a15      	subs	r2, #21
 80068b4:	f022 0203 	bic.w	r2, r2, #3
 80068b8:	3204      	adds	r2, #4
 80068ba:	f105 0115 	add.w	r1, r5, #21
 80068be:	458c      	cmp	ip, r1
 80068c0:	bf38      	it	cc
 80068c2:	2204      	movcc	r2, #4
 80068c4:	9201      	str	r2, [sp, #4]
 80068c6:	9a02      	ldr	r2, [sp, #8]
 80068c8:	9303      	str	r3, [sp, #12]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d808      	bhi.n	80068e0 <__multiply+0x98>
 80068ce:	2f00      	cmp	r7, #0
 80068d0:	dc55      	bgt.n	800697e <__multiply+0x136>
 80068d2:	6107      	str	r7, [r0, #16]
 80068d4:	b005      	add	sp, #20
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	f843 2b04 	str.w	r2, [r3], #4
 80068de:	e7db      	b.n	8006898 <__multiply+0x50>
 80068e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80068e4:	f1ba 0f00 	cmp.w	sl, #0
 80068e8:	d020      	beq.n	800692c <__multiply+0xe4>
 80068ea:	f105 0e14 	add.w	lr, r5, #20
 80068ee:	46b1      	mov	r9, r6
 80068f0:	2200      	movs	r2, #0
 80068f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80068f6:	f8d9 b000 	ldr.w	fp, [r9]
 80068fa:	b2a1      	uxth	r1, r4
 80068fc:	fa1f fb8b 	uxth.w	fp, fp
 8006900:	fb0a b101 	mla	r1, sl, r1, fp
 8006904:	4411      	add	r1, r2
 8006906:	f8d9 2000 	ldr.w	r2, [r9]
 800690a:	0c24      	lsrs	r4, r4, #16
 800690c:	0c12      	lsrs	r2, r2, #16
 800690e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006912:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006916:	b289      	uxth	r1, r1
 8006918:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800691c:	45f4      	cmp	ip, lr
 800691e:	f849 1b04 	str.w	r1, [r9], #4
 8006922:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006926:	d8e4      	bhi.n	80068f2 <__multiply+0xaa>
 8006928:	9901      	ldr	r1, [sp, #4]
 800692a:	5072      	str	r2, [r6, r1]
 800692c:	9a03      	ldr	r2, [sp, #12]
 800692e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006932:	3304      	adds	r3, #4
 8006934:	f1b9 0f00 	cmp.w	r9, #0
 8006938:	d01f      	beq.n	800697a <__multiply+0x132>
 800693a:	6834      	ldr	r4, [r6, #0]
 800693c:	f105 0114 	add.w	r1, r5, #20
 8006940:	46b6      	mov	lr, r6
 8006942:	f04f 0a00 	mov.w	sl, #0
 8006946:	880a      	ldrh	r2, [r1, #0]
 8006948:	f8be b002 	ldrh.w	fp, [lr, #2]
 800694c:	fb09 b202 	mla	r2, r9, r2, fp
 8006950:	4492      	add	sl, r2
 8006952:	b2a4      	uxth	r4, r4
 8006954:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006958:	f84e 4b04 	str.w	r4, [lr], #4
 800695c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006960:	f8be 2000 	ldrh.w	r2, [lr]
 8006964:	0c24      	lsrs	r4, r4, #16
 8006966:	fb09 2404 	mla	r4, r9, r4, r2
 800696a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800696e:	458c      	cmp	ip, r1
 8006970:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006974:	d8e7      	bhi.n	8006946 <__multiply+0xfe>
 8006976:	9a01      	ldr	r2, [sp, #4]
 8006978:	50b4      	str	r4, [r6, r2]
 800697a:	3604      	adds	r6, #4
 800697c:	e7a3      	b.n	80068c6 <__multiply+0x7e>
 800697e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1a5      	bne.n	80068d2 <__multiply+0x8a>
 8006986:	3f01      	subs	r7, #1
 8006988:	e7a1      	b.n	80068ce <__multiply+0x86>
 800698a:	bf00      	nop
 800698c:	0800814c 	.word	0x0800814c
 8006990:	080081dc 	.word	0x080081dc

08006994 <__pow5mult>:
 8006994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006998:	4615      	mov	r5, r2
 800699a:	f012 0203 	ands.w	r2, r2, #3
 800699e:	4606      	mov	r6, r0
 80069a0:	460f      	mov	r7, r1
 80069a2:	d007      	beq.n	80069b4 <__pow5mult+0x20>
 80069a4:	4c25      	ldr	r4, [pc, #148]	; (8006a3c <__pow5mult+0xa8>)
 80069a6:	3a01      	subs	r2, #1
 80069a8:	2300      	movs	r3, #0
 80069aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069ae:	f7ff fe53 	bl	8006658 <__multadd>
 80069b2:	4607      	mov	r7, r0
 80069b4:	10ad      	asrs	r5, r5, #2
 80069b6:	d03d      	beq.n	8006a34 <__pow5mult+0xa0>
 80069b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069ba:	b97c      	cbnz	r4, 80069dc <__pow5mult+0x48>
 80069bc:	2010      	movs	r0, #16
 80069be:	f7ff fdc1 	bl	8006544 <malloc>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6270      	str	r0, [r6, #36]	; 0x24
 80069c6:	b928      	cbnz	r0, 80069d4 <__pow5mult+0x40>
 80069c8:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <__pow5mult+0xac>)
 80069ca:	481e      	ldr	r0, [pc, #120]	; (8006a44 <__pow5mult+0xb0>)
 80069cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069d0:	f000 fcdc 	bl	800738c <__assert_func>
 80069d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069d8:	6004      	str	r4, [r0, #0]
 80069da:	60c4      	str	r4, [r0, #12]
 80069dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069e4:	b94c      	cbnz	r4, 80069fa <__pow5mult+0x66>
 80069e6:	f240 2171 	movw	r1, #625	; 0x271
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7ff ff16 	bl	800681c <__i2b>
 80069f0:	2300      	movs	r3, #0
 80069f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80069f6:	4604      	mov	r4, r0
 80069f8:	6003      	str	r3, [r0, #0]
 80069fa:	f04f 0900 	mov.w	r9, #0
 80069fe:	07eb      	lsls	r3, r5, #31
 8006a00:	d50a      	bpl.n	8006a18 <__pow5mult+0x84>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4622      	mov	r2, r4
 8006a06:	4630      	mov	r0, r6
 8006a08:	f7ff ff1e 	bl	8006848 <__multiply>
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	4680      	mov	r8, r0
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7ff fdff 	bl	8006614 <_Bfree>
 8006a16:	4647      	mov	r7, r8
 8006a18:	106d      	asrs	r5, r5, #1
 8006a1a:	d00b      	beq.n	8006a34 <__pow5mult+0xa0>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	b938      	cbnz	r0, 8006a30 <__pow5mult+0x9c>
 8006a20:	4622      	mov	r2, r4
 8006a22:	4621      	mov	r1, r4
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7ff ff0f 	bl	8006848 <__multiply>
 8006a2a:	6020      	str	r0, [r4, #0]
 8006a2c:	f8c0 9000 	str.w	r9, [r0]
 8006a30:	4604      	mov	r4, r0
 8006a32:	e7e4      	b.n	80069fe <__pow5mult+0x6a>
 8006a34:	4638      	mov	r0, r7
 8006a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08008330 	.word	0x08008330
 8006a40:	080080d6 	.word	0x080080d6
 8006a44:	080081dc 	.word	0x080081dc

08006a48 <__lshift>:
 8006a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	6849      	ldr	r1, [r1, #4]
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a56:	68a3      	ldr	r3, [r4, #8]
 8006a58:	4607      	mov	r7, r0
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a60:	f108 0601 	add.w	r6, r8, #1
 8006a64:	42b3      	cmp	r3, r6
 8006a66:	db0b      	blt.n	8006a80 <__lshift+0x38>
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7ff fd93 	bl	8006594 <_Balloc>
 8006a6e:	4605      	mov	r5, r0
 8006a70:	b948      	cbnz	r0, 8006a86 <__lshift+0x3e>
 8006a72:	4602      	mov	r2, r0
 8006a74:	4b28      	ldr	r3, [pc, #160]	; (8006b18 <__lshift+0xd0>)
 8006a76:	4829      	ldr	r0, [pc, #164]	; (8006b1c <__lshift+0xd4>)
 8006a78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a7c:	f000 fc86 	bl	800738c <__assert_func>
 8006a80:	3101      	adds	r1, #1
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	e7ee      	b.n	8006a64 <__lshift+0x1c>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f100 0114 	add.w	r1, r0, #20
 8006a8c:	f100 0210 	add.w	r2, r0, #16
 8006a90:	4618      	mov	r0, r3
 8006a92:	4553      	cmp	r3, sl
 8006a94:	db33      	blt.n	8006afe <__lshift+0xb6>
 8006a96:	6920      	ldr	r0, [r4, #16]
 8006a98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a9c:	f104 0314 	add.w	r3, r4, #20
 8006aa0:	f019 091f 	ands.w	r9, r9, #31
 8006aa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006aac:	d02b      	beq.n	8006b06 <__lshift+0xbe>
 8006aae:	f1c9 0e20 	rsb	lr, r9, #32
 8006ab2:	468a      	mov	sl, r1
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	fa00 f009 	lsl.w	r0, r0, r9
 8006abc:	4302      	orrs	r2, r0
 8006abe:	f84a 2b04 	str.w	r2, [sl], #4
 8006ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac6:	459c      	cmp	ip, r3
 8006ac8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006acc:	d8f3      	bhi.n	8006ab6 <__lshift+0x6e>
 8006ace:	ebac 0304 	sub.w	r3, ip, r4
 8006ad2:	3b15      	subs	r3, #21
 8006ad4:	f023 0303 	bic.w	r3, r3, #3
 8006ad8:	3304      	adds	r3, #4
 8006ada:	f104 0015 	add.w	r0, r4, #21
 8006ade:	4584      	cmp	ip, r0
 8006ae0:	bf38      	it	cc
 8006ae2:	2304      	movcc	r3, #4
 8006ae4:	50ca      	str	r2, [r1, r3]
 8006ae6:	b10a      	cbz	r2, 8006aec <__lshift+0xa4>
 8006ae8:	f108 0602 	add.w	r6, r8, #2
 8006aec:	3e01      	subs	r6, #1
 8006aee:	4638      	mov	r0, r7
 8006af0:	612e      	str	r6, [r5, #16]
 8006af2:	4621      	mov	r1, r4
 8006af4:	f7ff fd8e 	bl	8006614 <_Bfree>
 8006af8:	4628      	mov	r0, r5
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b02:	3301      	adds	r3, #1
 8006b04:	e7c5      	b.n	8006a92 <__lshift+0x4a>
 8006b06:	3904      	subs	r1, #4
 8006b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b10:	459c      	cmp	ip, r3
 8006b12:	d8f9      	bhi.n	8006b08 <__lshift+0xc0>
 8006b14:	e7ea      	b.n	8006aec <__lshift+0xa4>
 8006b16:	bf00      	nop
 8006b18:	0800814c 	.word	0x0800814c
 8006b1c:	080081dc 	.word	0x080081dc

08006b20 <__mcmp>:
 8006b20:	690a      	ldr	r2, [r1, #16]
 8006b22:	4603      	mov	r3, r0
 8006b24:	6900      	ldr	r0, [r0, #16]
 8006b26:	1a80      	subs	r0, r0, r2
 8006b28:	b530      	push	{r4, r5, lr}
 8006b2a:	d10d      	bne.n	8006b48 <__mcmp+0x28>
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	3114      	adds	r1, #20
 8006b30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b40:	4295      	cmp	r5, r2
 8006b42:	d002      	beq.n	8006b4a <__mcmp+0x2a>
 8006b44:	d304      	bcc.n	8006b50 <__mcmp+0x30>
 8006b46:	2001      	movs	r0, #1
 8006b48:	bd30      	pop	{r4, r5, pc}
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	d3f4      	bcc.n	8006b38 <__mcmp+0x18>
 8006b4e:	e7fb      	b.n	8006b48 <__mcmp+0x28>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b54:	e7f8      	b.n	8006b48 <__mcmp+0x28>
	...

08006b58 <__mdiff>:
 8006b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	4606      	mov	r6, r0
 8006b60:	4611      	mov	r1, r2
 8006b62:	4620      	mov	r0, r4
 8006b64:	4617      	mov	r7, r2
 8006b66:	f7ff ffdb 	bl	8006b20 <__mcmp>
 8006b6a:	1e05      	subs	r5, r0, #0
 8006b6c:	d111      	bne.n	8006b92 <__mdiff+0x3a>
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4630      	mov	r0, r6
 8006b72:	f7ff fd0f 	bl	8006594 <_Balloc>
 8006b76:	4602      	mov	r2, r0
 8006b78:	b928      	cbnz	r0, 8006b86 <__mdiff+0x2e>
 8006b7a:	4b3a      	ldr	r3, [pc, #232]	; (8006c64 <__mdiff+0x10c>)
 8006b7c:	f240 2132 	movw	r1, #562	; 0x232
 8006b80:	4839      	ldr	r0, [pc, #228]	; (8006c68 <__mdiff+0x110>)
 8006b82:	f000 fc03 	bl	800738c <__assert_func>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b92:	bfa4      	itt	ge
 8006b94:	463b      	movge	r3, r7
 8006b96:	4627      	movge	r7, r4
 8006b98:	4630      	mov	r0, r6
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	bfa6      	itte	ge
 8006b9e:	461c      	movge	r4, r3
 8006ba0:	2500      	movge	r5, #0
 8006ba2:	2501      	movlt	r5, #1
 8006ba4:	f7ff fcf6 	bl	8006594 <_Balloc>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	b918      	cbnz	r0, 8006bb4 <__mdiff+0x5c>
 8006bac:	4b2d      	ldr	r3, [pc, #180]	; (8006c64 <__mdiff+0x10c>)
 8006bae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006bb2:	e7e5      	b.n	8006b80 <__mdiff+0x28>
 8006bb4:	693e      	ldr	r6, [r7, #16]
 8006bb6:	60c5      	str	r5, [r0, #12]
 8006bb8:	6925      	ldr	r5, [r4, #16]
 8006bba:	f107 0114 	add.w	r1, r7, #20
 8006bbe:	f100 0e14 	add.w	lr, r0, #20
 8006bc2:	f104 0914 	add.w	r9, r4, #20
 8006bc6:	f107 0010 	add.w	r0, r7, #16
 8006bca:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006bce:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006bd2:	46f2      	mov	sl, lr
 8006bd4:	2700      	movs	r7, #0
 8006bd6:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bda:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006bde:	fa1f f883 	uxth.w	r8, r3
 8006be2:	fa17 f78b 	uxtah	r7, r7, fp
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	eba7 0808 	sub.w	r8, r7, r8
 8006bec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bf0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006bf4:	fa1f f888 	uxth.w	r8, r8
 8006bf8:	141f      	asrs	r7, r3, #16
 8006bfa:	454d      	cmp	r5, r9
 8006bfc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c00:	f84a 3b04 	str.w	r3, [sl], #4
 8006c04:	d8e7      	bhi.n	8006bd6 <__mdiff+0x7e>
 8006c06:	1b2b      	subs	r3, r5, r4
 8006c08:	3b15      	subs	r3, #21
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	3304      	adds	r3, #4
 8006c10:	3415      	adds	r4, #21
 8006c12:	42a5      	cmp	r5, r4
 8006c14:	bf38      	it	cc
 8006c16:	2304      	movcc	r3, #4
 8006c18:	4419      	add	r1, r3
 8006c1a:	4473      	add	r3, lr
 8006c1c:	469e      	mov	lr, r3
 8006c1e:	460d      	mov	r5, r1
 8006c20:	4565      	cmp	r5, ip
 8006c22:	d30e      	bcc.n	8006c42 <__mdiff+0xea>
 8006c24:	f10c 0003 	add.w	r0, ip, #3
 8006c28:	1a40      	subs	r0, r0, r1
 8006c2a:	f020 0003 	bic.w	r0, r0, #3
 8006c2e:	3903      	subs	r1, #3
 8006c30:	458c      	cmp	ip, r1
 8006c32:	bf38      	it	cc
 8006c34:	2000      	movcc	r0, #0
 8006c36:	4418      	add	r0, r3
 8006c38:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8006c3c:	b17b      	cbz	r3, 8006c5e <__mdiff+0x106>
 8006c3e:	6116      	str	r6, [r2, #16]
 8006c40:	e7a4      	b.n	8006b8c <__mdiff+0x34>
 8006c42:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c46:	fa17 f488 	uxtah	r4, r7, r8
 8006c4a:	1420      	asrs	r0, r4, #16
 8006c4c:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006c50:	b2a4      	uxth	r4, r4
 8006c52:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8006c56:	f84e 4b04 	str.w	r4, [lr], #4
 8006c5a:	1407      	asrs	r7, r0, #16
 8006c5c:	e7e0      	b.n	8006c20 <__mdiff+0xc8>
 8006c5e:	3e01      	subs	r6, #1
 8006c60:	e7ea      	b.n	8006c38 <__mdiff+0xe0>
 8006c62:	bf00      	nop
 8006c64:	0800814c 	.word	0x0800814c
 8006c68:	080081dc 	.word	0x080081dc

08006c6c <__ulp>:
 8006c6c:	4b11      	ldr	r3, [pc, #68]	; (8006cb4 <__ulp+0x48>)
 8006c6e:	400b      	ands	r3, r1
 8006c70:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	dd02      	ble.n	8006c7e <__ulp+0x12>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4770      	bx	lr
 8006c7e:	425b      	negs	r3, r3
 8006c80:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006c84:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c88:	f04f 0000 	mov.w	r0, #0
 8006c8c:	f04f 0100 	mov.w	r1, #0
 8006c90:	da04      	bge.n	8006c9c <__ulp+0x30>
 8006c92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c96:	fa43 f102 	asr.w	r1, r3, r2
 8006c9a:	4770      	bx	lr
 8006c9c:	f1a2 0314 	sub.w	r3, r2, #20
 8006ca0:	2b1e      	cmp	r3, #30
 8006ca2:	bfda      	itte	le
 8006ca4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006ca8:	fa22 f303 	lsrle.w	r3, r2, r3
 8006cac:	2301      	movgt	r3, #1
 8006cae:	4618      	mov	r0, r3
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	7ff00000 	.word	0x7ff00000

08006cb8 <__b2d>:
 8006cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cbc:	6907      	ldr	r7, [r0, #16]
 8006cbe:	f100 0914 	add.w	r9, r0, #20
 8006cc2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006cc6:	f1a7 0804 	sub.w	r8, r7, #4
 8006cca:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff fd56 	bl	8006780 <__hi0bits>
 8006cd4:	f1c0 0320 	rsb	r3, r0, #32
 8006cd8:	280a      	cmp	r0, #10
 8006cda:	600b      	str	r3, [r1, #0]
 8006cdc:	491f      	ldr	r1, [pc, #124]	; (8006d5c <__b2d+0xa4>)
 8006cde:	dc17      	bgt.n	8006d10 <__b2d+0x58>
 8006ce0:	f1c0 0c0b 	rsb	ip, r0, #11
 8006ce4:	45c1      	cmp	r9, r8
 8006ce6:	fa26 f30c 	lsr.w	r3, r6, ip
 8006cea:	bf38      	it	cc
 8006cec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006cf0:	ea43 0501 	orr.w	r5, r3, r1
 8006cf4:	bf28      	it	cs
 8006cf6:	2200      	movcs	r2, #0
 8006cf8:	f100 0315 	add.w	r3, r0, #21
 8006cfc:	fa06 f303 	lsl.w	r3, r6, r3
 8006d00:	fa22 f20c 	lsr.w	r2, r2, ip
 8006d04:	ea43 0402 	orr.w	r4, r3, r2
 8006d08:	4620      	mov	r0, r4
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d10:	45c1      	cmp	r9, r8
 8006d12:	bf3a      	itte	cc
 8006d14:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006d18:	f1a7 0808 	subcc.w	r8, r7, #8
 8006d1c:	2200      	movcs	r2, #0
 8006d1e:	f1b0 030b 	subs.w	r3, r0, #11
 8006d22:	d016      	beq.n	8006d52 <__b2d+0x9a>
 8006d24:	f1c3 0720 	rsb	r7, r3, #32
 8006d28:	fa22 f107 	lsr.w	r1, r2, r7
 8006d2c:	45c8      	cmp	r8, r9
 8006d2e:	fa06 f603 	lsl.w	r6, r6, r3
 8006d32:	ea46 0601 	orr.w	r6, r6, r1
 8006d36:	bf8c      	ite	hi
 8006d38:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006d3c:	2100      	movls	r1, #0
 8006d3e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006d42:	fa02 f003 	lsl.w	r0, r2, r3
 8006d46:	40f9      	lsrs	r1, r7
 8006d48:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006d4c:	ea40 0401 	orr.w	r4, r0, r1
 8006d50:	e7da      	b.n	8006d08 <__b2d+0x50>
 8006d52:	ea46 0501 	orr.w	r5, r6, r1
 8006d56:	4614      	mov	r4, r2
 8006d58:	e7d6      	b.n	8006d08 <__b2d+0x50>
 8006d5a:	bf00      	nop
 8006d5c:	3ff00000 	.word	0x3ff00000

08006d60 <__d2b>:
 8006d60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d64:	2101      	movs	r1, #1
 8006d66:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006d6a:	4690      	mov	r8, r2
 8006d6c:	461d      	mov	r5, r3
 8006d6e:	f7ff fc11 	bl	8006594 <_Balloc>
 8006d72:	4604      	mov	r4, r0
 8006d74:	b930      	cbnz	r0, 8006d84 <__d2b+0x24>
 8006d76:	4602      	mov	r2, r0
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <__d2b+0xb0>)
 8006d7a:	4826      	ldr	r0, [pc, #152]	; (8006e14 <__d2b+0xb4>)
 8006d7c:	f240 310a 	movw	r1, #778	; 0x30a
 8006d80:	f000 fb04 	bl	800738c <__assert_func>
 8006d84:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006d88:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006d8c:	bb2d      	cbnz	r5, 8006dda <__d2b+0x7a>
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	f1b8 0300 	subs.w	r3, r8, #0
 8006d94:	d026      	beq.n	8006de4 <__d2b+0x84>
 8006d96:	4668      	mov	r0, sp
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	f7ff fd11 	bl	80067c0 <__lo0bits>
 8006d9e:	9900      	ldr	r1, [sp, #0]
 8006da0:	b1f0      	cbz	r0, 8006de0 <__d2b+0x80>
 8006da2:	9a01      	ldr	r2, [sp, #4]
 8006da4:	f1c0 0320 	rsb	r3, r0, #32
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	430b      	orrs	r3, r1
 8006dae:	40c2      	lsrs	r2, r0
 8006db0:	6163      	str	r3, [r4, #20]
 8006db2:	9201      	str	r2, [sp, #4]
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	61a3      	str	r3, [r4, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bf14      	ite	ne
 8006dbc:	2102      	movne	r1, #2
 8006dbe:	2101      	moveq	r1, #1
 8006dc0:	6121      	str	r1, [r4, #16]
 8006dc2:	b1c5      	cbz	r5, 8006df6 <__d2b+0x96>
 8006dc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dc8:	4405      	add	r5, r0
 8006dca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006dce:	603d      	str	r5, [r7, #0]
 8006dd0:	6030      	str	r0, [r6, #0]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	b002      	add	sp, #8
 8006dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dde:	e7d6      	b.n	8006d8e <__d2b+0x2e>
 8006de0:	6161      	str	r1, [r4, #20]
 8006de2:	e7e7      	b.n	8006db4 <__d2b+0x54>
 8006de4:	a801      	add	r0, sp, #4
 8006de6:	f7ff fceb 	bl	80067c0 <__lo0bits>
 8006dea:	9b01      	ldr	r3, [sp, #4]
 8006dec:	6163      	str	r3, [r4, #20]
 8006dee:	2101      	movs	r1, #1
 8006df0:	6121      	str	r1, [r4, #16]
 8006df2:	3020      	adds	r0, #32
 8006df4:	e7e5      	b.n	8006dc2 <__d2b+0x62>
 8006df6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006dfa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006dfe:	6038      	str	r0, [r7, #0]
 8006e00:	6918      	ldr	r0, [r3, #16]
 8006e02:	f7ff fcbd 	bl	8006780 <__hi0bits>
 8006e06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006e0a:	6031      	str	r1, [r6, #0]
 8006e0c:	e7e1      	b.n	8006dd2 <__d2b+0x72>
 8006e0e:	bf00      	nop
 8006e10:	0800814c 	.word	0x0800814c
 8006e14:	080081dc 	.word	0x080081dc

08006e18 <__ratio>:
 8006e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	4688      	mov	r8, r1
 8006e1e:	4669      	mov	r1, sp
 8006e20:	4681      	mov	r9, r0
 8006e22:	f7ff ff49 	bl	8006cb8 <__b2d>
 8006e26:	460f      	mov	r7, r1
 8006e28:	4604      	mov	r4, r0
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	a901      	add	r1, sp, #4
 8006e30:	f7ff ff42 	bl	8006cb8 <__b2d>
 8006e34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e38:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006e3c:	eba3 0c02 	sub.w	ip, r3, r2
 8006e40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bfd5      	itete	le
 8006e4e:	460a      	movle	r2, r1
 8006e50:	462a      	movgt	r2, r5
 8006e52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e5a:	468b      	mov	fp, r1
 8006e5c:	bfd8      	it	le
 8006e5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006e62:	465b      	mov	r3, fp
 8006e64:	4602      	mov	r2, r0
 8006e66:	4639      	mov	r1, r7
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f7f9 fcf7 	bl	800085c <__aeabi_ddiv>
 8006e6e:	b003      	add	sp, #12
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e74 <__copybits>:
 8006e74:	3901      	subs	r1, #1
 8006e76:	b570      	push	{r4, r5, r6, lr}
 8006e78:	1149      	asrs	r1, r1, #5
 8006e7a:	6914      	ldr	r4, [r2, #16]
 8006e7c:	3101      	adds	r1, #1
 8006e7e:	f102 0314 	add.w	r3, r2, #20
 8006e82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e8a:	1f05      	subs	r5, r0, #4
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	d30c      	bcc.n	8006eaa <__copybits+0x36>
 8006e90:	1aa3      	subs	r3, r4, r2
 8006e92:	3b11      	subs	r3, #17
 8006e94:	f023 0303 	bic.w	r3, r3, #3
 8006e98:	3211      	adds	r2, #17
 8006e9a:	42a2      	cmp	r2, r4
 8006e9c:	bf88      	it	hi
 8006e9e:	2300      	movhi	r3, #0
 8006ea0:	4418      	add	r0, r3
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	4288      	cmp	r0, r1
 8006ea6:	d305      	bcc.n	8006eb4 <__copybits+0x40>
 8006ea8:	bd70      	pop	{r4, r5, r6, pc}
 8006eaa:	f853 6b04 	ldr.w	r6, [r3], #4
 8006eae:	f845 6f04 	str.w	r6, [r5, #4]!
 8006eb2:	e7eb      	b.n	8006e8c <__copybits+0x18>
 8006eb4:	f840 3b04 	str.w	r3, [r0], #4
 8006eb8:	e7f4      	b.n	8006ea4 <__copybits+0x30>

08006eba <__any_on>:
 8006eba:	f100 0214 	add.w	r2, r0, #20
 8006ebe:	6900      	ldr	r0, [r0, #16]
 8006ec0:	114b      	asrs	r3, r1, #5
 8006ec2:	4298      	cmp	r0, r3
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	db11      	blt.n	8006eec <__any_on+0x32>
 8006ec8:	dd0a      	ble.n	8006ee0 <__any_on+0x26>
 8006eca:	f011 011f 	ands.w	r1, r1, #31
 8006ece:	d007      	beq.n	8006ee0 <__any_on+0x26>
 8006ed0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ed4:	fa24 f001 	lsr.w	r0, r4, r1
 8006ed8:	fa00 f101 	lsl.w	r1, r0, r1
 8006edc:	428c      	cmp	r4, r1
 8006ede:	d10b      	bne.n	8006ef8 <__any_on+0x3e>
 8006ee0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d803      	bhi.n	8006ef0 <__any_on+0x36>
 8006ee8:	2000      	movs	r0, #0
 8006eea:	bd10      	pop	{r4, pc}
 8006eec:	4603      	mov	r3, r0
 8006eee:	e7f7      	b.n	8006ee0 <__any_on+0x26>
 8006ef0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	d0f5      	beq.n	8006ee4 <__any_on+0x2a>
 8006ef8:	2001      	movs	r0, #1
 8006efa:	e7f6      	b.n	8006eea <__any_on+0x30>

08006efc <_calloc_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	fb02 f501 	mul.w	r5, r2, r1
 8006f02:	4629      	mov	r1, r5
 8006f04:	f000 f856 	bl	8006fb4 <_malloc_r>
 8006f08:	4604      	mov	r4, r0
 8006f0a:	b118      	cbz	r0, 8006f14 <_calloc_r+0x18>
 8006f0c:	462a      	mov	r2, r5
 8006f0e:	2100      	movs	r1, #0
 8006f10:	f7fc fbf6 	bl	8003700 <memset>
 8006f14:	4620      	mov	r0, r4
 8006f16:	bd38      	pop	{r3, r4, r5, pc}

08006f18 <_free_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	2900      	cmp	r1, #0
 8006f1e:	d045      	beq.n	8006fac <_free_r+0x94>
 8006f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f24:	1f0c      	subs	r4, r1, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	bfb8      	it	lt
 8006f2a:	18e4      	addlt	r4, r4, r3
 8006f2c:	f000 fa78 	bl	8007420 <__malloc_lock>
 8006f30:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <_free_r+0x98>)
 8006f32:	6813      	ldr	r3, [r2, #0]
 8006f34:	4610      	mov	r0, r2
 8006f36:	b933      	cbnz	r3, 8006f46 <_free_r+0x2e>
 8006f38:	6063      	str	r3, [r4, #4]
 8006f3a:	6014      	str	r4, [r2, #0]
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f42:	f000 ba73 	b.w	800742c <__malloc_unlock>
 8006f46:	42a3      	cmp	r3, r4
 8006f48:	d90b      	bls.n	8006f62 <_free_r+0x4a>
 8006f4a:	6821      	ldr	r1, [r4, #0]
 8006f4c:	1862      	adds	r2, r4, r1
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	bf04      	itt	eq
 8006f52:	681a      	ldreq	r2, [r3, #0]
 8006f54:	685b      	ldreq	r3, [r3, #4]
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	bf04      	itt	eq
 8006f5a:	1852      	addeq	r2, r2, r1
 8006f5c:	6022      	streq	r2, [r4, #0]
 8006f5e:	6004      	str	r4, [r0, #0]
 8006f60:	e7ec      	b.n	8006f3c <_free_r+0x24>
 8006f62:	461a      	mov	r2, r3
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	b10b      	cbz	r3, 8006f6c <_free_r+0x54>
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d9fa      	bls.n	8006f62 <_free_r+0x4a>
 8006f6c:	6811      	ldr	r1, [r2, #0]
 8006f6e:	1850      	adds	r0, r2, r1
 8006f70:	42a0      	cmp	r0, r4
 8006f72:	d10b      	bne.n	8006f8c <_free_r+0x74>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	4401      	add	r1, r0
 8006f78:	1850      	adds	r0, r2, r1
 8006f7a:	4283      	cmp	r3, r0
 8006f7c:	6011      	str	r1, [r2, #0]
 8006f7e:	d1dd      	bne.n	8006f3c <_free_r+0x24>
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	6053      	str	r3, [r2, #4]
 8006f86:	4401      	add	r1, r0
 8006f88:	6011      	str	r1, [r2, #0]
 8006f8a:	e7d7      	b.n	8006f3c <_free_r+0x24>
 8006f8c:	d902      	bls.n	8006f94 <_free_r+0x7c>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	602b      	str	r3, [r5, #0]
 8006f92:	e7d3      	b.n	8006f3c <_free_r+0x24>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	1821      	adds	r1, r4, r0
 8006f98:	428b      	cmp	r3, r1
 8006f9a:	bf04      	itt	eq
 8006f9c:	6819      	ldreq	r1, [r3, #0]
 8006f9e:	685b      	ldreq	r3, [r3, #4]
 8006fa0:	6063      	str	r3, [r4, #4]
 8006fa2:	bf04      	itt	eq
 8006fa4:	1809      	addeq	r1, r1, r0
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	6054      	str	r4, [r2, #4]
 8006faa:	e7c7      	b.n	8006f3c <_free_r+0x24>
 8006fac:	bd38      	pop	{r3, r4, r5, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000404 	.word	0x20000404

08006fb4 <_malloc_r>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	1ccd      	adds	r5, r1, #3
 8006fb8:	f025 0503 	bic.w	r5, r5, #3
 8006fbc:	3508      	adds	r5, #8
 8006fbe:	2d0c      	cmp	r5, #12
 8006fc0:	bf38      	it	cc
 8006fc2:	250c      	movcc	r5, #12
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	db01      	blt.n	8006fce <_malloc_r+0x1a>
 8006fca:	42a9      	cmp	r1, r5
 8006fcc:	d903      	bls.n	8006fd6 <_malloc_r+0x22>
 8006fce:	230c      	movs	r3, #12
 8006fd0:	6033      	str	r3, [r6, #0]
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd6:	f000 fa23 	bl	8007420 <__malloc_lock>
 8006fda:	4921      	ldr	r1, [pc, #132]	; (8007060 <_malloc_r+0xac>)
 8006fdc:	680a      	ldr	r2, [r1, #0]
 8006fde:	4614      	mov	r4, r2
 8006fe0:	b99c      	cbnz	r4, 800700a <_malloc_r+0x56>
 8006fe2:	4f20      	ldr	r7, [pc, #128]	; (8007064 <_malloc_r+0xb0>)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	b923      	cbnz	r3, 8006ff2 <_malloc_r+0x3e>
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4630      	mov	r0, r6
 8006fec:	f000 f99e 	bl	800732c <_sbrk_r>
 8006ff0:	6038      	str	r0, [r7, #0]
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f000 f999 	bl	800732c <_sbrk_r>
 8006ffa:	1c43      	adds	r3, r0, #1
 8006ffc:	d123      	bne.n	8007046 <_malloc_r+0x92>
 8006ffe:	230c      	movs	r3, #12
 8007000:	6033      	str	r3, [r6, #0]
 8007002:	4630      	mov	r0, r6
 8007004:	f000 fa12 	bl	800742c <__malloc_unlock>
 8007008:	e7e3      	b.n	8006fd2 <_malloc_r+0x1e>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	1b5b      	subs	r3, r3, r5
 800700e:	d417      	bmi.n	8007040 <_malloc_r+0x8c>
 8007010:	2b0b      	cmp	r3, #11
 8007012:	d903      	bls.n	800701c <_malloc_r+0x68>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	441c      	add	r4, r3
 8007018:	6025      	str	r5, [r4, #0]
 800701a:	e004      	b.n	8007026 <_malloc_r+0x72>
 800701c:	6863      	ldr	r3, [r4, #4]
 800701e:	42a2      	cmp	r2, r4
 8007020:	bf0c      	ite	eq
 8007022:	600b      	streq	r3, [r1, #0]
 8007024:	6053      	strne	r3, [r2, #4]
 8007026:	4630      	mov	r0, r6
 8007028:	f000 fa00 	bl	800742c <__malloc_unlock>
 800702c:	f104 000b 	add.w	r0, r4, #11
 8007030:	1d23      	adds	r3, r4, #4
 8007032:	f020 0007 	bic.w	r0, r0, #7
 8007036:	1ac2      	subs	r2, r0, r3
 8007038:	d0cc      	beq.n	8006fd4 <_malloc_r+0x20>
 800703a:	1a1b      	subs	r3, r3, r0
 800703c:	50a3      	str	r3, [r4, r2]
 800703e:	e7c9      	b.n	8006fd4 <_malloc_r+0x20>
 8007040:	4622      	mov	r2, r4
 8007042:	6864      	ldr	r4, [r4, #4]
 8007044:	e7cc      	b.n	8006fe0 <_malloc_r+0x2c>
 8007046:	1cc4      	adds	r4, r0, #3
 8007048:	f024 0403 	bic.w	r4, r4, #3
 800704c:	42a0      	cmp	r0, r4
 800704e:	d0e3      	beq.n	8007018 <_malloc_r+0x64>
 8007050:	1a21      	subs	r1, r4, r0
 8007052:	4630      	mov	r0, r6
 8007054:	f000 f96a 	bl	800732c <_sbrk_r>
 8007058:	3001      	adds	r0, #1
 800705a:	d1dd      	bne.n	8007018 <_malloc_r+0x64>
 800705c:	e7cf      	b.n	8006ffe <_malloc_r+0x4a>
 800705e:	bf00      	nop
 8007060:	20000404 	.word	0x20000404
 8007064:	20000408 	.word	0x20000408

08007068 <__ssputs_r>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	688e      	ldr	r6, [r1, #8]
 800706e:	429e      	cmp	r6, r3
 8007070:	4682      	mov	sl, r0
 8007072:	460c      	mov	r4, r1
 8007074:	4690      	mov	r8, r2
 8007076:	461f      	mov	r7, r3
 8007078:	d838      	bhi.n	80070ec <__ssputs_r+0x84>
 800707a:	898a      	ldrh	r2, [r1, #12]
 800707c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007080:	d032      	beq.n	80070e8 <__ssputs_r+0x80>
 8007082:	6825      	ldr	r5, [r4, #0]
 8007084:	6909      	ldr	r1, [r1, #16]
 8007086:	eba5 0901 	sub.w	r9, r5, r1
 800708a:	6965      	ldr	r5, [r4, #20]
 800708c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007094:	3301      	adds	r3, #1
 8007096:	444b      	add	r3, r9
 8007098:	106d      	asrs	r5, r5, #1
 800709a:	429d      	cmp	r5, r3
 800709c:	bf38      	it	cc
 800709e:	461d      	movcc	r5, r3
 80070a0:	0553      	lsls	r3, r2, #21
 80070a2:	d531      	bpl.n	8007108 <__ssputs_r+0xa0>
 80070a4:	4629      	mov	r1, r5
 80070a6:	f7ff ff85 	bl	8006fb4 <_malloc_r>
 80070aa:	4606      	mov	r6, r0
 80070ac:	b950      	cbnz	r0, 80070c4 <__ssputs_r+0x5c>
 80070ae:	230c      	movs	r3, #12
 80070b0:	f8ca 3000 	str.w	r3, [sl]
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c4:	6921      	ldr	r1, [r4, #16]
 80070c6:	464a      	mov	r2, r9
 80070c8:	f7ff fa56 	bl	8006578 <memcpy>
 80070cc:	89a3      	ldrh	r3, [r4, #12]
 80070ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d6:	81a3      	strh	r3, [r4, #12]
 80070d8:	6126      	str	r6, [r4, #16]
 80070da:	6165      	str	r5, [r4, #20]
 80070dc:	444e      	add	r6, r9
 80070de:	eba5 0509 	sub.w	r5, r5, r9
 80070e2:	6026      	str	r6, [r4, #0]
 80070e4:	60a5      	str	r5, [r4, #8]
 80070e6:	463e      	mov	r6, r7
 80070e8:	42be      	cmp	r6, r7
 80070ea:	d900      	bls.n	80070ee <__ssputs_r+0x86>
 80070ec:	463e      	mov	r6, r7
 80070ee:	4632      	mov	r2, r6
 80070f0:	6820      	ldr	r0, [r4, #0]
 80070f2:	4641      	mov	r1, r8
 80070f4:	f000 f97a 	bl	80073ec <memmove>
 80070f8:	68a3      	ldr	r3, [r4, #8]
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	1b9b      	subs	r3, r3, r6
 80070fe:	4432      	add	r2, r6
 8007100:	60a3      	str	r3, [r4, #8]
 8007102:	6022      	str	r2, [r4, #0]
 8007104:	2000      	movs	r0, #0
 8007106:	e7db      	b.n	80070c0 <__ssputs_r+0x58>
 8007108:	462a      	mov	r2, r5
 800710a:	f000 f995 	bl	8007438 <_realloc_r>
 800710e:	4606      	mov	r6, r0
 8007110:	2800      	cmp	r0, #0
 8007112:	d1e1      	bne.n	80070d8 <__ssputs_r+0x70>
 8007114:	6921      	ldr	r1, [r4, #16]
 8007116:	4650      	mov	r0, sl
 8007118:	f7ff fefe 	bl	8006f18 <_free_r>
 800711c:	e7c7      	b.n	80070ae <__ssputs_r+0x46>
	...

08007120 <_svfiprintf_r>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	4698      	mov	r8, r3
 8007126:	898b      	ldrh	r3, [r1, #12]
 8007128:	061b      	lsls	r3, r3, #24
 800712a:	b09d      	sub	sp, #116	; 0x74
 800712c:	4607      	mov	r7, r0
 800712e:	460d      	mov	r5, r1
 8007130:	4614      	mov	r4, r2
 8007132:	d50e      	bpl.n	8007152 <_svfiprintf_r+0x32>
 8007134:	690b      	ldr	r3, [r1, #16]
 8007136:	b963      	cbnz	r3, 8007152 <_svfiprintf_r+0x32>
 8007138:	2140      	movs	r1, #64	; 0x40
 800713a:	f7ff ff3b 	bl	8006fb4 <_malloc_r>
 800713e:	6028      	str	r0, [r5, #0]
 8007140:	6128      	str	r0, [r5, #16]
 8007142:	b920      	cbnz	r0, 800714e <_svfiprintf_r+0x2e>
 8007144:	230c      	movs	r3, #12
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800714c:	e0d1      	b.n	80072f2 <_svfiprintf_r+0x1d2>
 800714e:	2340      	movs	r3, #64	; 0x40
 8007150:	616b      	str	r3, [r5, #20]
 8007152:	2300      	movs	r3, #0
 8007154:	9309      	str	r3, [sp, #36]	; 0x24
 8007156:	2320      	movs	r3, #32
 8007158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800715c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007160:	2330      	movs	r3, #48	; 0x30
 8007162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800730c <_svfiprintf_r+0x1ec>
 8007166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800716a:	f04f 0901 	mov.w	r9, #1
 800716e:	4623      	mov	r3, r4
 8007170:	469a      	mov	sl, r3
 8007172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007176:	b10a      	cbz	r2, 800717c <_svfiprintf_r+0x5c>
 8007178:	2a25      	cmp	r2, #37	; 0x25
 800717a:	d1f9      	bne.n	8007170 <_svfiprintf_r+0x50>
 800717c:	ebba 0b04 	subs.w	fp, sl, r4
 8007180:	d00b      	beq.n	800719a <_svfiprintf_r+0x7a>
 8007182:	465b      	mov	r3, fp
 8007184:	4622      	mov	r2, r4
 8007186:	4629      	mov	r1, r5
 8007188:	4638      	mov	r0, r7
 800718a:	f7ff ff6d 	bl	8007068 <__ssputs_r>
 800718e:	3001      	adds	r0, #1
 8007190:	f000 80aa 	beq.w	80072e8 <_svfiprintf_r+0x1c8>
 8007194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007196:	445a      	add	r2, fp
 8007198:	9209      	str	r2, [sp, #36]	; 0x24
 800719a:	f89a 3000 	ldrb.w	r3, [sl]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 80a2 	beq.w	80072e8 <_svfiprintf_r+0x1c8>
 80071a4:	2300      	movs	r3, #0
 80071a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ae:	f10a 0a01 	add.w	sl, sl, #1
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	9307      	str	r3, [sp, #28]
 80071b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ba:	931a      	str	r3, [sp, #104]	; 0x68
 80071bc:	4654      	mov	r4, sl
 80071be:	2205      	movs	r2, #5
 80071c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071c4:	4851      	ldr	r0, [pc, #324]	; (800730c <_svfiprintf_r+0x1ec>)
 80071c6:	f7f9 f813 	bl	80001f0 <memchr>
 80071ca:	9a04      	ldr	r2, [sp, #16]
 80071cc:	b9d8      	cbnz	r0, 8007206 <_svfiprintf_r+0xe6>
 80071ce:	06d0      	lsls	r0, r2, #27
 80071d0:	bf44      	itt	mi
 80071d2:	2320      	movmi	r3, #32
 80071d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d8:	0711      	lsls	r1, r2, #28
 80071da:	bf44      	itt	mi
 80071dc:	232b      	movmi	r3, #43	; 0x2b
 80071de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071e2:	f89a 3000 	ldrb.w	r3, [sl]
 80071e6:	2b2a      	cmp	r3, #42	; 0x2a
 80071e8:	d015      	beq.n	8007216 <_svfiprintf_r+0xf6>
 80071ea:	9a07      	ldr	r2, [sp, #28]
 80071ec:	4654      	mov	r4, sl
 80071ee:	2000      	movs	r0, #0
 80071f0:	f04f 0c0a 	mov.w	ip, #10
 80071f4:	4621      	mov	r1, r4
 80071f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071fa:	3b30      	subs	r3, #48	; 0x30
 80071fc:	2b09      	cmp	r3, #9
 80071fe:	d94e      	bls.n	800729e <_svfiprintf_r+0x17e>
 8007200:	b1b0      	cbz	r0, 8007230 <_svfiprintf_r+0x110>
 8007202:	9207      	str	r2, [sp, #28]
 8007204:	e014      	b.n	8007230 <_svfiprintf_r+0x110>
 8007206:	eba0 0308 	sub.w	r3, r0, r8
 800720a:	fa09 f303 	lsl.w	r3, r9, r3
 800720e:	4313      	orrs	r3, r2
 8007210:	9304      	str	r3, [sp, #16]
 8007212:	46a2      	mov	sl, r4
 8007214:	e7d2      	b.n	80071bc <_svfiprintf_r+0x9c>
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	1d19      	adds	r1, r3, #4
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	9103      	str	r1, [sp, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	bfbb      	ittet	lt
 8007222:	425b      	neglt	r3, r3
 8007224:	f042 0202 	orrlt.w	r2, r2, #2
 8007228:	9307      	strge	r3, [sp, #28]
 800722a:	9307      	strlt	r3, [sp, #28]
 800722c:	bfb8      	it	lt
 800722e:	9204      	strlt	r2, [sp, #16]
 8007230:	7823      	ldrb	r3, [r4, #0]
 8007232:	2b2e      	cmp	r3, #46	; 0x2e
 8007234:	d10c      	bne.n	8007250 <_svfiprintf_r+0x130>
 8007236:	7863      	ldrb	r3, [r4, #1]
 8007238:	2b2a      	cmp	r3, #42	; 0x2a
 800723a:	d135      	bne.n	80072a8 <_svfiprintf_r+0x188>
 800723c:	9b03      	ldr	r3, [sp, #12]
 800723e:	1d1a      	adds	r2, r3, #4
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	9203      	str	r2, [sp, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	bfb8      	it	lt
 8007248:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800724c:	3402      	adds	r4, #2
 800724e:	9305      	str	r3, [sp, #20]
 8007250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800731c <_svfiprintf_r+0x1fc>
 8007254:	7821      	ldrb	r1, [r4, #0]
 8007256:	2203      	movs	r2, #3
 8007258:	4650      	mov	r0, sl
 800725a:	f7f8 ffc9 	bl	80001f0 <memchr>
 800725e:	b140      	cbz	r0, 8007272 <_svfiprintf_r+0x152>
 8007260:	2340      	movs	r3, #64	; 0x40
 8007262:	eba0 000a 	sub.w	r0, r0, sl
 8007266:	fa03 f000 	lsl.w	r0, r3, r0
 800726a:	9b04      	ldr	r3, [sp, #16]
 800726c:	4303      	orrs	r3, r0
 800726e:	3401      	adds	r4, #1
 8007270:	9304      	str	r3, [sp, #16]
 8007272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007276:	4826      	ldr	r0, [pc, #152]	; (8007310 <_svfiprintf_r+0x1f0>)
 8007278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800727c:	2206      	movs	r2, #6
 800727e:	f7f8 ffb7 	bl	80001f0 <memchr>
 8007282:	2800      	cmp	r0, #0
 8007284:	d038      	beq.n	80072f8 <_svfiprintf_r+0x1d8>
 8007286:	4b23      	ldr	r3, [pc, #140]	; (8007314 <_svfiprintf_r+0x1f4>)
 8007288:	bb1b      	cbnz	r3, 80072d2 <_svfiprintf_r+0x1b2>
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	3307      	adds	r3, #7
 800728e:	f023 0307 	bic.w	r3, r3, #7
 8007292:	3308      	adds	r3, #8
 8007294:	9303      	str	r3, [sp, #12]
 8007296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007298:	4433      	add	r3, r6
 800729a:	9309      	str	r3, [sp, #36]	; 0x24
 800729c:	e767      	b.n	800716e <_svfiprintf_r+0x4e>
 800729e:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a2:	460c      	mov	r4, r1
 80072a4:	2001      	movs	r0, #1
 80072a6:	e7a5      	b.n	80071f4 <_svfiprintf_r+0xd4>
 80072a8:	2300      	movs	r3, #0
 80072aa:	3401      	adds	r4, #1
 80072ac:	9305      	str	r3, [sp, #20]
 80072ae:	4619      	mov	r1, r3
 80072b0:	f04f 0c0a 	mov.w	ip, #10
 80072b4:	4620      	mov	r0, r4
 80072b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ba:	3a30      	subs	r2, #48	; 0x30
 80072bc:	2a09      	cmp	r2, #9
 80072be:	d903      	bls.n	80072c8 <_svfiprintf_r+0x1a8>
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0c5      	beq.n	8007250 <_svfiprintf_r+0x130>
 80072c4:	9105      	str	r1, [sp, #20]
 80072c6:	e7c3      	b.n	8007250 <_svfiprintf_r+0x130>
 80072c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072cc:	4604      	mov	r4, r0
 80072ce:	2301      	movs	r3, #1
 80072d0:	e7f0      	b.n	80072b4 <_svfiprintf_r+0x194>
 80072d2:	ab03      	add	r3, sp, #12
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	462a      	mov	r2, r5
 80072d8:	4b0f      	ldr	r3, [pc, #60]	; (8007318 <_svfiprintf_r+0x1f8>)
 80072da:	a904      	add	r1, sp, #16
 80072dc:	4638      	mov	r0, r7
 80072de:	f7fc fab5 	bl	800384c <_printf_float>
 80072e2:	1c42      	adds	r2, r0, #1
 80072e4:	4606      	mov	r6, r0
 80072e6:	d1d6      	bne.n	8007296 <_svfiprintf_r+0x176>
 80072e8:	89ab      	ldrh	r3, [r5, #12]
 80072ea:	065b      	lsls	r3, r3, #25
 80072ec:	f53f af2c 	bmi.w	8007148 <_svfiprintf_r+0x28>
 80072f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072f2:	b01d      	add	sp, #116	; 0x74
 80072f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f8:	ab03      	add	r3, sp, #12
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	462a      	mov	r2, r5
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <_svfiprintf_r+0x1f8>)
 8007300:	a904      	add	r1, sp, #16
 8007302:	4638      	mov	r0, r7
 8007304:	f7fc fd3a 	bl	8003d7c <_printf_i>
 8007308:	e7eb      	b.n	80072e2 <_svfiprintf_r+0x1c2>
 800730a:	bf00      	nop
 800730c:	0800833c 	.word	0x0800833c
 8007310:	08008346 	.word	0x08008346
 8007314:	0800384d 	.word	0x0800384d
 8007318:	08007069 	.word	0x08007069
 800731c:	08008342 	.word	0x08008342

08007320 <nan>:
 8007320:	4901      	ldr	r1, [pc, #4]	; (8007328 <nan+0x8>)
 8007322:	2000      	movs	r0, #0
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	7ff80000 	.word	0x7ff80000

0800732c <_sbrk_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4d06      	ldr	r5, [pc, #24]	; (8007348 <_sbrk_r+0x1c>)
 8007330:	2300      	movs	r3, #0
 8007332:	4604      	mov	r4, r0
 8007334:	4608      	mov	r0, r1
 8007336:	602b      	str	r3, [r5, #0]
 8007338:	f7fa fbc8 	bl	8001acc <_sbrk>
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d102      	bne.n	8007346 <_sbrk_r+0x1a>
 8007340:	682b      	ldr	r3, [r5, #0]
 8007342:	b103      	cbz	r3, 8007346 <_sbrk_r+0x1a>
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	20000410 	.word	0x20000410

0800734c <strncmp>:
 800734c:	b510      	push	{r4, lr}
 800734e:	b16a      	cbz	r2, 800736c <strncmp+0x20>
 8007350:	3901      	subs	r1, #1
 8007352:	1884      	adds	r4, r0, r2
 8007354:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007358:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800735c:	4293      	cmp	r3, r2
 800735e:	d103      	bne.n	8007368 <strncmp+0x1c>
 8007360:	42a0      	cmp	r0, r4
 8007362:	d001      	beq.n	8007368 <strncmp+0x1c>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1f5      	bne.n	8007354 <strncmp+0x8>
 8007368:	1a98      	subs	r0, r3, r2
 800736a:	bd10      	pop	{r4, pc}
 800736c:	4610      	mov	r0, r2
 800736e:	e7fc      	b.n	800736a <strncmp+0x1e>

08007370 <__ascii_wctomb>:
 8007370:	4603      	mov	r3, r0
 8007372:	4608      	mov	r0, r1
 8007374:	b141      	cbz	r1, 8007388 <__ascii_wctomb+0x18>
 8007376:	2aff      	cmp	r2, #255	; 0xff
 8007378:	d904      	bls.n	8007384 <__ascii_wctomb+0x14>
 800737a:	228a      	movs	r2, #138	; 0x8a
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007382:	4770      	bx	lr
 8007384:	700a      	strb	r2, [r1, #0]
 8007386:	2001      	movs	r0, #1
 8007388:	4770      	bx	lr
	...

0800738c <__assert_func>:
 800738c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800738e:	4614      	mov	r4, r2
 8007390:	461a      	mov	r2, r3
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <__assert_func+0x2c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4605      	mov	r5, r0
 8007398:	68d8      	ldr	r0, [r3, #12]
 800739a:	b14c      	cbz	r4, 80073b0 <__assert_func+0x24>
 800739c:	4b07      	ldr	r3, [pc, #28]	; (80073bc <__assert_func+0x30>)
 800739e:	9100      	str	r1, [sp, #0]
 80073a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073a4:	4906      	ldr	r1, [pc, #24]	; (80073c0 <__assert_func+0x34>)
 80073a6:	462b      	mov	r3, r5
 80073a8:	f000 f80e 	bl	80073c8 <fiprintf>
 80073ac:	f000 fa82 	bl	80078b4 <abort>
 80073b0:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <__assert_func+0x38>)
 80073b2:	461c      	mov	r4, r3
 80073b4:	e7f3      	b.n	800739e <__assert_func+0x12>
 80073b6:	bf00      	nop
 80073b8:	20000040 	.word	0x20000040
 80073bc:	0800834d 	.word	0x0800834d
 80073c0:	0800835a 	.word	0x0800835a
 80073c4:	08008388 	.word	0x08008388

080073c8 <fiprintf>:
 80073c8:	b40e      	push	{r1, r2, r3}
 80073ca:	b503      	push	{r0, r1, lr}
 80073cc:	4601      	mov	r1, r0
 80073ce:	ab03      	add	r3, sp, #12
 80073d0:	4805      	ldr	r0, [pc, #20]	; (80073e8 <fiprintf+0x20>)
 80073d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d6:	6800      	ldr	r0, [r0, #0]
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	f000 f87b 	bl	80074d4 <_vfiprintf_r>
 80073de:	b002      	add	sp, #8
 80073e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073e4:	b003      	add	sp, #12
 80073e6:	4770      	bx	lr
 80073e8:	20000040 	.word	0x20000040

080073ec <memmove>:
 80073ec:	4288      	cmp	r0, r1
 80073ee:	b510      	push	{r4, lr}
 80073f0:	eb01 0402 	add.w	r4, r1, r2
 80073f4:	d902      	bls.n	80073fc <memmove+0x10>
 80073f6:	4284      	cmp	r4, r0
 80073f8:	4623      	mov	r3, r4
 80073fa:	d807      	bhi.n	800740c <memmove+0x20>
 80073fc:	1e43      	subs	r3, r0, #1
 80073fe:	42a1      	cmp	r1, r4
 8007400:	d008      	beq.n	8007414 <memmove+0x28>
 8007402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800740a:	e7f8      	b.n	80073fe <memmove+0x12>
 800740c:	4402      	add	r2, r0
 800740e:	4601      	mov	r1, r0
 8007410:	428a      	cmp	r2, r1
 8007412:	d100      	bne.n	8007416 <memmove+0x2a>
 8007414:	bd10      	pop	{r4, pc}
 8007416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800741a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800741e:	e7f7      	b.n	8007410 <memmove+0x24>

08007420 <__malloc_lock>:
 8007420:	4801      	ldr	r0, [pc, #4]	; (8007428 <__malloc_lock+0x8>)
 8007422:	f000 bc07 	b.w	8007c34 <__retarget_lock_acquire_recursive>
 8007426:	bf00      	nop
 8007428:	20000418 	.word	0x20000418

0800742c <__malloc_unlock>:
 800742c:	4801      	ldr	r0, [pc, #4]	; (8007434 <__malloc_unlock+0x8>)
 800742e:	f000 bc02 	b.w	8007c36 <__retarget_lock_release_recursive>
 8007432:	bf00      	nop
 8007434:	20000418 	.word	0x20000418

08007438 <_realloc_r>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	4607      	mov	r7, r0
 800743c:	4614      	mov	r4, r2
 800743e:	460e      	mov	r6, r1
 8007440:	b921      	cbnz	r1, 800744c <_realloc_r+0x14>
 8007442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007446:	4611      	mov	r1, r2
 8007448:	f7ff bdb4 	b.w	8006fb4 <_malloc_r>
 800744c:	b922      	cbnz	r2, 8007458 <_realloc_r+0x20>
 800744e:	f7ff fd63 	bl	8006f18 <_free_r>
 8007452:	4625      	mov	r5, r4
 8007454:	4628      	mov	r0, r5
 8007456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007458:	f000 fc52 	bl	8007d00 <_malloc_usable_size_r>
 800745c:	42a0      	cmp	r0, r4
 800745e:	d20f      	bcs.n	8007480 <_realloc_r+0x48>
 8007460:	4621      	mov	r1, r4
 8007462:	4638      	mov	r0, r7
 8007464:	f7ff fda6 	bl	8006fb4 <_malloc_r>
 8007468:	4605      	mov	r5, r0
 800746a:	2800      	cmp	r0, #0
 800746c:	d0f2      	beq.n	8007454 <_realloc_r+0x1c>
 800746e:	4631      	mov	r1, r6
 8007470:	4622      	mov	r2, r4
 8007472:	f7ff f881 	bl	8006578 <memcpy>
 8007476:	4631      	mov	r1, r6
 8007478:	4638      	mov	r0, r7
 800747a:	f7ff fd4d 	bl	8006f18 <_free_r>
 800747e:	e7e9      	b.n	8007454 <_realloc_r+0x1c>
 8007480:	4635      	mov	r5, r6
 8007482:	e7e7      	b.n	8007454 <_realloc_r+0x1c>

08007484 <__sfputc_r>:
 8007484:	6893      	ldr	r3, [r2, #8]
 8007486:	3b01      	subs	r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	b410      	push	{r4}
 800748c:	6093      	str	r3, [r2, #8]
 800748e:	da07      	bge.n	80074a0 <__sfputc_r+0x1c>
 8007490:	6994      	ldr	r4, [r2, #24]
 8007492:	42a3      	cmp	r3, r4
 8007494:	db01      	blt.n	800749a <__sfputc_r+0x16>
 8007496:	290a      	cmp	r1, #10
 8007498:	d102      	bne.n	80074a0 <__sfputc_r+0x1c>
 800749a:	bc10      	pop	{r4}
 800749c:	f000 b94a 	b.w	8007734 <__swbuf_r>
 80074a0:	6813      	ldr	r3, [r2, #0]
 80074a2:	1c58      	adds	r0, r3, #1
 80074a4:	6010      	str	r0, [r2, #0]
 80074a6:	7019      	strb	r1, [r3, #0]
 80074a8:	4608      	mov	r0, r1
 80074aa:	bc10      	pop	{r4}
 80074ac:	4770      	bx	lr

080074ae <__sfputs_r>:
 80074ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b0:	4606      	mov	r6, r0
 80074b2:	460f      	mov	r7, r1
 80074b4:	4614      	mov	r4, r2
 80074b6:	18d5      	adds	r5, r2, r3
 80074b8:	42ac      	cmp	r4, r5
 80074ba:	d101      	bne.n	80074c0 <__sfputs_r+0x12>
 80074bc:	2000      	movs	r0, #0
 80074be:	e007      	b.n	80074d0 <__sfputs_r+0x22>
 80074c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c4:	463a      	mov	r2, r7
 80074c6:	4630      	mov	r0, r6
 80074c8:	f7ff ffdc 	bl	8007484 <__sfputc_r>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d1f3      	bne.n	80074b8 <__sfputs_r+0xa>
 80074d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074d4 <_vfiprintf_r>:
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	460d      	mov	r5, r1
 80074da:	b09d      	sub	sp, #116	; 0x74
 80074dc:	4614      	mov	r4, r2
 80074de:	4698      	mov	r8, r3
 80074e0:	4606      	mov	r6, r0
 80074e2:	b118      	cbz	r0, 80074ec <_vfiprintf_r+0x18>
 80074e4:	6983      	ldr	r3, [r0, #24]
 80074e6:	b90b      	cbnz	r3, 80074ec <_vfiprintf_r+0x18>
 80074e8:	f000 fb06 	bl	8007af8 <__sinit>
 80074ec:	4b89      	ldr	r3, [pc, #548]	; (8007714 <_vfiprintf_r+0x240>)
 80074ee:	429d      	cmp	r5, r3
 80074f0:	d11b      	bne.n	800752a <_vfiprintf_r+0x56>
 80074f2:	6875      	ldr	r5, [r6, #4]
 80074f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074f6:	07d9      	lsls	r1, r3, #31
 80074f8:	d405      	bmi.n	8007506 <_vfiprintf_r+0x32>
 80074fa:	89ab      	ldrh	r3, [r5, #12]
 80074fc:	059a      	lsls	r2, r3, #22
 80074fe:	d402      	bmi.n	8007506 <_vfiprintf_r+0x32>
 8007500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007502:	f000 fb97 	bl	8007c34 <__retarget_lock_acquire_recursive>
 8007506:	89ab      	ldrh	r3, [r5, #12]
 8007508:	071b      	lsls	r3, r3, #28
 800750a:	d501      	bpl.n	8007510 <_vfiprintf_r+0x3c>
 800750c:	692b      	ldr	r3, [r5, #16]
 800750e:	b9eb      	cbnz	r3, 800754c <_vfiprintf_r+0x78>
 8007510:	4629      	mov	r1, r5
 8007512:	4630      	mov	r0, r6
 8007514:	f000 f960 	bl	80077d8 <__swsetup_r>
 8007518:	b1c0      	cbz	r0, 800754c <_vfiprintf_r+0x78>
 800751a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800751c:	07dc      	lsls	r4, r3, #31
 800751e:	d50e      	bpl.n	800753e <_vfiprintf_r+0x6a>
 8007520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007524:	b01d      	add	sp, #116	; 0x74
 8007526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752a:	4b7b      	ldr	r3, [pc, #492]	; (8007718 <_vfiprintf_r+0x244>)
 800752c:	429d      	cmp	r5, r3
 800752e:	d101      	bne.n	8007534 <_vfiprintf_r+0x60>
 8007530:	68b5      	ldr	r5, [r6, #8]
 8007532:	e7df      	b.n	80074f4 <_vfiprintf_r+0x20>
 8007534:	4b79      	ldr	r3, [pc, #484]	; (800771c <_vfiprintf_r+0x248>)
 8007536:	429d      	cmp	r5, r3
 8007538:	bf08      	it	eq
 800753a:	68f5      	ldreq	r5, [r6, #12]
 800753c:	e7da      	b.n	80074f4 <_vfiprintf_r+0x20>
 800753e:	89ab      	ldrh	r3, [r5, #12]
 8007540:	0598      	lsls	r0, r3, #22
 8007542:	d4ed      	bmi.n	8007520 <_vfiprintf_r+0x4c>
 8007544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007546:	f000 fb76 	bl	8007c36 <__retarget_lock_release_recursive>
 800754a:	e7e9      	b.n	8007520 <_vfiprintf_r+0x4c>
 800754c:	2300      	movs	r3, #0
 800754e:	9309      	str	r3, [sp, #36]	; 0x24
 8007550:	2320      	movs	r3, #32
 8007552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007556:	f8cd 800c 	str.w	r8, [sp, #12]
 800755a:	2330      	movs	r3, #48	; 0x30
 800755c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007720 <_vfiprintf_r+0x24c>
 8007560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007564:	f04f 0901 	mov.w	r9, #1
 8007568:	4623      	mov	r3, r4
 800756a:	469a      	mov	sl, r3
 800756c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007570:	b10a      	cbz	r2, 8007576 <_vfiprintf_r+0xa2>
 8007572:	2a25      	cmp	r2, #37	; 0x25
 8007574:	d1f9      	bne.n	800756a <_vfiprintf_r+0x96>
 8007576:	ebba 0b04 	subs.w	fp, sl, r4
 800757a:	d00b      	beq.n	8007594 <_vfiprintf_r+0xc0>
 800757c:	465b      	mov	r3, fp
 800757e:	4622      	mov	r2, r4
 8007580:	4629      	mov	r1, r5
 8007582:	4630      	mov	r0, r6
 8007584:	f7ff ff93 	bl	80074ae <__sfputs_r>
 8007588:	3001      	adds	r0, #1
 800758a:	f000 80aa 	beq.w	80076e2 <_vfiprintf_r+0x20e>
 800758e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007590:	445a      	add	r2, fp
 8007592:	9209      	str	r2, [sp, #36]	; 0x24
 8007594:	f89a 3000 	ldrb.w	r3, [sl]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80a2 	beq.w	80076e2 <_vfiprintf_r+0x20e>
 800759e:	2300      	movs	r3, #0
 80075a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075a8:	f10a 0a01 	add.w	sl, sl, #1
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	9307      	str	r3, [sp, #28]
 80075b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075b4:	931a      	str	r3, [sp, #104]	; 0x68
 80075b6:	4654      	mov	r4, sl
 80075b8:	2205      	movs	r2, #5
 80075ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075be:	4858      	ldr	r0, [pc, #352]	; (8007720 <_vfiprintf_r+0x24c>)
 80075c0:	f7f8 fe16 	bl	80001f0 <memchr>
 80075c4:	9a04      	ldr	r2, [sp, #16]
 80075c6:	b9d8      	cbnz	r0, 8007600 <_vfiprintf_r+0x12c>
 80075c8:	06d1      	lsls	r1, r2, #27
 80075ca:	bf44      	itt	mi
 80075cc:	2320      	movmi	r3, #32
 80075ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d2:	0713      	lsls	r3, r2, #28
 80075d4:	bf44      	itt	mi
 80075d6:	232b      	movmi	r3, #43	; 0x2b
 80075d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075dc:	f89a 3000 	ldrb.w	r3, [sl]
 80075e0:	2b2a      	cmp	r3, #42	; 0x2a
 80075e2:	d015      	beq.n	8007610 <_vfiprintf_r+0x13c>
 80075e4:	9a07      	ldr	r2, [sp, #28]
 80075e6:	4654      	mov	r4, sl
 80075e8:	2000      	movs	r0, #0
 80075ea:	f04f 0c0a 	mov.w	ip, #10
 80075ee:	4621      	mov	r1, r4
 80075f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f4:	3b30      	subs	r3, #48	; 0x30
 80075f6:	2b09      	cmp	r3, #9
 80075f8:	d94e      	bls.n	8007698 <_vfiprintf_r+0x1c4>
 80075fa:	b1b0      	cbz	r0, 800762a <_vfiprintf_r+0x156>
 80075fc:	9207      	str	r2, [sp, #28]
 80075fe:	e014      	b.n	800762a <_vfiprintf_r+0x156>
 8007600:	eba0 0308 	sub.w	r3, r0, r8
 8007604:	fa09 f303 	lsl.w	r3, r9, r3
 8007608:	4313      	orrs	r3, r2
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	46a2      	mov	sl, r4
 800760e:	e7d2      	b.n	80075b6 <_vfiprintf_r+0xe2>
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	1d19      	adds	r1, r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	9103      	str	r1, [sp, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	bfbb      	ittet	lt
 800761c:	425b      	neglt	r3, r3
 800761e:	f042 0202 	orrlt.w	r2, r2, #2
 8007622:	9307      	strge	r3, [sp, #28]
 8007624:	9307      	strlt	r3, [sp, #28]
 8007626:	bfb8      	it	lt
 8007628:	9204      	strlt	r2, [sp, #16]
 800762a:	7823      	ldrb	r3, [r4, #0]
 800762c:	2b2e      	cmp	r3, #46	; 0x2e
 800762e:	d10c      	bne.n	800764a <_vfiprintf_r+0x176>
 8007630:	7863      	ldrb	r3, [r4, #1]
 8007632:	2b2a      	cmp	r3, #42	; 0x2a
 8007634:	d135      	bne.n	80076a2 <_vfiprintf_r+0x1ce>
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	1d1a      	adds	r2, r3, #4
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	9203      	str	r2, [sp, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	bfb8      	it	lt
 8007642:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007646:	3402      	adds	r4, #2
 8007648:	9305      	str	r3, [sp, #20]
 800764a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007730 <_vfiprintf_r+0x25c>
 800764e:	7821      	ldrb	r1, [r4, #0]
 8007650:	2203      	movs	r2, #3
 8007652:	4650      	mov	r0, sl
 8007654:	f7f8 fdcc 	bl	80001f0 <memchr>
 8007658:	b140      	cbz	r0, 800766c <_vfiprintf_r+0x198>
 800765a:	2340      	movs	r3, #64	; 0x40
 800765c:	eba0 000a 	sub.w	r0, r0, sl
 8007660:	fa03 f000 	lsl.w	r0, r3, r0
 8007664:	9b04      	ldr	r3, [sp, #16]
 8007666:	4303      	orrs	r3, r0
 8007668:	3401      	adds	r4, #1
 800766a:	9304      	str	r3, [sp, #16]
 800766c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007670:	482c      	ldr	r0, [pc, #176]	; (8007724 <_vfiprintf_r+0x250>)
 8007672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007676:	2206      	movs	r2, #6
 8007678:	f7f8 fdba 	bl	80001f0 <memchr>
 800767c:	2800      	cmp	r0, #0
 800767e:	d03f      	beq.n	8007700 <_vfiprintf_r+0x22c>
 8007680:	4b29      	ldr	r3, [pc, #164]	; (8007728 <_vfiprintf_r+0x254>)
 8007682:	bb1b      	cbnz	r3, 80076cc <_vfiprintf_r+0x1f8>
 8007684:	9b03      	ldr	r3, [sp, #12]
 8007686:	3307      	adds	r3, #7
 8007688:	f023 0307 	bic.w	r3, r3, #7
 800768c:	3308      	adds	r3, #8
 800768e:	9303      	str	r3, [sp, #12]
 8007690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007692:	443b      	add	r3, r7
 8007694:	9309      	str	r3, [sp, #36]	; 0x24
 8007696:	e767      	b.n	8007568 <_vfiprintf_r+0x94>
 8007698:	fb0c 3202 	mla	r2, ip, r2, r3
 800769c:	460c      	mov	r4, r1
 800769e:	2001      	movs	r0, #1
 80076a0:	e7a5      	b.n	80075ee <_vfiprintf_r+0x11a>
 80076a2:	2300      	movs	r3, #0
 80076a4:	3401      	adds	r4, #1
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	4619      	mov	r1, r3
 80076aa:	f04f 0c0a 	mov.w	ip, #10
 80076ae:	4620      	mov	r0, r4
 80076b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b4:	3a30      	subs	r2, #48	; 0x30
 80076b6:	2a09      	cmp	r2, #9
 80076b8:	d903      	bls.n	80076c2 <_vfiprintf_r+0x1ee>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0c5      	beq.n	800764a <_vfiprintf_r+0x176>
 80076be:	9105      	str	r1, [sp, #20]
 80076c0:	e7c3      	b.n	800764a <_vfiprintf_r+0x176>
 80076c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80076c6:	4604      	mov	r4, r0
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7f0      	b.n	80076ae <_vfiprintf_r+0x1da>
 80076cc:	ab03      	add	r3, sp, #12
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	462a      	mov	r2, r5
 80076d2:	4b16      	ldr	r3, [pc, #88]	; (800772c <_vfiprintf_r+0x258>)
 80076d4:	a904      	add	r1, sp, #16
 80076d6:	4630      	mov	r0, r6
 80076d8:	f7fc f8b8 	bl	800384c <_printf_float>
 80076dc:	4607      	mov	r7, r0
 80076de:	1c78      	adds	r0, r7, #1
 80076e0:	d1d6      	bne.n	8007690 <_vfiprintf_r+0x1bc>
 80076e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076e4:	07d9      	lsls	r1, r3, #31
 80076e6:	d405      	bmi.n	80076f4 <_vfiprintf_r+0x220>
 80076e8:	89ab      	ldrh	r3, [r5, #12]
 80076ea:	059a      	lsls	r2, r3, #22
 80076ec:	d402      	bmi.n	80076f4 <_vfiprintf_r+0x220>
 80076ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f0:	f000 faa1 	bl	8007c36 <__retarget_lock_release_recursive>
 80076f4:	89ab      	ldrh	r3, [r5, #12]
 80076f6:	065b      	lsls	r3, r3, #25
 80076f8:	f53f af12 	bmi.w	8007520 <_vfiprintf_r+0x4c>
 80076fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076fe:	e711      	b.n	8007524 <_vfiprintf_r+0x50>
 8007700:	ab03      	add	r3, sp, #12
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	462a      	mov	r2, r5
 8007706:	4b09      	ldr	r3, [pc, #36]	; (800772c <_vfiprintf_r+0x258>)
 8007708:	a904      	add	r1, sp, #16
 800770a:	4630      	mov	r0, r6
 800770c:	f7fc fb36 	bl	8003d7c <_printf_i>
 8007710:	e7e4      	b.n	80076dc <_vfiprintf_r+0x208>
 8007712:	bf00      	nop
 8007714:	080083ac 	.word	0x080083ac
 8007718:	080083cc 	.word	0x080083cc
 800771c:	0800838c 	.word	0x0800838c
 8007720:	0800833c 	.word	0x0800833c
 8007724:	08008346 	.word	0x08008346
 8007728:	0800384d 	.word	0x0800384d
 800772c:	080074af 	.word	0x080074af
 8007730:	08008342 	.word	0x08008342

08007734 <__swbuf_r>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	460e      	mov	r6, r1
 8007738:	4614      	mov	r4, r2
 800773a:	4605      	mov	r5, r0
 800773c:	b118      	cbz	r0, 8007746 <__swbuf_r+0x12>
 800773e:	6983      	ldr	r3, [r0, #24]
 8007740:	b90b      	cbnz	r3, 8007746 <__swbuf_r+0x12>
 8007742:	f000 f9d9 	bl	8007af8 <__sinit>
 8007746:	4b21      	ldr	r3, [pc, #132]	; (80077cc <__swbuf_r+0x98>)
 8007748:	429c      	cmp	r4, r3
 800774a:	d12b      	bne.n	80077a4 <__swbuf_r+0x70>
 800774c:	686c      	ldr	r4, [r5, #4]
 800774e:	69a3      	ldr	r3, [r4, #24]
 8007750:	60a3      	str	r3, [r4, #8]
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	071a      	lsls	r2, r3, #28
 8007756:	d52f      	bpl.n	80077b8 <__swbuf_r+0x84>
 8007758:	6923      	ldr	r3, [r4, #16]
 800775a:	b36b      	cbz	r3, 80077b8 <__swbuf_r+0x84>
 800775c:	6923      	ldr	r3, [r4, #16]
 800775e:	6820      	ldr	r0, [r4, #0]
 8007760:	1ac0      	subs	r0, r0, r3
 8007762:	6963      	ldr	r3, [r4, #20]
 8007764:	b2f6      	uxtb	r6, r6
 8007766:	4283      	cmp	r3, r0
 8007768:	4637      	mov	r7, r6
 800776a:	dc04      	bgt.n	8007776 <__swbuf_r+0x42>
 800776c:	4621      	mov	r1, r4
 800776e:	4628      	mov	r0, r5
 8007770:	f000 f92e 	bl	80079d0 <_fflush_r>
 8007774:	bb30      	cbnz	r0, 80077c4 <__swbuf_r+0x90>
 8007776:	68a3      	ldr	r3, [r4, #8]
 8007778:	3b01      	subs	r3, #1
 800777a:	60a3      	str	r3, [r4, #8]
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	6022      	str	r2, [r4, #0]
 8007782:	701e      	strb	r6, [r3, #0]
 8007784:	6963      	ldr	r3, [r4, #20]
 8007786:	3001      	adds	r0, #1
 8007788:	4283      	cmp	r3, r0
 800778a:	d004      	beq.n	8007796 <__swbuf_r+0x62>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	07db      	lsls	r3, r3, #31
 8007790:	d506      	bpl.n	80077a0 <__swbuf_r+0x6c>
 8007792:	2e0a      	cmp	r6, #10
 8007794:	d104      	bne.n	80077a0 <__swbuf_r+0x6c>
 8007796:	4621      	mov	r1, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f000 f919 	bl	80079d0 <_fflush_r>
 800779e:	b988      	cbnz	r0, 80077c4 <__swbuf_r+0x90>
 80077a0:	4638      	mov	r0, r7
 80077a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a4:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <__swbuf_r+0x9c>)
 80077a6:	429c      	cmp	r4, r3
 80077a8:	d101      	bne.n	80077ae <__swbuf_r+0x7a>
 80077aa:	68ac      	ldr	r4, [r5, #8]
 80077ac:	e7cf      	b.n	800774e <__swbuf_r+0x1a>
 80077ae:	4b09      	ldr	r3, [pc, #36]	; (80077d4 <__swbuf_r+0xa0>)
 80077b0:	429c      	cmp	r4, r3
 80077b2:	bf08      	it	eq
 80077b4:	68ec      	ldreq	r4, [r5, #12]
 80077b6:	e7ca      	b.n	800774e <__swbuf_r+0x1a>
 80077b8:	4621      	mov	r1, r4
 80077ba:	4628      	mov	r0, r5
 80077bc:	f000 f80c 	bl	80077d8 <__swsetup_r>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d0cb      	beq.n	800775c <__swbuf_r+0x28>
 80077c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80077c8:	e7ea      	b.n	80077a0 <__swbuf_r+0x6c>
 80077ca:	bf00      	nop
 80077cc:	080083ac 	.word	0x080083ac
 80077d0:	080083cc 	.word	0x080083cc
 80077d4:	0800838c 	.word	0x0800838c

080077d8 <__swsetup_r>:
 80077d8:	4b32      	ldr	r3, [pc, #200]	; (80078a4 <__swsetup_r+0xcc>)
 80077da:	b570      	push	{r4, r5, r6, lr}
 80077dc:	681d      	ldr	r5, [r3, #0]
 80077de:	4606      	mov	r6, r0
 80077e0:	460c      	mov	r4, r1
 80077e2:	b125      	cbz	r5, 80077ee <__swsetup_r+0x16>
 80077e4:	69ab      	ldr	r3, [r5, #24]
 80077e6:	b913      	cbnz	r3, 80077ee <__swsetup_r+0x16>
 80077e8:	4628      	mov	r0, r5
 80077ea:	f000 f985 	bl	8007af8 <__sinit>
 80077ee:	4b2e      	ldr	r3, [pc, #184]	; (80078a8 <__swsetup_r+0xd0>)
 80077f0:	429c      	cmp	r4, r3
 80077f2:	d10f      	bne.n	8007814 <__swsetup_r+0x3c>
 80077f4:	686c      	ldr	r4, [r5, #4]
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077fc:	0719      	lsls	r1, r3, #28
 80077fe:	d42c      	bmi.n	800785a <__swsetup_r+0x82>
 8007800:	06dd      	lsls	r5, r3, #27
 8007802:	d411      	bmi.n	8007828 <__swsetup_r+0x50>
 8007804:	2309      	movs	r3, #9
 8007806:	6033      	str	r3, [r6, #0]
 8007808:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800780c:	81a3      	strh	r3, [r4, #12]
 800780e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007812:	e03e      	b.n	8007892 <__swsetup_r+0xba>
 8007814:	4b25      	ldr	r3, [pc, #148]	; (80078ac <__swsetup_r+0xd4>)
 8007816:	429c      	cmp	r4, r3
 8007818:	d101      	bne.n	800781e <__swsetup_r+0x46>
 800781a:	68ac      	ldr	r4, [r5, #8]
 800781c:	e7eb      	b.n	80077f6 <__swsetup_r+0x1e>
 800781e:	4b24      	ldr	r3, [pc, #144]	; (80078b0 <__swsetup_r+0xd8>)
 8007820:	429c      	cmp	r4, r3
 8007822:	bf08      	it	eq
 8007824:	68ec      	ldreq	r4, [r5, #12]
 8007826:	e7e6      	b.n	80077f6 <__swsetup_r+0x1e>
 8007828:	0758      	lsls	r0, r3, #29
 800782a:	d512      	bpl.n	8007852 <__swsetup_r+0x7a>
 800782c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800782e:	b141      	cbz	r1, 8007842 <__swsetup_r+0x6a>
 8007830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007834:	4299      	cmp	r1, r3
 8007836:	d002      	beq.n	800783e <__swsetup_r+0x66>
 8007838:	4630      	mov	r0, r6
 800783a:	f7ff fb6d 	bl	8006f18 <_free_r>
 800783e:	2300      	movs	r3, #0
 8007840:	6363      	str	r3, [r4, #52]	; 0x34
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	2300      	movs	r3, #0
 800784c:	6063      	str	r3, [r4, #4]
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	f043 0308 	orr.w	r3, r3, #8
 8007858:	81a3      	strh	r3, [r4, #12]
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	b94b      	cbnz	r3, 8007872 <__swsetup_r+0x9a>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007868:	d003      	beq.n	8007872 <__swsetup_r+0x9a>
 800786a:	4621      	mov	r1, r4
 800786c:	4630      	mov	r0, r6
 800786e:	f000 fa07 	bl	8007c80 <__smakebuf_r>
 8007872:	89a0      	ldrh	r0, [r4, #12]
 8007874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007878:	f010 0301 	ands.w	r3, r0, #1
 800787c:	d00a      	beq.n	8007894 <__swsetup_r+0xbc>
 800787e:	2300      	movs	r3, #0
 8007880:	60a3      	str	r3, [r4, #8]
 8007882:	6963      	ldr	r3, [r4, #20]
 8007884:	425b      	negs	r3, r3
 8007886:	61a3      	str	r3, [r4, #24]
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	b943      	cbnz	r3, 800789e <__swsetup_r+0xc6>
 800788c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007890:	d1ba      	bne.n	8007808 <__swsetup_r+0x30>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	0781      	lsls	r1, r0, #30
 8007896:	bf58      	it	pl
 8007898:	6963      	ldrpl	r3, [r4, #20]
 800789a:	60a3      	str	r3, [r4, #8]
 800789c:	e7f4      	b.n	8007888 <__swsetup_r+0xb0>
 800789e:	2000      	movs	r0, #0
 80078a0:	e7f7      	b.n	8007892 <__swsetup_r+0xba>
 80078a2:	bf00      	nop
 80078a4:	20000040 	.word	0x20000040
 80078a8:	080083ac 	.word	0x080083ac
 80078ac:	080083cc 	.word	0x080083cc
 80078b0:	0800838c 	.word	0x0800838c

080078b4 <abort>:
 80078b4:	b508      	push	{r3, lr}
 80078b6:	2006      	movs	r0, #6
 80078b8:	f000 fa52 	bl	8007d60 <raise>
 80078bc:	2001      	movs	r0, #1
 80078be:	f7fa f892 	bl	80019e6 <_exit>
	...

080078c4 <__sflush_r>:
 80078c4:	898a      	ldrh	r2, [r1, #12]
 80078c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ca:	4605      	mov	r5, r0
 80078cc:	0710      	lsls	r0, r2, #28
 80078ce:	460c      	mov	r4, r1
 80078d0:	d458      	bmi.n	8007984 <__sflush_r+0xc0>
 80078d2:	684b      	ldr	r3, [r1, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	dc05      	bgt.n	80078e4 <__sflush_r+0x20>
 80078d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	dc02      	bgt.n	80078e4 <__sflush_r+0x20>
 80078de:	2000      	movs	r0, #0
 80078e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078e6:	2e00      	cmp	r6, #0
 80078e8:	d0f9      	beq.n	80078de <__sflush_r+0x1a>
 80078ea:	2300      	movs	r3, #0
 80078ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078f0:	682f      	ldr	r7, [r5, #0]
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	d032      	beq.n	800795c <__sflush_r+0x98>
 80078f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	075a      	lsls	r2, r3, #29
 80078fc:	d505      	bpl.n	800790a <__sflush_r+0x46>
 80078fe:	6863      	ldr	r3, [r4, #4]
 8007900:	1ac0      	subs	r0, r0, r3
 8007902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007904:	b10b      	cbz	r3, 800790a <__sflush_r+0x46>
 8007906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007908:	1ac0      	subs	r0, r0, r3
 800790a:	2300      	movs	r3, #0
 800790c:	4602      	mov	r2, r0
 800790e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007910:	6a21      	ldr	r1, [r4, #32]
 8007912:	4628      	mov	r0, r5
 8007914:	47b0      	blx	r6
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	d106      	bne.n	800792a <__sflush_r+0x66>
 800791c:	6829      	ldr	r1, [r5, #0]
 800791e:	291d      	cmp	r1, #29
 8007920:	d82c      	bhi.n	800797c <__sflush_r+0xb8>
 8007922:	4a2a      	ldr	r2, [pc, #168]	; (80079cc <__sflush_r+0x108>)
 8007924:	40ca      	lsrs	r2, r1
 8007926:	07d6      	lsls	r6, r2, #31
 8007928:	d528      	bpl.n	800797c <__sflush_r+0xb8>
 800792a:	2200      	movs	r2, #0
 800792c:	6062      	str	r2, [r4, #4]
 800792e:	04d9      	lsls	r1, r3, #19
 8007930:	6922      	ldr	r2, [r4, #16]
 8007932:	6022      	str	r2, [r4, #0]
 8007934:	d504      	bpl.n	8007940 <__sflush_r+0x7c>
 8007936:	1c42      	adds	r2, r0, #1
 8007938:	d101      	bne.n	800793e <__sflush_r+0x7a>
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	b903      	cbnz	r3, 8007940 <__sflush_r+0x7c>
 800793e:	6560      	str	r0, [r4, #84]	; 0x54
 8007940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007942:	602f      	str	r7, [r5, #0]
 8007944:	2900      	cmp	r1, #0
 8007946:	d0ca      	beq.n	80078de <__sflush_r+0x1a>
 8007948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800794c:	4299      	cmp	r1, r3
 800794e:	d002      	beq.n	8007956 <__sflush_r+0x92>
 8007950:	4628      	mov	r0, r5
 8007952:	f7ff fae1 	bl	8006f18 <_free_r>
 8007956:	2000      	movs	r0, #0
 8007958:	6360      	str	r0, [r4, #52]	; 0x34
 800795a:	e7c1      	b.n	80078e0 <__sflush_r+0x1c>
 800795c:	6a21      	ldr	r1, [r4, #32]
 800795e:	2301      	movs	r3, #1
 8007960:	4628      	mov	r0, r5
 8007962:	47b0      	blx	r6
 8007964:	1c41      	adds	r1, r0, #1
 8007966:	d1c7      	bne.n	80078f8 <__sflush_r+0x34>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0c4      	beq.n	80078f8 <__sflush_r+0x34>
 800796e:	2b1d      	cmp	r3, #29
 8007970:	d001      	beq.n	8007976 <__sflush_r+0xb2>
 8007972:	2b16      	cmp	r3, #22
 8007974:	d101      	bne.n	800797a <__sflush_r+0xb6>
 8007976:	602f      	str	r7, [r5, #0]
 8007978:	e7b1      	b.n	80078de <__sflush_r+0x1a>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	e7ad      	b.n	80078e0 <__sflush_r+0x1c>
 8007984:	690f      	ldr	r7, [r1, #16]
 8007986:	2f00      	cmp	r7, #0
 8007988:	d0a9      	beq.n	80078de <__sflush_r+0x1a>
 800798a:	0793      	lsls	r3, r2, #30
 800798c:	680e      	ldr	r6, [r1, #0]
 800798e:	bf08      	it	eq
 8007990:	694b      	ldreq	r3, [r1, #20]
 8007992:	600f      	str	r7, [r1, #0]
 8007994:	bf18      	it	ne
 8007996:	2300      	movne	r3, #0
 8007998:	eba6 0807 	sub.w	r8, r6, r7
 800799c:	608b      	str	r3, [r1, #8]
 800799e:	f1b8 0f00 	cmp.w	r8, #0
 80079a2:	dd9c      	ble.n	80078de <__sflush_r+0x1a>
 80079a4:	6a21      	ldr	r1, [r4, #32]
 80079a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079a8:	4643      	mov	r3, r8
 80079aa:	463a      	mov	r2, r7
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b0      	blx	r6
 80079b0:	2800      	cmp	r0, #0
 80079b2:	dc06      	bgt.n	80079c2 <__sflush_r+0xfe>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079c0:	e78e      	b.n	80078e0 <__sflush_r+0x1c>
 80079c2:	4407      	add	r7, r0
 80079c4:	eba8 0800 	sub.w	r8, r8, r0
 80079c8:	e7e9      	b.n	800799e <__sflush_r+0xda>
 80079ca:	bf00      	nop
 80079cc:	20400001 	.word	0x20400001

080079d0 <_fflush_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	690b      	ldr	r3, [r1, #16]
 80079d4:	4605      	mov	r5, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	b913      	cbnz	r3, 80079e0 <_fflush_r+0x10>
 80079da:	2500      	movs	r5, #0
 80079dc:	4628      	mov	r0, r5
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	b118      	cbz	r0, 80079ea <_fflush_r+0x1a>
 80079e2:	6983      	ldr	r3, [r0, #24]
 80079e4:	b90b      	cbnz	r3, 80079ea <_fflush_r+0x1a>
 80079e6:	f000 f887 	bl	8007af8 <__sinit>
 80079ea:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <_fflush_r+0x6c>)
 80079ec:	429c      	cmp	r4, r3
 80079ee:	d11b      	bne.n	8007a28 <_fflush_r+0x58>
 80079f0:	686c      	ldr	r4, [r5, #4]
 80079f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0ef      	beq.n	80079da <_fflush_r+0xa>
 80079fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079fc:	07d0      	lsls	r0, r2, #31
 80079fe:	d404      	bmi.n	8007a0a <_fflush_r+0x3a>
 8007a00:	0599      	lsls	r1, r3, #22
 8007a02:	d402      	bmi.n	8007a0a <_fflush_r+0x3a>
 8007a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a06:	f000 f915 	bl	8007c34 <__retarget_lock_acquire_recursive>
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	f7ff ff59 	bl	80078c4 <__sflush_r>
 8007a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a14:	07da      	lsls	r2, r3, #31
 8007a16:	4605      	mov	r5, r0
 8007a18:	d4e0      	bmi.n	80079dc <_fflush_r+0xc>
 8007a1a:	89a3      	ldrh	r3, [r4, #12]
 8007a1c:	059b      	lsls	r3, r3, #22
 8007a1e:	d4dd      	bmi.n	80079dc <_fflush_r+0xc>
 8007a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a22:	f000 f908 	bl	8007c36 <__retarget_lock_release_recursive>
 8007a26:	e7d9      	b.n	80079dc <_fflush_r+0xc>
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <_fflush_r+0x70>)
 8007a2a:	429c      	cmp	r4, r3
 8007a2c:	d101      	bne.n	8007a32 <_fflush_r+0x62>
 8007a2e:	68ac      	ldr	r4, [r5, #8]
 8007a30:	e7df      	b.n	80079f2 <_fflush_r+0x22>
 8007a32:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <_fflush_r+0x74>)
 8007a34:	429c      	cmp	r4, r3
 8007a36:	bf08      	it	eq
 8007a38:	68ec      	ldreq	r4, [r5, #12]
 8007a3a:	e7da      	b.n	80079f2 <_fflush_r+0x22>
 8007a3c:	080083ac 	.word	0x080083ac
 8007a40:	080083cc 	.word	0x080083cc
 8007a44:	0800838c 	.word	0x0800838c

08007a48 <std>:
 8007a48:	2300      	movs	r3, #0
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a56:	6083      	str	r3, [r0, #8]
 8007a58:	8181      	strh	r1, [r0, #12]
 8007a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a5c:	81c2      	strh	r2, [r0, #14]
 8007a5e:	6183      	str	r3, [r0, #24]
 8007a60:	4619      	mov	r1, r3
 8007a62:	2208      	movs	r2, #8
 8007a64:	305c      	adds	r0, #92	; 0x5c
 8007a66:	f7fb fe4b 	bl	8003700 <memset>
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <std+0x38>)
 8007a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a6e:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <std+0x3c>)
 8007a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a72:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <std+0x40>)
 8007a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a76:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <std+0x44>)
 8007a78:	6224      	str	r4, [r4, #32]
 8007a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	bf00      	nop
 8007a80:	08007d99 	.word	0x08007d99
 8007a84:	08007dbb 	.word	0x08007dbb
 8007a88:	08007df3 	.word	0x08007df3
 8007a8c:	08007e17 	.word	0x08007e17

08007a90 <_cleanup_r>:
 8007a90:	4901      	ldr	r1, [pc, #4]	; (8007a98 <_cleanup_r+0x8>)
 8007a92:	f000 b8af 	b.w	8007bf4 <_fwalk_reent>
 8007a96:	bf00      	nop
 8007a98:	080079d1 	.word	0x080079d1

08007a9c <__sfmoreglue>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	1e4a      	subs	r2, r1, #1
 8007aa0:	2568      	movs	r5, #104	; 0x68
 8007aa2:	4355      	muls	r5, r2
 8007aa4:	460e      	mov	r6, r1
 8007aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007aaa:	f7ff fa83 	bl	8006fb4 <_malloc_r>
 8007aae:	4604      	mov	r4, r0
 8007ab0:	b140      	cbz	r0, 8007ac4 <__sfmoreglue+0x28>
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ab8:	300c      	adds	r0, #12
 8007aba:	60a0      	str	r0, [r4, #8]
 8007abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ac0:	f7fb fe1e 	bl	8003700 <memset>
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}

08007ac8 <__sfp_lock_acquire>:
 8007ac8:	4801      	ldr	r0, [pc, #4]	; (8007ad0 <__sfp_lock_acquire+0x8>)
 8007aca:	f000 b8b3 	b.w	8007c34 <__retarget_lock_acquire_recursive>
 8007ace:	bf00      	nop
 8007ad0:	2000041c 	.word	0x2000041c

08007ad4 <__sfp_lock_release>:
 8007ad4:	4801      	ldr	r0, [pc, #4]	; (8007adc <__sfp_lock_release+0x8>)
 8007ad6:	f000 b8ae 	b.w	8007c36 <__retarget_lock_release_recursive>
 8007ada:	bf00      	nop
 8007adc:	2000041c 	.word	0x2000041c

08007ae0 <__sinit_lock_acquire>:
 8007ae0:	4801      	ldr	r0, [pc, #4]	; (8007ae8 <__sinit_lock_acquire+0x8>)
 8007ae2:	f000 b8a7 	b.w	8007c34 <__retarget_lock_acquire_recursive>
 8007ae6:	bf00      	nop
 8007ae8:	20000417 	.word	0x20000417

08007aec <__sinit_lock_release>:
 8007aec:	4801      	ldr	r0, [pc, #4]	; (8007af4 <__sinit_lock_release+0x8>)
 8007aee:	f000 b8a2 	b.w	8007c36 <__retarget_lock_release_recursive>
 8007af2:	bf00      	nop
 8007af4:	20000417 	.word	0x20000417

08007af8 <__sinit>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	4604      	mov	r4, r0
 8007afc:	f7ff fff0 	bl	8007ae0 <__sinit_lock_acquire>
 8007b00:	69a3      	ldr	r3, [r4, #24]
 8007b02:	b11b      	cbz	r3, 8007b0c <__sinit+0x14>
 8007b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b08:	f7ff bff0 	b.w	8007aec <__sinit_lock_release>
 8007b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b10:	6523      	str	r3, [r4, #80]	; 0x50
 8007b12:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <__sinit+0x68>)
 8007b14:	4a13      	ldr	r2, [pc, #76]	; (8007b64 <__sinit+0x6c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	bf04      	itt	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	61a3      	streq	r3, [r4, #24]
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 f820 	bl	8007b68 <__sfp>
 8007b28:	6060      	str	r0, [r4, #4]
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 f81c 	bl	8007b68 <__sfp>
 8007b30:	60a0      	str	r0, [r4, #8]
 8007b32:	4620      	mov	r0, r4
 8007b34:	f000 f818 	bl	8007b68 <__sfp>
 8007b38:	2200      	movs	r2, #0
 8007b3a:	60e0      	str	r0, [r4, #12]
 8007b3c:	2104      	movs	r1, #4
 8007b3e:	6860      	ldr	r0, [r4, #4]
 8007b40:	f7ff ff82 	bl	8007a48 <std>
 8007b44:	68a0      	ldr	r0, [r4, #8]
 8007b46:	2201      	movs	r2, #1
 8007b48:	2109      	movs	r1, #9
 8007b4a:	f7ff ff7d 	bl	8007a48 <std>
 8007b4e:	68e0      	ldr	r0, [r4, #12]
 8007b50:	2202      	movs	r2, #2
 8007b52:	2112      	movs	r1, #18
 8007b54:	f7ff ff78 	bl	8007a48 <std>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	61a3      	str	r3, [r4, #24]
 8007b5c:	e7d2      	b.n	8007b04 <__sinit+0xc>
 8007b5e:	bf00      	nop
 8007b60:	08007f38 	.word	0x08007f38
 8007b64:	08007a91 	.word	0x08007a91

08007b68 <__sfp>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	f7ff ffac 	bl	8007ac8 <__sfp_lock_acquire>
 8007b70:	4b1e      	ldr	r3, [pc, #120]	; (8007bec <__sfp+0x84>)
 8007b72:	681e      	ldr	r6, [r3, #0]
 8007b74:	69b3      	ldr	r3, [r6, #24]
 8007b76:	b913      	cbnz	r3, 8007b7e <__sfp+0x16>
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff ffbd 	bl	8007af8 <__sinit>
 8007b7e:	3648      	adds	r6, #72	; 0x48
 8007b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	d503      	bpl.n	8007b90 <__sfp+0x28>
 8007b88:	6833      	ldr	r3, [r6, #0]
 8007b8a:	b30b      	cbz	r3, 8007bd0 <__sfp+0x68>
 8007b8c:	6836      	ldr	r6, [r6, #0]
 8007b8e:	e7f7      	b.n	8007b80 <__sfp+0x18>
 8007b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b94:	b9d5      	cbnz	r5, 8007bcc <__sfp+0x64>
 8007b96:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <__sfp+0x88>)
 8007b98:	60e3      	str	r3, [r4, #12]
 8007b9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8007ba0:	f000 f847 	bl	8007c32 <__retarget_lock_init_recursive>
 8007ba4:	f7ff ff96 	bl	8007ad4 <__sfp_lock_release>
 8007ba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bb0:	6025      	str	r5, [r4, #0]
 8007bb2:	61a5      	str	r5, [r4, #24]
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bbc:	f7fb fda0 	bl	8003700 <memset>
 8007bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bc8:	4620      	mov	r0, r4
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bcc:	3468      	adds	r4, #104	; 0x68
 8007bce:	e7d9      	b.n	8007b84 <__sfp+0x1c>
 8007bd0:	2104      	movs	r1, #4
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	f7ff ff62 	bl	8007a9c <__sfmoreglue>
 8007bd8:	4604      	mov	r4, r0
 8007bda:	6030      	str	r0, [r6, #0]
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d1d5      	bne.n	8007b8c <__sfp+0x24>
 8007be0:	f7ff ff78 	bl	8007ad4 <__sfp_lock_release>
 8007be4:	230c      	movs	r3, #12
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	e7ee      	b.n	8007bc8 <__sfp+0x60>
 8007bea:	bf00      	nop
 8007bec:	08007f38 	.word	0x08007f38
 8007bf0:	ffff0001 	.word	0xffff0001

08007bf4 <_fwalk_reent>:
 8007bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	4688      	mov	r8, r1
 8007bfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c00:	2700      	movs	r7, #0
 8007c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c06:	f1b9 0901 	subs.w	r9, r9, #1
 8007c0a:	d505      	bpl.n	8007c18 <_fwalk_reent+0x24>
 8007c0c:	6824      	ldr	r4, [r4, #0]
 8007c0e:	2c00      	cmp	r4, #0
 8007c10:	d1f7      	bne.n	8007c02 <_fwalk_reent+0xe>
 8007c12:	4638      	mov	r0, r7
 8007c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c18:	89ab      	ldrh	r3, [r5, #12]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d907      	bls.n	8007c2e <_fwalk_reent+0x3a>
 8007c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c22:	3301      	adds	r3, #1
 8007c24:	d003      	beq.n	8007c2e <_fwalk_reent+0x3a>
 8007c26:	4629      	mov	r1, r5
 8007c28:	4630      	mov	r0, r6
 8007c2a:	47c0      	blx	r8
 8007c2c:	4307      	orrs	r7, r0
 8007c2e:	3568      	adds	r5, #104	; 0x68
 8007c30:	e7e9      	b.n	8007c06 <_fwalk_reent+0x12>

08007c32 <__retarget_lock_init_recursive>:
 8007c32:	4770      	bx	lr

08007c34 <__retarget_lock_acquire_recursive>:
 8007c34:	4770      	bx	lr

08007c36 <__retarget_lock_release_recursive>:
 8007c36:	4770      	bx	lr

08007c38 <__swhatbuf_r>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	460e      	mov	r6, r1
 8007c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c40:	2900      	cmp	r1, #0
 8007c42:	b096      	sub	sp, #88	; 0x58
 8007c44:	4614      	mov	r4, r2
 8007c46:	461d      	mov	r5, r3
 8007c48:	da07      	bge.n	8007c5a <__swhatbuf_r+0x22>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	89b3      	ldrh	r3, [r6, #12]
 8007c50:	061a      	lsls	r2, r3, #24
 8007c52:	d410      	bmi.n	8007c76 <__swhatbuf_r+0x3e>
 8007c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c58:	e00e      	b.n	8007c78 <__swhatbuf_r+0x40>
 8007c5a:	466a      	mov	r2, sp
 8007c5c:	f000 f902 	bl	8007e64 <_fstat_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	dbf2      	blt.n	8007c4a <__swhatbuf_r+0x12>
 8007c64:	9a01      	ldr	r2, [sp, #4]
 8007c66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c6e:	425a      	negs	r2, r3
 8007c70:	415a      	adcs	r2, r3
 8007c72:	602a      	str	r2, [r5, #0]
 8007c74:	e7ee      	b.n	8007c54 <__swhatbuf_r+0x1c>
 8007c76:	2340      	movs	r3, #64	; 0x40
 8007c78:	2000      	movs	r0, #0
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	b016      	add	sp, #88	; 0x58
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}

08007c80 <__smakebuf_r>:
 8007c80:	898b      	ldrh	r3, [r1, #12]
 8007c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c84:	079d      	lsls	r5, r3, #30
 8007c86:	4606      	mov	r6, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	d507      	bpl.n	8007c9c <__smakebuf_r+0x1c>
 8007c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	6123      	str	r3, [r4, #16]
 8007c94:	2301      	movs	r3, #1
 8007c96:	6163      	str	r3, [r4, #20]
 8007c98:	b002      	add	sp, #8
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	ab01      	add	r3, sp, #4
 8007c9e:	466a      	mov	r2, sp
 8007ca0:	f7ff ffca 	bl	8007c38 <__swhatbuf_r>
 8007ca4:	9900      	ldr	r1, [sp, #0]
 8007ca6:	4605      	mov	r5, r0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f7ff f983 	bl	8006fb4 <_malloc_r>
 8007cae:	b948      	cbnz	r0, 8007cc4 <__smakebuf_r+0x44>
 8007cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb4:	059a      	lsls	r2, r3, #22
 8007cb6:	d4ef      	bmi.n	8007c98 <__smakebuf_r+0x18>
 8007cb8:	f023 0303 	bic.w	r3, r3, #3
 8007cbc:	f043 0302 	orr.w	r3, r3, #2
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	e7e3      	b.n	8007c8c <__smakebuf_r+0xc>
 8007cc4:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <__smakebuf_r+0x7c>)
 8007cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	6020      	str	r0, [r4, #0]
 8007ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd0:	81a3      	strh	r3, [r4, #12]
 8007cd2:	9b00      	ldr	r3, [sp, #0]
 8007cd4:	6163      	str	r3, [r4, #20]
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	6120      	str	r0, [r4, #16]
 8007cda:	b15b      	cbz	r3, 8007cf4 <__smakebuf_r+0x74>
 8007cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 f8d1 	bl	8007e88 <_isatty_r>
 8007ce6:	b128      	cbz	r0, 8007cf4 <__smakebuf_r+0x74>
 8007ce8:	89a3      	ldrh	r3, [r4, #12]
 8007cea:	f023 0303 	bic.w	r3, r3, #3
 8007cee:	f043 0301 	orr.w	r3, r3, #1
 8007cf2:	81a3      	strh	r3, [r4, #12]
 8007cf4:	89a0      	ldrh	r0, [r4, #12]
 8007cf6:	4305      	orrs	r5, r0
 8007cf8:	81a5      	strh	r5, [r4, #12]
 8007cfa:	e7cd      	b.n	8007c98 <__smakebuf_r+0x18>
 8007cfc:	08007a91 	.word	0x08007a91

08007d00 <_malloc_usable_size_r>:
 8007d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d04:	1f18      	subs	r0, r3, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfbc      	itt	lt
 8007d0a:	580b      	ldrlt	r3, [r1, r0]
 8007d0c:	18c0      	addlt	r0, r0, r3
 8007d0e:	4770      	bx	lr

08007d10 <_raise_r>:
 8007d10:	291f      	cmp	r1, #31
 8007d12:	b538      	push	{r3, r4, r5, lr}
 8007d14:	4604      	mov	r4, r0
 8007d16:	460d      	mov	r5, r1
 8007d18:	d904      	bls.n	8007d24 <_raise_r+0x14>
 8007d1a:	2316      	movs	r3, #22
 8007d1c:	6003      	str	r3, [r0, #0]
 8007d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d26:	b112      	cbz	r2, 8007d2e <_raise_r+0x1e>
 8007d28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d2c:	b94b      	cbnz	r3, 8007d42 <_raise_r+0x32>
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 f830 	bl	8007d94 <_getpid_r>
 8007d34:	462a      	mov	r2, r5
 8007d36:	4601      	mov	r1, r0
 8007d38:	4620      	mov	r0, r4
 8007d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d3e:	f000 b817 	b.w	8007d70 <_kill_r>
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d00a      	beq.n	8007d5c <_raise_r+0x4c>
 8007d46:	1c59      	adds	r1, r3, #1
 8007d48:	d103      	bne.n	8007d52 <_raise_r+0x42>
 8007d4a:	2316      	movs	r3, #22
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	2001      	movs	r0, #1
 8007d50:	e7e7      	b.n	8007d22 <_raise_r+0x12>
 8007d52:	2400      	movs	r4, #0
 8007d54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d58:	4628      	mov	r0, r5
 8007d5a:	4798      	blx	r3
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	e7e0      	b.n	8007d22 <_raise_r+0x12>

08007d60 <raise>:
 8007d60:	4b02      	ldr	r3, [pc, #8]	; (8007d6c <raise+0xc>)
 8007d62:	4601      	mov	r1, r0
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	f7ff bfd3 	b.w	8007d10 <_raise_r>
 8007d6a:	bf00      	nop
 8007d6c:	20000040 	.word	0x20000040

08007d70 <_kill_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d07      	ldr	r5, [pc, #28]	; (8007d90 <_kill_r+0x20>)
 8007d74:	2300      	movs	r3, #0
 8007d76:	4604      	mov	r4, r0
 8007d78:	4608      	mov	r0, r1
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	f7f9 fe22 	bl	80019c6 <_kill>
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	d102      	bne.n	8007d8c <_kill_r+0x1c>
 8007d86:	682b      	ldr	r3, [r5, #0]
 8007d88:	b103      	cbz	r3, 8007d8c <_kill_r+0x1c>
 8007d8a:	6023      	str	r3, [r4, #0]
 8007d8c:	bd38      	pop	{r3, r4, r5, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000410 	.word	0x20000410

08007d94 <_getpid_r>:
 8007d94:	f7f9 be10 	b.w	80019b8 <_getpid>

08007d98 <__sread>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da0:	f000 f894 	bl	8007ecc <_read_r>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	bfab      	itete	ge
 8007da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007daa:	89a3      	ldrhlt	r3, [r4, #12]
 8007dac:	181b      	addge	r3, r3, r0
 8007dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007db2:	bfac      	ite	ge
 8007db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007db6:	81a3      	strhlt	r3, [r4, #12]
 8007db8:	bd10      	pop	{r4, pc}

08007dba <__swrite>:
 8007dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbe:	461f      	mov	r7, r3
 8007dc0:	898b      	ldrh	r3, [r1, #12]
 8007dc2:	05db      	lsls	r3, r3, #23
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	4616      	mov	r6, r2
 8007dca:	d505      	bpl.n	8007dd8 <__swrite+0x1e>
 8007dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f000 f868 	bl	8007ea8 <_lseek_r>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	4632      	mov	r2, r6
 8007de6:	463b      	mov	r3, r7
 8007de8:	4628      	mov	r0, r5
 8007dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dee:	f000 b817 	b.w	8007e20 <_write_r>

08007df2 <__sseek>:
 8007df2:	b510      	push	{r4, lr}
 8007df4:	460c      	mov	r4, r1
 8007df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfa:	f000 f855 	bl	8007ea8 <_lseek_r>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	89a3      	ldrh	r3, [r4, #12]
 8007e02:	bf15      	itete	ne
 8007e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e0e:	81a3      	strheq	r3, [r4, #12]
 8007e10:	bf18      	it	ne
 8007e12:	81a3      	strhne	r3, [r4, #12]
 8007e14:	bd10      	pop	{r4, pc}

08007e16 <__sclose>:
 8007e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1a:	f000 b813 	b.w	8007e44 <_close_r>
	...

08007e20 <_write_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d07      	ldr	r5, [pc, #28]	; (8007e40 <_write_r+0x20>)
 8007e24:	4604      	mov	r4, r0
 8007e26:	4608      	mov	r0, r1
 8007e28:	4611      	mov	r1, r2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	602a      	str	r2, [r5, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f7f9 fe00 	bl	8001a34 <_write>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_write_r+0x1e>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_write_r+0x1e>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	20000410 	.word	0x20000410

08007e44 <_close_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d06      	ldr	r5, [pc, #24]	; (8007e60 <_close_r+0x1c>)
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	4608      	mov	r0, r1
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	f7f9 fe0c 	bl	8001a6c <_close>
 8007e54:	1c43      	adds	r3, r0, #1
 8007e56:	d102      	bne.n	8007e5e <_close_r+0x1a>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	b103      	cbz	r3, 8007e5e <_close_r+0x1a>
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	bd38      	pop	{r3, r4, r5, pc}
 8007e60:	20000410 	.word	0x20000410

08007e64 <_fstat_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	4d07      	ldr	r5, [pc, #28]	; (8007e84 <_fstat_r+0x20>)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	4611      	mov	r1, r2
 8007e70:	602b      	str	r3, [r5, #0]
 8007e72:	f7f9 fe06 	bl	8001a82 <_fstat>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d102      	bne.n	8007e80 <_fstat_r+0x1c>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	b103      	cbz	r3, 8007e80 <_fstat_r+0x1c>
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	bd38      	pop	{r3, r4, r5, pc}
 8007e82:	bf00      	nop
 8007e84:	20000410 	.word	0x20000410

08007e88 <_isatty_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d06      	ldr	r5, [pc, #24]	; (8007ea4 <_isatty_r+0x1c>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	f7f9 fe04 	bl	8001aa0 <_isatty>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_isatty_r+0x1a>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_isatty_r+0x1a>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	20000410 	.word	0x20000410

08007ea8 <_lseek_r>:
 8007ea8:	b538      	push	{r3, r4, r5, lr}
 8007eaa:	4d07      	ldr	r5, [pc, #28]	; (8007ec8 <_lseek_r+0x20>)
 8007eac:	4604      	mov	r4, r0
 8007eae:	4608      	mov	r0, r1
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	602a      	str	r2, [r5, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f7f9 fdfc 	bl	8001ab4 <_lseek>
 8007ebc:	1c43      	adds	r3, r0, #1
 8007ebe:	d102      	bne.n	8007ec6 <_lseek_r+0x1e>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b103      	cbz	r3, 8007ec6 <_lseek_r+0x1e>
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	20000410 	.word	0x20000410

08007ecc <_read_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4d07      	ldr	r5, [pc, #28]	; (8007eec <_read_r+0x20>)
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	4608      	mov	r0, r1
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	602a      	str	r2, [r5, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f7f9 fd8d 	bl	80019fa <_read>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d102      	bne.n	8007eea <_read_r+0x1e>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b103      	cbz	r3, 8007eea <_read_r+0x1e>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	20000410 	.word	0x20000410

08007ef0 <_init>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr

08007efc <_fini>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	bf00      	nop
 8007f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f02:	bc08      	pop	{r3}
 8007f04:	469e      	mov	lr, r3
 8007f06:	4770      	bx	lr
